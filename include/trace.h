#ifndef TRACE_H
#define TRACE_H

typedef enum {
    TRACE_QEMU_MEMALIGN,
    TRACE_QEMU_ANON_RAM_ALLOC,
    TRACE_QEMU_VFREE,
    TRACE_QEMU_ANON_RAM_FREE,
    TRACE_VIRTQUEUE_FILL,
    TRACE_VIRTQUEUE_FLUSH,
    TRACE_VIRTQUEUE_POP,
    TRACE_VIRTIO_QUEUE_NOTIFY,
    TRACE_VIRTIO_IRQ,
    TRACE_VIRTIO_NOTIFY,
    TRACE_VIRTIO_SET_STATUS,
    TRACE_VIRTIO_RNG_GUEST_NOT_READY,
    TRACE_VIRTIO_RNG_PUSHED,
    TRACE_VIRTIO_RNG_REQUEST,
    TRACE_VIRTIO_SERIAL_SEND_CONTROL_EVENT,
    TRACE_VIRTIO_SERIAL_THROTTLE_PORT,
    TRACE_VIRTIO_SERIAL_HANDLE_CONTROL_MESSAGE,
    TRACE_VIRTIO_SERIAL_HANDLE_CONTROL_MESSAGE_PORT,
    TRACE_VIRTIO_CONSOLE_FLUSH_BUF,
    TRACE_VIRTIO_CONSOLE_CHR_READ,
    TRACE_VIRTIO_CONSOLE_CHR_EVENT,
    TRACE_BDRV_OPEN_COMMON,
    TRACE_BDRV_LOCK_MEDIUM,
    TRACE_MULTIWRITE_CB,
    TRACE_BDRV_AIO_MULTIWRITE,
    TRACE_BDRV_AIO_DISCARD,
    TRACE_BDRV_AIO_FLUSH,
    TRACE_BDRV_AIO_READV,
    TRACE_BDRV_AIO_WRITEV,
    TRACE_BDRV_AIO_WRITE_ZEROES,
    TRACE_BDRV_CO_READV,
    TRACE_BDRV_CO_COPY_ON_READV,
    TRACE_BDRV_CO_READV_NO_SERIALISING,
    TRACE_BDRV_CO_WRITEV,
    TRACE_BDRV_CO_WRITE_ZEROES,
    TRACE_BDRV_CO_IO_EM,
    TRACE_BDRV_CO_DO_COPY_ON_READV,
    TRACE_STREAM_ONE_ITERATION,
    TRACE_STREAM_START,
    TRACE_COMMIT_ONE_ITERATION,
    TRACE_COMMIT_START,
    TRACE_MIRROR_START,
    TRACE_MIRROR_RESTART_ITER,
    TRACE_MIRROR_BEFORE_FLUSH,
    TRACE_MIRROR_BEFORE_DRAIN,
    TRACE_MIRROR_BEFORE_SLEEP,
    TRACE_MIRROR_ONE_ITERATION,
    TRACE_MIRROR_ITERATION_DONE,
    TRACE_MIRROR_YIELD,
    TRACE_MIRROR_YIELD_IN_FLIGHT,
    TRACE_MIRROR_YIELD_BUF_BUSY,
    TRACE_MIRROR_BREAK_BUF_BUSY,
    TRACE_BACKUP_DO_COW_ENTER,
    TRACE_BACKUP_DO_COW_RETURN,
    TRACE_BACKUP_DO_COW_SKIP,
    TRACE_BACKUP_DO_COW_PROCESS,
    TRACE_BACKUP_DO_COW_READ_FAIL,
    TRACE_BACKUP_DO_COW_WRITE_FAIL,
    TRACE_QMP_BLOCK_JOB_CANCEL,
    TRACE_QMP_BLOCK_JOB_PAUSE,
    TRACE_QMP_BLOCK_JOB_RESUME,
    TRACE_QMP_BLOCK_JOB_COMPLETE,
    TRACE_BLOCK_JOB_CB,
    TRACE_QMP_BLOCK_STREAM,
    TRACE_VIRTIO_BLK_REQ_COMPLETE,
    TRACE_VIRTIO_BLK_RW_COMPLETE,
    TRACE_VIRTIO_BLK_HANDLE_WRITE,
    TRACE_VIRTIO_BLK_HANDLE_READ,
    TRACE_VIRTIO_BLK_SUBMIT_MULTIREQ,
    TRACE_VIRTIO_BLK_DATA_PLANE_START,
    TRACE_VIRTIO_BLK_DATA_PLANE_STOP,
    TRACE_VIRTIO_BLK_DATA_PLANE_PROCESS_REQUEST,
    TRACE_THREAD_POOL_SUBMIT,
    TRACE_THREAD_POOL_COMPLETE,
    TRACE_THREAD_POOL_CANCEL,
    TRACE_PAIO_SUBMIT_CO,
    TRACE_PAIO_SUBMIT,
    TRACE_CPU_IN,
    TRACE_CPU_OUT,
    TRACE_BALLOON_EVENT,
    TRACE_VIRTIO_BALLOON_HANDLE_OUTPUT,
    TRACE_VIRTIO_BALLOON_GET_CONFIG,
    TRACE_VIRTIO_BALLOON_SET_CONFIG,
    TRACE_VIRTIO_BALLOON_TO_TARGET,
    TRACE_CPU_SET_APIC_BASE,
    TRACE_CPU_GET_APIC_BASE,
    TRACE_APIC_REPORT_IRQ_DELIVERED,
    TRACE_APIC_RESET_IRQ_DELIVERED,
    TRACE_APIC_GET_IRQ_DELIVERED,
    TRACE_APIC_LOCAL_DELIVER,
    TRACE_APIC_DELIVER_IRQ,
    TRACE_APIC_MEM_READL,
    TRACE_APIC_MEM_WRITEL,
    TRACE_CS4231_MEM_READL_DREG,
    TRACE_CS4231_MEM_READL_REG,
    TRACE_CS4231_MEM_WRITEL_REG,
    TRACE_CS4231_MEM_WRITEL_DREG,
    TRACE_NVRAM_READ,
    TRACE_NVRAM_WRITE,
    TRACE_ECC_MEM_WRITEL_MER,
    TRACE_ECC_MEM_WRITEL_MDR,
    TRACE_ECC_MEM_WRITEL_MFSR,
    TRACE_ECC_MEM_WRITEL_VCR,
    TRACE_ECC_MEM_WRITEL_DR,
    TRACE_ECC_MEM_WRITEL_ECR0,
    TRACE_ECC_MEM_WRITEL_ECR1,
    TRACE_ECC_MEM_READL_MER,
    TRACE_ECC_MEM_READL_MDR,
    TRACE_ECC_MEM_READL_MFSR,
    TRACE_ECC_MEM_READL_VCR,
    TRACE_ECC_MEM_READL_MFAR0,
    TRACE_ECC_MEM_READL_MFAR1,
    TRACE_ECC_MEM_READL_DR,
    TRACE_ECC_MEM_READL_ECR0,
    TRACE_ECC_MEM_READL_ECR1,
    TRACE_ECC_DIAG_MEM_WRITEB,
    TRACE_ECC_DIAG_MEM_READB,
    TRACE_FW_CFG_SELECT,
    TRACE_FW_CFG_READ,
    TRACE_FW_CFG_ADD_FILE,
    TRACE_HD_GEOMETRY_LCHS_GUESS,
    TRACE_HD_GEOMETRY_GUESS,
    TRACE_JAZZ_LED_READ,
    TRACE_JAZZ_LED_WRITE,
    TRACE_XENFB_MOUSE_EVENT,
    TRACE_XENFB_INPUT_CONNECTED,
    TRACE_LANCE_MEM_READW,
    TRACE_LANCE_MEM_WRITEW,
    TRACE_SLAVIO_INTCTL_MEM_READL,
    TRACE_SLAVIO_INTCTL_MEM_WRITEL,
    TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR,
    TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET,
    TRACE_SLAVIO_INTCTLM_MEM_READL,
    TRACE_SLAVIO_INTCTLM_MEM_WRITEL,
    TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE,
    TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE,
    TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET,
    TRACE_SLAVIO_CHECK_INTERRUPTS,
    TRACE_SLAVIO_SET_IRQ,
    TRACE_SLAVIO_SET_TIMER_IRQ_CPU,
    TRACE_PS2_PUT_KEYCODE,
    TRACE_PS2_READ_DATA,
    TRACE_PS2_SET_LEDSTATE,
    TRACE_PS2_RESET_KEYBOARD,
    TRACE_PS2_WRITE_KEYBOARD,
    TRACE_PS2_KEYBOARD_SET_TRANSLATION,
    TRACE_PS2_MOUSE_SEND_PACKET,
    TRACE_PS2_MOUSE_EVENT_DISABLED,
    TRACE_PS2_MOUSE_EVENT,
    TRACE_PS2_MOUSE_FAKE_EVENT,
    TRACE_PS2_WRITE_MOUSE,
    TRACE_PS2_KBD_RESET,
    TRACE_PS2_MOUSE_RESET,
    TRACE_PS2_KBD_INIT,
    TRACE_PS2_MOUSE_INIT,
    TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE,
    TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER,
    TRACE_SLAVIO_SET_POWER_FAIL,
    TRACE_SLAVIO_CFG_MEM_WRITEB,
    TRACE_SLAVIO_CFG_MEM_READB,
    TRACE_SLAVIO_DIAG_MEM_WRITEB,
    TRACE_SLAVIO_DIAG_MEM_READB,
    TRACE_SLAVIO_MDM_MEM_WRITEB,
    TRACE_SLAVIO_MDM_MEM_READB,
    TRACE_SLAVIO_AUX1_MEM_WRITEB,
    TRACE_SLAVIO_AUX1_MEM_READB,
    TRACE_SLAVIO_AUX2_MEM_WRITEB,
    TRACE_SLAVIO_AUX2_MEM_READB,
    TRACE_APC_MEM_WRITEB,
    TRACE_APC_MEM_READB,
    TRACE_SLAVIO_SYSCTRL_MEM_WRITEL,
    TRACE_SLAVIO_SYSCTRL_MEM_READL,
    TRACE_SLAVIO_LED_MEM_WRITEW,
    TRACE_SLAVIO_LED_MEM_READW,
    TRACE_SLAVIO_TIMER_GET_OUT,
    TRACE_SLAVIO_TIMER_IRQ,
    TRACE_SLAVIO_TIMER_MEM_READL_INVALID,
    TRACE_SLAVIO_TIMER_MEM_READL,
    TRACE_SLAVIO_TIMER_MEM_WRITEL,
    TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT,
    TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID,
    TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START,
    TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP,
    TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER,
    TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER,
    TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID,
    TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID,
    TRACE_JAZZIO_READ,
    TRACE_JAZZIO_WRITE,
    TRACE_RC4030_READ,
    TRACE_RC4030_WRITE,
    TRACE_LEDMA_MEMORY_READ,
    TRACE_LEDMA_MEMORY_WRITE,
    TRACE_SPARC32_DMA_SET_IRQ_RAISE,
    TRACE_SPARC32_DMA_SET_IRQ_LOWER,
    TRACE_ESPDMA_MEMORY_READ,
    TRACE_ESPDMA_MEMORY_WRITE,
    TRACE_SPARC32_DMA_MEM_READL,
    TRACE_SPARC32_DMA_MEM_WRITEL,
    TRACE_SPARC32_DMA_ENABLE_RAISE,
    TRACE_SPARC32_DMA_ENABLE_LOWER,
    TRACE_SUN4M_CPU_INTERRUPT,
    TRACE_SUN4M_CPU_RESET_INTERRUPT,
    TRACE_SUN4M_CPU_SET_IRQ_RAISE,
    TRACE_SUN4M_CPU_SET_IRQ_LOWER,
    TRACE_SUN4M_IOMMU_MEM_READL,
    TRACE_SUN4M_IOMMU_MEM_WRITEL,
    TRACE_SUN4M_IOMMU_MEM_WRITEL_CTRL,
    TRACE_SUN4M_IOMMU_MEM_WRITEL_TLBFLUSH,
    TRACE_SUN4M_IOMMU_MEM_WRITEL_PGFLUSH,
    TRACE_SUN4M_IOMMU_PAGE_GET_FLAGS,
    TRACE_SUN4M_IOMMU_TRANSLATE_PA,
    TRACE_SUN4M_IOMMU_BAD_ADDR,
    TRACE_USB_PACKET_STATE_CHANGE,
    TRACE_USB_PACKET_STATE_FAULT,
    TRACE_USB_PORT_CLAIM,
    TRACE_USB_PORT_ATTACH,
    TRACE_USB_PORT_DETACH,
    TRACE_USB_PORT_RELEASE,
    TRACE_USB_OHCI_ISO_TD_READ_FAILED,
    TRACE_USB_OHCI_ISO_TD_HEAD,
    TRACE_USB_OHCI_ISO_TD_HEAD_OFFSET,
    TRACE_USB_OHCI_ISO_TD_RELATIVE_FRAME_NUMBER_NEG,
    TRACE_USB_OHCI_ISO_TD_RELATIVE_FRAME_NUMBER_BIG,
    TRACE_USB_OHCI_ISO_TD_BAD_DIRECTION,
    TRACE_USB_OHCI_ISO_TD_BAD_BP_BE,
    TRACE_USB_OHCI_ISO_TD_BAD_CC_NOT_ACCESSED,
    TRACE_USB_OHCI_ISO_TD_BAD_CC_OVERRUN,
    TRACE_USB_OHCI_ISO_TD_SO,
    TRACE_USB_OHCI_ISO_TD_DATA_OVERRUN,
    TRACE_USB_OHCI_ISO_TD_DATA_UNDERRUN,
    TRACE_USB_OHCI_ISO_TD_NAK,
    TRACE_USB_OHCI_ISO_TD_BAD_RESPONSE,
    TRACE_USB_OHCI_PORT_ATTACH,
    TRACE_USB_OHCI_PORT_DETACH,
    TRACE_USB_OHCI_PORT_WAKEUP,
    TRACE_USB_OHCI_PORT_SUSPEND,
    TRACE_USB_OHCI_PORT_RESET,
    TRACE_USB_OHCI_REMOTE_WAKEUP,
    TRACE_USB_OHCI_RESET,
    TRACE_USB_OHCI_START,
    TRACE_USB_OHCI_RESUME,
    TRACE_USB_OHCI_STOP,
    TRACE_USB_OHCI_EXIT,
    TRACE_USB_OHCI_SET_CTL,
    TRACE_USB_OHCI_TD_UNDERRUN,
    TRACE_USB_OHCI_TD_DEV_ERROR,
    TRACE_USB_OHCI_TD_NAK,
    TRACE_USB_OHCI_TD_STALL,
    TRACE_USB_OHCI_TD_BABBLE,
    TRACE_USB_OHCI_TD_BAD_DEVICE_RESPONSE,
    TRACE_USB_OHCI_TD_READ_ERROR,
    TRACE_USB_OHCI_TD_BAD_DIRECTION,
    TRACE_USB_OHCI_TD_SKIP_ASYNC,
    TRACE_USB_OHCI_TD_PKT_HDR,
    TRACE_USB_OHCI_TD_PKT_SHORT,
    TRACE_USB_OHCI_TD_PKT_FULL,
    TRACE_USB_OHCI_TD_TOO_MANY_PENDING,
    TRACE_USB_OHCI_TD_PACKET_STATUS,
    TRACE_USB_OHCI_ED_READ_ERROR,
    TRACE_USB_OHCI_ED_PKT,
    TRACE_USB_OHCI_ED_PKT_FLAGS,
    TRACE_USB_OHCI_HCCA_READ_ERROR,
    TRACE_USB_OHCI_MEM_READ_UNALIGNED,
    TRACE_USB_OHCI_MEM_READ_BAD_OFFSET,
    TRACE_USB_OHCI_MEM_WRITE_UNALIGNED,
    TRACE_USB_OHCI_MEM_WRITE_BAD_OFFSET,
    TRACE_USB_OHCI_PROCESS_LISTS,
    TRACE_USB_OHCI_BUS_EOF_TIMER_FAILED,
    TRACE_USB_OHCI_SET_FRAME_INTERVAL,
    TRACE_USB_OHCI_HUB_POWER_UP,
    TRACE_USB_OHCI_HUB_POWER_DOWN,
    TRACE_USB_OHCI_INIT_TIME,
    TRACE_USB_OHCI_DIE,
    TRACE_USB_OHCI_ASYNC_COMPLETE,
    TRACE_USB_EHCI_RESET,
    TRACE_USB_EHCI_UNREALIZE,
    TRACE_USB_EHCI_OPREG_READ,
    TRACE_USB_EHCI_OPREG_WRITE,
    TRACE_USB_EHCI_OPREG_CHANGE,
    TRACE_USB_EHCI_PORTSC_READ,
    TRACE_USB_EHCI_PORTSC_WRITE,
    TRACE_USB_EHCI_PORTSC_CHANGE,
    TRACE_USB_EHCI_USBSTS,
    TRACE_USB_EHCI_STATE,
    TRACE_USB_EHCI_QH_PTRS,
    TRACE_USB_EHCI_QH_FIELDS,
    TRACE_USB_EHCI_QH_BITS,
    TRACE_USB_EHCI_QTD_PTRS,
    TRACE_USB_EHCI_QTD_FIELDS,
    TRACE_USB_EHCI_QTD_BITS,
    TRACE_USB_EHCI_ITD,
    TRACE_USB_EHCI_SITD,
    TRACE_USB_EHCI_PORT_ATTACH,
    TRACE_USB_EHCI_PORT_DETACH,
    TRACE_USB_EHCI_PORT_RESET,
    TRACE_USB_EHCI_PORT_SUSPEND,
    TRACE_USB_EHCI_PORT_WAKEUP,
    TRACE_USB_EHCI_PORT_RESUME,
    TRACE_USB_EHCI_QUEUE_ACTION,
    TRACE_USB_EHCI_PACKET_ACTION,
    TRACE_USB_EHCI_IRQ,
    TRACE_USB_EHCI_GUEST_BUG,
    TRACE_USB_EHCI_DOORBELL_RING,
    TRACE_USB_EHCI_DOORBELL_ACK,
    TRACE_USB_EHCI_DMA_ERROR,
    TRACE_USB_UHCI_RESET,
    TRACE_USB_UHCI_EXIT,
    TRACE_USB_UHCI_SCHEDULE_START,
    TRACE_USB_UHCI_SCHEDULE_STOP,
    TRACE_USB_UHCI_FRAME_START,
    TRACE_USB_UHCI_FRAME_STOP_BANDWIDTH,
    TRACE_USB_UHCI_FRAME_LOOP_STOP_IDLE,
    TRACE_USB_UHCI_FRAME_LOOP_CONTINUE,
    TRACE_USB_UHCI_MMIO_READW,
    TRACE_USB_UHCI_MMIO_WRITEW,
    TRACE_USB_UHCI_QUEUE_ADD,
    TRACE_USB_UHCI_QUEUE_DEL,
    TRACE_USB_UHCI_PACKET_ADD,
    TRACE_USB_UHCI_PACKET_LINK_ASYNC,
    TRACE_USB_UHCI_PACKET_UNLINK_ASYNC,
    TRACE_USB_UHCI_PACKET_CANCEL,
    TRACE_USB_UHCI_PACKET_COMPLETE_SUCCESS,
    TRACE_USB_UHCI_PACKET_COMPLETE_SHORTXFER,
    TRACE_USB_UHCI_PACKET_COMPLETE_STALL,
    TRACE_USB_UHCI_PACKET_COMPLETE_BABBLE,
    TRACE_USB_UHCI_PACKET_COMPLETE_ERROR,
    TRACE_USB_UHCI_PACKET_DEL,
    TRACE_USB_UHCI_QH_LOAD,
    TRACE_USB_UHCI_TD_LOAD,
    TRACE_USB_UHCI_TD_QUEUE,
    TRACE_USB_UHCI_TD_NEXTQH,
    TRACE_USB_UHCI_TD_ASYNC,
    TRACE_USB_UHCI_TD_COMPLETE,
    TRACE_USB_XHCI_RESET,
    TRACE_USB_XHCI_EXIT,
    TRACE_USB_XHCI_RUN,
    TRACE_USB_XHCI_STOP,
    TRACE_USB_XHCI_CAP_READ,
    TRACE_USB_XHCI_OPER_READ,
    TRACE_USB_XHCI_PORT_READ,
    TRACE_USB_XHCI_RUNTIME_READ,
    TRACE_USB_XHCI_DOORBELL_READ,
    TRACE_USB_XHCI_OPER_WRITE,
    TRACE_USB_XHCI_PORT_WRITE,
    TRACE_USB_XHCI_RUNTIME_WRITE,
    TRACE_USB_XHCI_DOORBELL_WRITE,
    TRACE_USB_XHCI_IRQ_INTX,
    TRACE_USB_XHCI_IRQ_MSI,
    TRACE_USB_XHCI_IRQ_MSIX,
    TRACE_USB_XHCI_IRQ_MSIX_USE,
    TRACE_USB_XHCI_IRQ_MSIX_UNUSE,
    TRACE_USB_XHCI_QUEUE_EVENT,
    TRACE_USB_XHCI_FETCH_TRB,
    TRACE_USB_XHCI_PORT_RESET,
    TRACE_USB_XHCI_PORT_LINK,
    TRACE_USB_XHCI_PORT_NOTIFY,
    TRACE_USB_XHCI_SLOT_ENABLE,
    TRACE_USB_XHCI_SLOT_DISABLE,
    TRACE_USB_XHCI_SLOT_ADDRESS,
    TRACE_USB_XHCI_SLOT_CONFIGURE,
    TRACE_USB_XHCI_SLOT_EVALUATE,
    TRACE_USB_XHCI_SLOT_RESET,
    TRACE_USB_XHCI_EP_ENABLE,
    TRACE_USB_XHCI_EP_DISABLE,
    TRACE_USB_XHCI_EP_SET_DEQUEUE,
    TRACE_USB_XHCI_EP_KICK,
    TRACE_USB_XHCI_EP_STOP,
    TRACE_USB_XHCI_EP_RESET,
    TRACE_USB_XHCI_EP_STATE,
    TRACE_USB_XHCI_XFER_START,
    TRACE_USB_XHCI_XFER_ASYNC,
    TRACE_USB_XHCI_XFER_NAK,
    TRACE_USB_XHCI_XFER_RETRY,
    TRACE_USB_XHCI_XFER_SUCCESS,
    TRACE_USB_XHCI_XFER_ERROR,
    TRACE_USB_XHCI_UNIMPLEMENTED,
    TRACE_USB_DESC_DEVICE,
    TRACE_USB_DESC_DEVICE_QUALIFIER,
    TRACE_USB_DESC_CONFIG,
    TRACE_USB_DESC_OTHER_SPEED_CONFIG,
    TRACE_USB_DESC_STRING,
    TRACE_USB_DESC_BOS,
    TRACE_USB_DESC_MSOS,
    TRACE_USB_SET_ADDR,
    TRACE_USB_SET_CONFIG,
    TRACE_USB_SET_INTERFACE,
    TRACE_USB_CLEAR_DEVICE_FEATURE,
    TRACE_USB_SET_DEVICE_FEATURE,
    TRACE_USB_HUB_RESET,
    TRACE_USB_HUB_CONTROL,
    TRACE_USB_HUB_GET_PORT_STATUS,
    TRACE_USB_HUB_SET_PORT_FEATURE,
    TRACE_USB_HUB_CLEAR_PORT_FEATURE,
    TRACE_USB_HUB_ATTACH,
    TRACE_USB_HUB_DETACH,
    TRACE_USB_HUB_STATUS_REPORT,
    TRACE_USB_UAS_RESET,
    TRACE_USB_UAS_COMMAND,
    TRACE_USB_UAS_RESPONSE,
    TRACE_USB_UAS_SENSE,
    TRACE_USB_UAS_READ_READY,
    TRACE_USB_UAS_WRITE_READY,
    TRACE_USB_UAS_XFER_DATA,
    TRACE_USB_UAS_SCSI_DATA,
    TRACE_USB_UAS_SCSI_COMPLETE,
    TRACE_USB_UAS_TMF_ABORT_TASK,
    TRACE_USB_UAS_TMF_LOGICAL_UNIT_RESET,
    TRACE_USB_UAS_TMF_UNSUPPORTED,
    TRACE_USB_MTP_RESET,
    TRACE_USB_MTP_COMMAND,
    TRACE_USB_MTP_SUCCESS,
    TRACE_USB_MTP_ERROR,
    TRACE_USB_MTP_DATA_IN,
    TRACE_USB_MTP_XFER,
    TRACE_USB_MTP_NAK,
    TRACE_USB_MTP_STALL,
    TRACE_USB_MTP_OP_GET_DEVICE_INFO,
    TRACE_USB_MTP_OP_OPEN_SESSION,
    TRACE_USB_MTP_OP_CLOSE_SESSION,
    TRACE_USB_MTP_OP_GET_STORAGE_IDS,
    TRACE_USB_MTP_OP_GET_STORAGE_INFO,
    TRACE_USB_MTP_OP_GET_NUM_OBJECTS,
    TRACE_USB_MTP_OP_GET_OBJECT_HANDLES,
    TRACE_USB_MTP_OP_GET_OBJECT_INFO,
    TRACE_USB_MTP_OP_GET_OBJECT,
    TRACE_USB_MTP_OP_GET_PARTIAL_OBJECT,
    TRACE_USB_MTP_OP_UNKNOWN,
    TRACE_USB_MTP_OBJECT_ALLOC,
    TRACE_USB_MTP_OBJECT_FREE,
    TRACE_USB_MTP_ADD_CHILD,
    TRACE_USB_MTP_INOTIFY_EVENT,
    TRACE_USB_HOST_OPEN_STARTED,
    TRACE_USB_HOST_OPEN_SUCCESS,
    TRACE_USB_HOST_OPEN_FAILURE,
    TRACE_USB_HOST_CLOSE,
    TRACE_USB_HOST_ATTACH_KERNEL,
    TRACE_USB_HOST_DETACH_KERNEL,
    TRACE_USB_HOST_SET_ADDRESS,
    TRACE_USB_HOST_SET_CONFIG,
    TRACE_USB_HOST_SET_INTERFACE,
    TRACE_USB_HOST_CLAIM_INTERFACE,
    TRACE_USB_HOST_RELEASE_INTERFACE,
    TRACE_USB_HOST_REQ_CONTROL,
    TRACE_USB_HOST_REQ_DATA,
    TRACE_USB_HOST_REQ_COMPLETE,
    TRACE_USB_HOST_REQ_EMULATED,
    TRACE_USB_HOST_REQ_CANCELED,
    TRACE_USB_HOST_ISO_START,
    TRACE_USB_HOST_ISO_STOP,
    TRACE_USB_HOST_ISO_OUT_OF_BUFS,
    TRACE_USB_HOST_RESET,
    TRACE_USB_HOST_AUTO_SCAN_ENABLED,
    TRACE_USB_HOST_AUTO_SCAN_DISABLED,
    TRACE_USB_HOST_PARSE_CONFIG,
    TRACE_USB_HOST_PARSE_INTERFACE,
    TRACE_USB_HOST_PARSE_ENDPOINT,
    TRACE_USB_HOST_PARSE_ERROR,
    TRACE_SCSI_REQ_ALLOC,
    TRACE_SCSI_REQ_CANCEL,
    TRACE_SCSI_REQ_DATA,
    TRACE_SCSI_REQ_DATA_CANCELED,
    TRACE_SCSI_REQ_DEQUEUE,
    TRACE_SCSI_REQ_CONTINUE,
    TRACE_SCSI_REQ_CONTINUE_CANCELED,
    TRACE_SCSI_REQ_PARSED,
    TRACE_SCSI_REQ_PARSED_LBA,
    TRACE_SCSI_REQ_PARSE_BAD,
    TRACE_SCSI_REQ_BUILD_SENSE,
    TRACE_SCSI_DEVICE_SET_UA,
    TRACE_SCSI_REPORT_LUNS,
    TRACE_SCSI_INQUIRY,
    TRACE_SCSI_TEST_UNIT_READY,
    TRACE_SCSI_REQUEST_SENSE,
    TRACE_VM_STATE_NOTIFY,
    TRACE_LOAD_FILE,
    TRACE_RUNSTATE_SET,
    TRACE_SYSTEM_WAKEUP_REQUEST,
    TRACE_QEMU_SYSTEM_SHUTDOWN_REQUEST,
    TRACE_QEMU_SYSTEM_POWERDOWN_REQUEST,
    TRACE_QCOW2_WRITEV_START_REQ,
    TRACE_QCOW2_WRITEV_DONE_REQ,
    TRACE_QCOW2_WRITEV_START_PART,
    TRACE_QCOW2_WRITEV_DONE_PART,
    TRACE_QCOW2_WRITEV_DATA,
    TRACE_QCOW2_ALLOC_CLUSTERS_OFFSET,
    TRACE_QCOW2_HANDLE_COPIED,
    TRACE_QCOW2_HANDLE_ALLOC,
    TRACE_QCOW2_DO_ALLOC_CLUSTERS_OFFSET,
    TRACE_QCOW2_CLUSTER_ALLOC_PHYS,
    TRACE_QCOW2_CLUSTER_LINK_L2,
    TRACE_QCOW2_L2_ALLOCATE,
    TRACE_QCOW2_L2_ALLOCATE_GET_EMPTY,
    TRACE_QCOW2_L2_ALLOCATE_WRITE_L2,
    TRACE_QCOW2_L2_ALLOCATE_WRITE_L1,
    TRACE_QCOW2_L2_ALLOCATE_DONE,
    TRACE_QCOW2_CACHE_GET,
    TRACE_QCOW2_CACHE_GET_REPLACE_ENTRY,
    TRACE_QCOW2_CACHE_GET_READ,
    TRACE_QCOW2_CACHE_GET_DONE,
    TRACE_QCOW2_CACHE_FLUSH,
    TRACE_QCOW2_CACHE_ENTRY_FLUSH,
    TRACE_QED_ALLOC_L2_CACHE_ENTRY,
    TRACE_QED_UNREF_L2_CACHE_ENTRY,
    TRACE_QED_FIND_L2_CACHE_ENTRY,
    TRACE_QED_READ_TABLE,
    TRACE_QED_READ_TABLE_CB,
    TRACE_QED_WRITE_TABLE,
    TRACE_QED_WRITE_TABLE_CB,
    TRACE_QED_NEED_CHECK_TIMER_CB,
    TRACE_QED_START_NEED_CHECK_TIMER,
    TRACE_QED_CANCEL_NEED_CHECK_TIMER,
    TRACE_QED_AIO_COMPLETE,
    TRACE_QED_AIO_SETUP,
    TRACE_QED_AIO_NEXT_IO,
    TRACE_QED_AIO_READ_DATA,
    TRACE_QED_AIO_WRITE_DATA,
    TRACE_QED_AIO_WRITE_PREFILL,
    TRACE_QED_AIO_WRITE_POSTFILL,
    TRACE_QED_AIO_WRITE_MAIN,
    TRACE_G364FB_READ,
    TRACE_G364FB_WRITE,
    TRACE_GRLIB_GPTIMER_ENABLE,
    TRACE_GRLIB_GPTIMER_DISABLED,
    TRACE_GRLIB_GPTIMER_RESTART,
    TRACE_GRLIB_GPTIMER_SET_SCALER,
    TRACE_GRLIB_GPTIMER_HIT,
    TRACE_GRLIB_GPTIMER_READL,
    TRACE_GRLIB_GPTIMER_WRITEL,
    TRACE_GRLIB_IRQMP_CHECK_IRQS,
    TRACE_GRLIB_IRQMP_ACK,
    TRACE_GRLIB_IRQMP_SET_IRQ,
    TRACE_GRLIB_IRQMP_READL_UNKNOWN,
    TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN,
    TRACE_GRLIB_APBUART_EVENT,
    TRACE_GRLIB_APBUART_WRITEL_UNKNOWN,
    TRACE_GRLIB_APBUART_READL_UNKNOWN,
    TRACE_LEON3_SET_IRQ,
    TRACE_LEON3_RESET_IRQ,
    TRACE_SPICE_VMC_WRITE,
    TRACE_SPICE_VMC_READ,
    TRACE_SPICE_VMC_REGISTER_INTERFACE,
    TRACE_SPICE_VMC_UNREGISTER_INTERFACE,
    TRACE_SPICE_VMC_EVENT,
    TRACE_LM32_PIC_RAISE_IRQ,
    TRACE_LM32_PIC_LOWER_IRQ,
    TRACE_LM32_PIC_INTERRUPT,
    TRACE_LM32_PIC_SET_IM,
    TRACE_LM32_PIC_SET_IP,
    TRACE_LM32_PIC_GET_IM,
    TRACE_LM32_PIC_GET_IP,
    TRACE_LM32_JUART_GET_JTX,
    TRACE_LM32_JUART_SET_JTX,
    TRACE_LM32_JUART_GET_JRX,
    TRACE_LM32_JUART_SET_JRX,
    TRACE_LM32_TIMER_MEMORY_WRITE,
    TRACE_LM32_TIMER_MEMORY_READ,
    TRACE_LM32_TIMER_HIT,
    TRACE_LM32_TIMER_IRQ_STATE,
    TRACE_LM32_UART_MEMORY_WRITE,
    TRACE_LM32_UART_MEMORY_READ,
    TRACE_LM32_UART_IRQ_STATE,
    TRACE_MPTSAS_COMMAND_COMPLETE,
    TRACE_MPTSAS_DIAG_READ,
    TRACE_MPTSAS_DIAG_WRITE,
    TRACE_MPTSAS_IRQ_INTX,
    TRACE_MPTSAS_IRQ_MSI,
    TRACE_MPTSAS_MMIO_READ,
    TRACE_MPTSAS_MMIO_UNHANDLED_READ,
    TRACE_MPTSAS_MMIO_UNHANDLED_WRITE,
    TRACE_MPTSAS_MMIO_WRITE,
    TRACE_MPTSAS_PROCESS_MESSAGE,
    TRACE_MPTSAS_PROCESS_SCSI_IO_REQUEST,
    TRACE_MPTSAS_RESET,
    TRACE_MPTSAS_SCSI_OVERFLOW,
    TRACE_MPTSAS_SGL_OVERFLOW,
    TRACE_MPTSAS_UNHANDLED_CMD,
    TRACE_MPTSAS_UNHANDLED_DOORBELL_CMD,
    TRACE_MPTSAS_CONFIG_SAS_DEVICE,
    TRACE_MPTSAS_CONFIG_SAS_PHY,
    TRACE_MEGASAS_INIT_FIRMWARE,
    TRACE_MEGASAS_INIT_QUEUE,
    TRACE_MEGASAS_INITQ_MAP_FAILED,
    TRACE_MEGASAS_INITQ_MAPPED,
    TRACE_MEGASAS_INITQ_MISMATCH,
    TRACE_MEGASAS_QF_MAPPED,
    TRACE_MEGASAS_QF_NEW,
    TRACE_MEGASAS_QF_BUSY,
    TRACE_MEGASAS_QF_ENQUEUE,
    TRACE_MEGASAS_QF_UPDATE,
    TRACE_MEGASAS_QF_MAP_FAILED,
    TRACE_MEGASAS_QF_COMPLETE_NOIRQ,
    TRACE_MEGASAS_QF_COMPLETE,
    TRACE_MEGASAS_FRAME_BUSY,
    TRACE_MEGASAS_UNHANDLED_FRAME_CMD,
    TRACE_MEGASAS_HANDLE_SCSI,
    TRACE_MEGASAS_SCSI_TARGET_NOT_PRESENT,
    TRACE_MEGASAS_SCSI_INVALID_CDB_LEN,
    TRACE_MEGASAS_IOV_READ_OVERFLOW,
    TRACE_MEGASAS_IOV_WRITE_OVERFLOW,
    TRACE_MEGASAS_IOV_READ_UNDERFLOW,
    TRACE_MEGASAS_IOV_WRITE_UNDERFLOW,
    TRACE_MEGASAS_SCSI_REQ_ALLOC_FAILED,
    TRACE_MEGASAS_SCSI_READ_START,
    TRACE_MEGASAS_SCSI_WRITE_START,
    TRACE_MEGASAS_SCSI_NODATA,
    TRACE_MEGASAS_SCSI_COMPLETE,
    TRACE_MEGASAS_COMMAND_COMPLETE,
    TRACE_MEGASAS_HANDLE_IO,
    TRACE_MEGASAS_IO_TARGET_NOT_PRESENT,
    TRACE_MEGASAS_IO_READ_START,
    TRACE_MEGASAS_IO_WRITE_START,
    TRACE_MEGASAS_IO_COMPLETE,
    TRACE_MEGASAS_IOVEC_SGL_OVERFLOW,
    TRACE_MEGASAS_IOVEC_SGL_UNDERFLOW,
    TRACE_MEGASAS_IOVEC_SGL_INVALID,
    TRACE_MEGASAS_IOVEC_OVERFLOW,
    TRACE_MEGASAS_IOVEC_UNDERFLOW,
    TRACE_MEGASAS_HANDLE_DCMD,
    TRACE_MEGASAS_FINISH_DCMD,
    TRACE_MEGASAS_DCMD_REQ_ALLOC_FAILED,
    TRACE_MEGASAS_DCMD_INTERNAL_SUBMIT,
    TRACE_MEGASAS_DCMD_INTERNAL_FINISH,
    TRACE_MEGASAS_DCMD_INTERNAL_INVALID,
    TRACE_MEGASAS_DCMD_UNHANDLED,
    TRACE_MEGASAS_DCMD_ZERO_SGE,
    TRACE_MEGASAS_DCMD_INVALID_SGE,
    TRACE_MEGASAS_DCMD_INVALID_XFER_LEN,
    TRACE_MEGASAS_DCMD_ENTER,
    TRACE_MEGASAS_DCMD_DUMMY,
    TRACE_MEGASAS_DCMD_SET_FW_TIME,
    TRACE_MEGASAS_DCMD_PD_GET_LIST,
    TRACE_MEGASAS_DCMD_LD_GET_LIST,
    TRACE_MEGASAS_DCMD_LD_GET_INFO,
    TRACE_MEGASAS_DCMD_LD_LIST_QUERY,
    TRACE_MEGASAS_DCMD_PD_GET_INFO,
    TRACE_MEGASAS_DCMD_PD_LIST_QUERY,
    TRACE_MEGASAS_DCMD_RESET_LD,
    TRACE_MEGASAS_DCMD_UNSUPPORTED,
    TRACE_MEGASAS_ABORT_FRAME,
    TRACE_MEGASAS_ABORT_NO_CMD,
    TRACE_MEGASAS_ABORT_INVALID_CONTEXT,
    TRACE_MEGASAS_RESET,
    TRACE_MEGASAS_INIT,
    TRACE_MEGASAS_MSIX_RAISE,
    TRACE_MEGASAS_MSI_RAISE,
    TRACE_MEGASAS_IRQ_LOWER,
    TRACE_MEGASAS_IRQ_RAISE,
    TRACE_MEGASAS_INTR_ENABLED,
    TRACE_MEGASAS_INTR_DISABLED,
    TRACE_MEGASAS_MSIX_ENABLED,
    TRACE_MEGASAS_MSI_ENABLED,
    TRACE_MEGASAS_MMIO_READL,
    TRACE_MEGASAS_MMIO_INVALID_READL,
    TRACE_MEGASAS_MMIO_WRITEL,
    TRACE_MEGASAS_MMIO_INVALID_WRITEL,
    TRACE_MILKYMIST_AC97_MEMORY_READ,
    TRACE_MILKYMIST_AC97_MEMORY_WRITE,
    TRACE_MILKYMIST_AC97_PULSE_IRQ_CRREQUEST,
    TRACE_MILKYMIST_AC97_PULSE_IRQ_CRREPLY,
    TRACE_MILKYMIST_AC97_PULSE_IRQ_DMAW,
    TRACE_MILKYMIST_AC97_PULSE_IRQ_DMAR,
    TRACE_MILKYMIST_AC97_IN_CB,
    TRACE_MILKYMIST_AC97_IN_CB_TRANSFERRED,
    TRACE_MILKYMIST_AC97_OUT_CB,
    TRACE_MILKYMIST_AC97_OUT_CB_TRANSFERRED,
    TRACE_MILKYMIST_HPDMC_MEMORY_READ,
    TRACE_MILKYMIST_HPDMC_MEMORY_WRITE,
    TRACE_MILKYMIST_MEMCARD_MEMORY_READ,
    TRACE_MILKYMIST_MEMCARD_MEMORY_WRITE,
    TRACE_MILKYMIST_MINIMAC2_MEMORY_READ,
    TRACE_MILKYMIST_MINIMAC2_MEMORY_WRITE,
    TRACE_MILKYMIST_MINIMAC2_MDIO_WRITE,
    TRACE_MILKYMIST_MINIMAC2_MDIO_READ,
    TRACE_MILKYMIST_MINIMAC2_TX_FRAME,
    TRACE_MILKYMIST_MINIMAC2_RX_FRAME,
    TRACE_MILKYMIST_MINIMAC2_RX_TRANSFER,
    TRACE_MILKYMIST_MINIMAC2_RAISE_IRQ_RX,
    TRACE_MILKYMIST_MINIMAC2_LOWER_IRQ_RX,
    TRACE_MILKYMIST_MINIMAC2_PULSE_IRQ_TX,
    TRACE_MILKYMIST_PFPU_MEMORY_READ,
    TRACE_MILKYMIST_PFPU_MEMORY_WRITE,
    TRACE_MILKYMIST_PFPU_VECTOUT,
    TRACE_MILKYMIST_PFPU_PULSE_IRQ,
    TRACE_MILKYMIST_SOFTUSB_MEMORY_READ,
    TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE,
    TRACE_MILKYMIST_SOFTUSB_MEVT,
    TRACE_MILKYMIST_SOFTUSB_KEVT,
    TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ,
    TRACE_MILKYMIST_SYSCTL_MEMORY_READ,
    TRACE_MILKYMIST_SYSCTL_MEMORY_WRITE,
    TRACE_MILKYMIST_SYSCTL_ICAP_WRITE,
    TRACE_MILKYMIST_SYSCTL_START_TIMER0,
    TRACE_MILKYMIST_SYSCTL_STOP_TIMER0,
    TRACE_MILKYMIST_SYSCTL_START_TIMER1,
    TRACE_MILKYMIST_SYSCTL_STOP_TIMER1,
    TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER0,
    TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1,
    TRACE_MILKYMIST_TMU2_MEMORY_READ,
    TRACE_MILKYMIST_TMU2_MEMORY_WRITE,
    TRACE_MILKYMIST_TMU2_START,
    TRACE_MILKYMIST_TMU2_PULSE_IRQ,
    TRACE_MILKYMIST_UART_MEMORY_READ,
    TRACE_MILKYMIST_UART_MEMORY_WRITE,
    TRACE_MILKYMIST_UART_RAISE_IRQ,
    TRACE_MILKYMIST_UART_LOWER_IRQ,
    TRACE_MILKYMIST_VGAFB_MEMORY_READ,
    TRACE_MILKYMIST_VGAFB_MEMORY_WRITE,
    TRACE_MIPSNET_SEND,
    TRACE_MIPSNET_RECEIVE,
    TRACE_MIPSNET_READ,
    TRACE_MIPSNET_WRITE,
    TRACE_MIPSNET_IRQ,
    TRACE_PC87312_IO_READ,
    TRACE_PC87312_IO_WRITE,
    TRACE_PC87312_INFO_FLOPPY,
    TRACE_PC87312_INFO_IDE,
    TRACE_PC87312_INFO_PARALLEL,
    TRACE_PC87312_INFO_SERIAL,
    TRACE_PVSCSI_RING_INIT_DATA,
    TRACE_PVSCSI_RING_INIT_MSG,
    TRACE_PVSCSI_RING_FLUSH_CMP,
    TRACE_PVSCSI_RING_FLUSH_MSG,
    TRACE_PVSCSI_UPDATE_IRQ_LEVEL,
    TRACE_PVSCSI_UPDATE_IRQ_MSI,
    TRACE_PVSCSI_CMP_RING_PUT,
    TRACE_PVSCSI_MSG_RING_PUT,
    TRACE_PVSCSI_COMPLETE_REQUEST,
    TRACE_PVSCSI_GET_SG_LIST,
    TRACE_PVSCSI_GET_NEXT_SG_ELEM,
    TRACE_PVSCSI_COMMAND_COMPLETE_NOT_FOUND,
    TRACE_PVSCSI_COMMAND_COMPLETE_DATA_RUN,
    TRACE_PVSCSI_COMMAND_COMPLETE_SENSE_LEN,
    TRACE_PVSCSI_CONVERT_SGLIST,
    TRACE_PVSCSI_PROCESS_REQ_DESCR,
    TRACE_PVSCSI_PROCESS_REQ_DESCR_UNKNOWN_DEVICE,
    TRACE_PVSCSI_PROCESS_REQ_DESCR_INVALID_DIR,
    TRACE_PVSCSI_PROCESS_IO,
    TRACE_PVSCSI_ON_CMD_NOIMPL,
    TRACE_PVSCSI_ON_CMD_RESET_DEV,
    TRACE_PVSCSI_ON_CMD_ARRIVED,
    TRACE_PVSCSI_ON_CMD_ABORT,
    TRACE_PVSCSI_ON_CMD_UNKNOWN,
    TRACE_PVSCSI_ON_CMD_UNKNOWN_DATA,
    TRACE_PVSCSI_IO_WRITE,
    TRACE_PVSCSI_IO_WRITE_UNKNOWN,
    TRACE_PVSCSI_IO_READ,
    TRACE_PVSCSI_IO_READ_UNKNOWN,
    TRACE_PVSCSI_INIT_MSI_FAIL,
    TRACE_PVSCSI_STATE,
    TRACE_PVSCSI_TX_RINGS_PPN,
    TRACE_PVSCSI_TX_RINGS_NUM_PAGES,
    TRACE_XEN_RAM_ALLOC,
    TRACE_XEN_CLIENT_SET_MEMORY,
    TRACE_XEN_IOREQ_SERVER_CREATE,
    TRACE_XEN_IOREQ_SERVER_DESTROY,
    TRACE_XEN_IOREQ_SERVER_STATE,
    TRACE_XEN_MAP_MMIO_RANGE,
    TRACE_XEN_UNMAP_MMIO_RANGE,
    TRACE_XEN_MAP_PORTIO_RANGE,
    TRACE_XEN_UNMAP_PORTIO_RANGE,
    TRACE_XEN_MAP_PCIDEV,
    TRACE_XEN_UNMAP_PCIDEV,
    TRACE_HANDLE_IOREQ,
    TRACE_HANDLE_IOREQ_READ,
    TRACE_HANDLE_IOREQ_WRITE,
    TRACE_CPU_IOREQ_PIO,
    TRACE_CPU_IOREQ_PIO_READ_REG,
    TRACE_CPU_IOREQ_PIO_WRITE_REG,
    TRACE_CPU_IOREQ_MOVE,
    TRACE_XEN_MAP_CACHE,
    TRACE_XEN_REMAP_BUCKET,
    TRACE_XEN_MAP_CACHE_RETURN,
    TRACE_XEN_PLATFORM_LOG,
    TRACE_QEMU_COROUTINE_ENTER,
    TRACE_QEMU_COROUTINE_YIELD,
    TRACE_QEMU_COROUTINE_TERMINATE,
    TRACE_QEMU_CO_QUEUE_RUN_RESTART,
    TRACE_QEMU_CO_QUEUE_NEXT,
    TRACE_QEMU_CO_MUTEX_LOCK_ENTRY,
    TRACE_QEMU_CO_MUTEX_LOCK_RETURN,
    TRACE_QEMU_CO_MUTEX_UNLOCK_ENTRY,
    TRACE_QEMU_CO_MUTEX_UNLOCK_RETURN,
    TRACE_ESCC_PUT_QUEUE,
    TRACE_ESCC_GET_QUEUE,
    TRACE_ESCC_UPDATE_IRQ,
    TRACE_ESCC_UPDATE_PARAMETERS,
    TRACE_ESCC_MEM_WRITEB_CTRL,
    TRACE_ESCC_MEM_WRITEB_DATA,
    TRACE_ESCC_MEM_READB_CTRL,
    TRACE_ESCC_MEM_READB_DATA,
    TRACE_ESCC_SERIAL_RECEIVE_BYTE,
    TRACE_ESCC_SUNKBD_EVENT_IN,
    TRACE_ESCC_SUNKBD_EVENT_OUT,
    TRACE_ESCC_KBD_COMMAND,
    TRACE_ESCC_SUNMOUSE_EVENT,
    TRACE_ESP_ERROR_FIFO_OVERRUN,
    TRACE_ESP_ERROR_UNHANDLED_COMMAND,
    TRACE_ESP_ERROR_INVALID_WRITE,
    TRACE_ESP_RAISE_IRQ,
    TRACE_ESP_LOWER_IRQ,
    TRACE_ESP_DMA_ENABLE,
    TRACE_ESP_DMA_DISABLE,
    TRACE_ESP_GET_CMD,
    TRACE_ESP_DO_BUSID_CMD,
    TRACE_ESP_HANDLE_SATN_STOP,
    TRACE_ESP_WRITE_RESPONSE,
    TRACE_ESP_DO_DMA,
    TRACE_ESP_COMMAND_COMPLETE,
    TRACE_ESP_COMMAND_COMPLETE_UNEXPECTED,
    TRACE_ESP_COMMAND_COMPLETE_FAIL,
    TRACE_ESP_TRANSFER_DATA,
    TRACE_ESP_HANDLE_TI,
    TRACE_ESP_HANDLE_TI_CMD,
    TRACE_ESP_MEM_READB,
    TRACE_ESP_MEM_WRITEB,
    TRACE_ESP_MEM_WRITEB_CMD_NOP,
    TRACE_ESP_MEM_WRITEB_CMD_FLUSH,
    TRACE_ESP_MEM_WRITEB_CMD_RESET,
    TRACE_ESP_MEM_WRITEB_CMD_BUS_RESET,
    TRACE_ESP_MEM_WRITEB_CMD_ICCS,
    TRACE_ESP_MEM_WRITEB_CMD_MSGACC,
    TRACE_ESP_MEM_WRITEB_CMD_PAD,
    TRACE_ESP_MEM_WRITEB_CMD_SATN,
    TRACE_ESP_MEM_WRITEB_CMD_RSTATN,
    TRACE_ESP_MEM_WRITEB_CMD_SEL,
    TRACE_ESP_MEM_WRITEB_CMD_SELATN,
    TRACE_ESP_MEM_WRITEB_CMD_SELATNS,
    TRACE_ESP_MEM_WRITEB_CMD_ENSEL,
    TRACE_ESP_MEM_WRITEB_CMD_DISSEL,
    TRACE_ESP_PCI_ERROR_INVALID_DMA_DIRECTION,
    TRACE_ESP_PCI_ERROR_INVALID_READ,
    TRACE_ESP_PCI_ERROR_INVALID_WRITE,
    TRACE_ESP_PCI_ERROR_INVALID_WRITE_DMA,
    TRACE_ESP_PCI_DMA_READ,
    TRACE_ESP_PCI_DMA_WRITE,
    TRACE_ESP_PCI_DMA_IDLE,
    TRACE_ESP_PCI_DMA_BLAST,
    TRACE_ESP_PCI_DMA_ABORT,
    TRACE_ESP_PCI_DMA_START,
    TRACE_ESP_PCI_SBAC_READ,
    TRACE_ESP_PCI_SBAC_WRITE,
    TRACE_HANDLE_QMP_COMMAND,
    TRACE_MONITOR_PROTOCOL_EMITTER,
    TRACE_MONITOR_PROTOCOL_EVENT_HANDLER,
    TRACE_MONITOR_PROTOCOL_EVENT_EMIT,
    TRACE_MONITOR_PROTOCOL_EVENT_QUEUE,
    TRACE_MONITOR_PROTOCOL_EVENT_THROTTLE,
    TRACE_OPEN_ETH_MII_WRITE,
    TRACE_OPEN_ETH_MII_READ,
    TRACE_OPEN_ETH_UPDATE_IRQ,
    TRACE_OPEN_ETH_RECEIVE,
    TRACE_OPEN_ETH_RECEIVE_MCAST,
    TRACE_OPEN_ETH_RECEIVE_REJECT,
    TRACE_OPEN_ETH_RECEIVE_DESC,
    TRACE_OPEN_ETH_START_XMIT,
    TRACE_OPEN_ETH_REG_READ,
    TRACE_OPEN_ETH_REG_WRITE,
    TRACE_OPEN_ETH_DESC_READ,
    TRACE_OPEN_ETH_DESC_WRITE,
    TRACE_V9FS_RERROR,
    TRACE_V9FS_VERSION,
    TRACE_V9FS_VERSION_RETURN,
    TRACE_V9FS_ATTACH,
    TRACE_V9FS_ATTACH_RETURN,
    TRACE_V9FS_STAT,
    TRACE_V9FS_STAT_RETURN,
    TRACE_V9FS_GETATTR,
    TRACE_V9FS_GETATTR_RETURN,
    TRACE_V9FS_WALK,
    TRACE_V9FS_WALK_RETURN,
    TRACE_V9FS_OPEN,
    TRACE_V9FS_OPEN_RETURN,
    TRACE_V9FS_LCREATE,
    TRACE_V9FS_LCREATE_RETURN,
    TRACE_V9FS_FSYNC,
    TRACE_V9FS_CLUNK,
    TRACE_V9FS_READ,
    TRACE_V9FS_READ_RETURN,
    TRACE_V9FS_READDIR,
    TRACE_V9FS_READDIR_RETURN,
    TRACE_V9FS_WRITE,
    TRACE_V9FS_WRITE_RETURN,
    TRACE_V9FS_CREATE,
    TRACE_V9FS_CREATE_RETURN,
    TRACE_V9FS_SYMLINK,
    TRACE_V9FS_SYMLINK_RETURN,
    TRACE_V9FS_FLUSH,
    TRACE_V9FS_LINK,
    TRACE_V9FS_REMOVE,
    TRACE_V9FS_WSTAT,
    TRACE_V9FS_MKNOD,
    TRACE_V9FS_MKNOD_RETURN,
    TRACE_V9FS_LOCK,
    TRACE_V9FS_LOCK_RETURN,
    TRACE_V9FS_GETLOCK,
    TRACE_V9FS_GETLOCK_RETURN,
    TRACE_V9FS_MKDIR,
    TRACE_V9FS_MKDIR_RETURN,
    TRACE_V9FS_XATTRWALK,
    TRACE_V9FS_XATTRWALK_RETURN,
    TRACE_V9FS_XATTRCREATE,
    TRACE_V9FS_READLINK,
    TRACE_V9FS_READLINK_RETURN,
    TRACE_MMU_HELPER_DFAULT,
    TRACE_MMU_HELPER_DPROT,
    TRACE_MMU_HELPER_DMISS,
    TRACE_MMU_HELPER_TFAULT,
    TRACE_MMU_HELPER_TMISS,
    TRACE_MMU_HELPER_GET_PHYS_ADDR_CODE,
    TRACE_MMU_HELPER_GET_PHYS_ADDR_DATA,
    TRACE_MMU_HELPER_MMU_FAULT,
    TRACE_INT_HELPER_SET_SOFTINT,
    TRACE_INT_HELPER_CLEAR_SOFTINT,
    TRACE_INT_HELPER_WRITE_SOFTINT,
    TRACE_INT_HELPER_ICACHE_FREEZE,
    TRACE_INT_HELPER_DCACHE_FREEZE,
    TRACE_WIN_HELPER_GREGSET_ERROR,
    TRACE_WIN_HELPER_SWITCH_PSTATE,
    TRACE_WIN_HELPER_NO_SWITCH_PSTATE,
    TRACE_WIN_HELPER_WRPIL,
    TRACE_WIN_HELPER_DONE,
    TRACE_WIN_HELPER_RETRY,
    TRACE_DMA_BLK_IO,
    TRACE_DMA_AIO_CANCEL,
    TRACE_DMA_COMPLETE,
    TRACE_DMA_BLK_CB,
    TRACE_DMA_MAP_WAIT,
    TRACE_CONSOLE_GFX_NEW,
    TRACE_CONSOLE_PUTCHAR_CSI,
    TRACE_CONSOLE_PUTCHAR_UNHANDLED,
    TRACE_CONSOLE_TXT_NEW,
    TRACE_CONSOLE_SELECT,
    TRACE_CONSOLE_REFRESH,
    TRACE_DISPLAYSURFACE_CREATE,
    TRACE_DISPLAYSURFACE_CREATE_FROM,
    TRACE_DISPLAYSURFACE_CREATE_PIXMAN,
    TRACE_DISPLAYSURFACE_FREE,
    TRACE_DISPLAYCHANGELISTENER_REGISTER,
    TRACE_DISPLAYCHANGELISTENER_UNREGISTER,
    TRACE_PPM_SAVE,
    TRACE_GD_SWITCH,
    TRACE_GD_UPDATE,
    TRACE_GD_KEY_EVENT,
    TRACE_GD_GRAB,
    TRACE_GD_UNGRAB,
    TRACE_VNC_KEY_GUEST_LEDS,
    TRACE_VNC_KEY_MAP_INIT,
    TRACE_VNC_KEY_EVENT_EXT,
    TRACE_VNC_KEY_EVENT_MAP,
    TRACE_VNC_KEY_SYNC_NUMLOCK,
    TRACE_VNC_KEY_SYNC_CAPSLOCK,
    TRACE_INPUT_EVENT_KEY_NUMBER,
    TRACE_INPUT_EVENT_KEY_QCODE,
    TRACE_INPUT_EVENT_BTN,
    TRACE_INPUT_EVENT_REL,
    TRACE_INPUT_EVENT_ABS,
    TRACE_INPUT_EVENT_SYNC,
    TRACE_INPUT_MOUSE_MODE,
    TRACE_VMWARE_VALUE_READ,
    TRACE_VMWARE_VALUE_WRITE,
    TRACE_VMWARE_PALETTE_READ,
    TRACE_VMWARE_PALETTE_WRITE,
    TRACE_VMWARE_SCRATCH_READ,
    TRACE_VMWARE_SCRATCH_WRITE,
    TRACE_VMWARE_SETMODE,
    TRACE_VIRTIO_GPU_FEATURES,
    TRACE_VIRTIO_GPU_CMD_GET_DISPLAY_INFO,
    TRACE_VIRTIO_GPU_CMD_GET_CAPS,
    TRACE_VIRTIO_GPU_CMD_SET_SCANOUT,
    TRACE_VIRTIO_GPU_CMD_RES_CREATE_2D,
    TRACE_VIRTIO_GPU_CMD_RES_CREATE_3D,
    TRACE_VIRTIO_GPU_CMD_RES_UNREF,
    TRACE_VIRTIO_GPU_CMD_RES_BACK_ATTACH,
    TRACE_VIRTIO_GPU_CMD_RES_BACK_DETACH,
    TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_2D,
    TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_3D,
    TRACE_VIRTIO_GPU_CMD_RES_XFER_FROMH_3D,
    TRACE_VIRTIO_GPU_CMD_RES_FLUSH,
    TRACE_VIRTIO_GPU_CMD_CTX_CREATE,
    TRACE_VIRTIO_GPU_CMD_CTX_DESTROY,
    TRACE_VIRTIO_GPU_CMD_CTX_RES_ATTACH,
    TRACE_VIRTIO_GPU_CMD_CTX_RES_DETACH,
    TRACE_VIRTIO_GPU_CMD_CTX_SUBMIT,
    TRACE_VIRTIO_GPU_UPDATE_CURSOR,
    TRACE_VIRTIO_GPU_FENCE_CTRL,
    TRACE_VIRTIO_GPU_FENCE_RESP,
    TRACE_QEMU_LOADVM_STATE_SECTION,
    TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND,
    TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND,
    TRACE_QEMU_LOADVM_STATE_MAIN,
    TRACE_QEMU_LOADVM_STATE_MAIN_QUIT_PARENT,
    TRACE_QEMU_LOADVM_STATE_POST_MAIN,
    TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL,
    TRACE_QEMU_SAVEVM_SEND_PACKAGED,
    TRACE_LOADVM_HANDLE_CMD_PACKAGED,
    TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN,
    TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED,
    TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE,
    TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN,
    TRACE_LOADVM_POSTCOPY_HANDLE_RUN,
    TRACE_LOADVM_POSTCOPY_HANDLE_RUN_CPU_SYNC,
    TRACE_LOADVM_POSTCOPY_HANDLE_RUN_VMSTART,
    TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD,
    TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END,
    TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER,
    TRACE_LOADVM_PROCESS_COMMAND,
    TRACE_LOADVM_PROCESS_COMMAND_PING,
    TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT,
    TRACE_POSTCOPY_RAM_LISTEN_THREAD_START,
    TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE,
    TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD,
    TRACE_SAVEVM_COMMAND_SEND,
    TRACE_SAVEVM_SECTION_START,
    TRACE_SAVEVM_SECTION_END,
    TRACE_SAVEVM_SECTION_SKIP,
    TRACE_SAVEVM_SEND_OPEN_RETURN_PATH,
    TRACE_SAVEVM_SEND_PING,
    TRACE_SAVEVM_SEND_POSTCOPY_LISTEN,
    TRACE_SAVEVM_SEND_POSTCOPY_RUN,
    TRACE_SAVEVM_STATE_BEGIN,
    TRACE_SAVEVM_STATE_HEADER,
    TRACE_SAVEVM_STATE_ITERATE,
    TRACE_SAVEVM_STATE_CLEANUP,
    TRACE_SAVEVM_STATE_COMPLETE_PRECOPY,
    TRACE_VMSTATE_SAVE,
    TRACE_VMSTATE_LOAD,
    TRACE_QEMU_ANNOUNCE_SELF_ITER,
    TRACE_VMSTATE_LOAD_FIELD_ERROR,
    TRACE_VMSTATE_LOAD_STATE,
    TRACE_VMSTATE_LOAD_STATE_END,
    TRACE_VMSTATE_LOAD_STATE_FIELD,
    TRACE_VMSTATE_SUBSECTION_LOAD,
    TRACE_VMSTATE_SUBSECTION_LOAD_BAD,
    TRACE_VMSTATE_SUBSECTION_LOAD_GOOD,
    TRACE_QEMU_FILE_FCLOSE,
    TRACE_GET_QUEUED_PAGE,
    TRACE_GET_QUEUED_PAGE_NOT_DIRTY,
    TRACE_MIGRATION_BITMAP_SYNC_START,
    TRACE_MIGRATION_BITMAP_SYNC_END,
    TRACE_MIGRATION_THROTTLE,
    TRACE_RAM_LOAD_POSTCOPY_LOOP,
    TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP,
    TRACE_RAM_SAVE_QUEUE_PAGES,
    TRACE_QXL_INTERFACE_SET_MM_TIME,
    TRACE_QXL_IO_WRITE_VGA,
    TRACE_QXL_CREATE_GUEST_PRIMARY,
    TRACE_QXL_CREATE_GUEST_PRIMARY_REST,
    TRACE_QXL_DESTROY_PRIMARY,
    TRACE_QXL_ENTER_VGA_MODE,
    TRACE_QXL_EXIT_VGA_MODE,
    TRACE_QXL_HARD_RESET,
    TRACE_QXL_INTERFACE_ASYNC_COMPLETE_IO,
    TRACE_QXL_INTERFACE_ATTACH_WORKER,
    TRACE_QXL_INTERFACE_GET_INIT_INFO,
    TRACE_QXL_INTERFACE_SET_COMPRESSION_LEVEL,
    TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE,
    TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_REST,
    TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_OVERFLOW,
    TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_SCHEDULE_BH,
    TRACE_QXL_IO_DESTROY_PRIMARY_IGNORED,
    TRACE_QXL_IO_LOG,
    TRACE_QXL_IO_READ_UNEXPECTED,
    TRACE_QXL_IO_UNEXPECTED_VGA_MODE,
    TRACE_QXL_IO_WRITE,
    TRACE_QXL_MEMSLOT_ADD_GUEST,
    TRACE_QXL_POST_LOAD,
    TRACE_QXL_PRE_LOAD,
    TRACE_QXL_PRE_SAVE,
    TRACE_QXL_RESET_SURFACES,
    TRACE_QXL_RING_COMMAND_CHECK,
    TRACE_QXL_RING_COMMAND_GET,
    TRACE_QXL_RING_COMMAND_REQ_NOTIFICATION,
    TRACE_QXL_RING_CURSOR_CHECK,
    TRACE_QXL_RING_CURSOR_GET,
    TRACE_QXL_RING_CURSOR_REQ_NOTIFICATION,
    TRACE_QXL_RING_RES_PUSH,
    TRACE_QXL_RING_RES_PUSH_REST,
    TRACE_QXL_RING_RES_PUT,
    TRACE_QXL_SET_MODE,
    TRACE_QXL_SOFT_RESET,
    TRACE_QXL_SPICE_DESTROY_SURFACES_COMPLETE,
    TRACE_QXL_SPICE_DESTROY_SURFACES,
    TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_COMPLETE,
    TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT,
    TRACE_QXL_SPICE_FLUSH_SURFACES_ASYNC,
    TRACE_QXL_SPICE_MONITORS_CONFIG,
    TRACE_QXL_SPICE_LOADVM_COMMANDS,
    TRACE_QXL_SPICE_OOM,
    TRACE_QXL_SPICE_RESET_CURSOR,
    TRACE_QXL_SPICE_RESET_IMAGE_CACHE,
    TRACE_QXL_SPICE_RESET_MEMSLOTS,
    TRACE_QXL_SPICE_UPDATE_AREA,
    TRACE_QXL_SPICE_UPDATE_AREA_REST,
    TRACE_QXL_SURFACES_DIRTY,
    TRACE_QXL_SEND_EVENTS,
    TRACE_QXL_SEND_EVENTS_VM_STOPPED,
    TRACE_QXL_SET_GUEST_BUG,
    TRACE_QXL_INTERRUPT_CLIENT_MONITORS_CONFIG,
    TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_GUEST,
    TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_DEVICE,
    TRACE_QXL_CLIENT_MONITORS_CONFIG_CAPPED,
    TRACE_QXL_CLIENT_MONITORS_CONFIG_CRC,
    TRACE_QXL_SET_CLIENT_CAPABILITIES_UNSUPPORTED_BY_REVISION,
    TRACE_QEMU_SPICE_ADD_MEMSLOT,
    TRACE_QEMU_SPICE_DEL_MEMSLOT,
    TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE,
    TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE,
    TRACE_QEMU_SPICE_WAKEUP,
    TRACE_QEMU_SPICE_CREATE_UPDATE,
    TRACE_QXL_RENDER_BLIT,
    TRACE_QXL_RENDER_GUEST_PRIMARY_RESIZED,
    TRACE_QXL_RENDER_UPDATE_AREA_DONE,
    TRACE_SPAPR_PCI_MSI,
    TRACE_SPAPR_PCI_MSI_SETUP,
    TRACE_SPAPR_PCI_RTAS_IBM_CHANGE_MSI,
    TRACE_SPAPR_PCI_RTAS_IBM_QUERY_INTERRUPT_SOURCE_NUMBER,
    TRACE_SPAPR_PCI_MSI_WRITE,
    TRACE_SPAPR_PCI_LSI_SET,
    TRACE_SPAPR_PCI_MSI_RETRY,
    TRACE_PCI_UPDATE_MAPPINGS_DEL,
    TRACE_PCI_UPDATE_MAPPINGS_ADD,
    TRACE_PCNET_S_RESET,
    TRACE_PCNET_USER_INT,
    TRACE_PCNET_ISR_CHANGE,
    TRACE_PCNET_INIT,
    TRACE_PCNET_RLEN_TLEN,
    TRACE_PCNET_SS32_RDRA_TDRA,
    TRACE_PCNET_APROM_WRITEB,
    TRACE_PCNET_APROM_READB,
    TRACE_PCNET_IOPORT_READ,
    TRACE_PCNET_IOPORT_WRITE,
    TRACE_PCNET_MMIO_WRITEB,
    TRACE_PCNET_MMIO_WRITEW,
    TRACE_PCNET_MMIO_WRITEL,
    TRACE_PCNET_MMIO_READB,
    TRACE_PCNET_MMIO_READW,
    TRACE_PCNET_MMIO_READL,
    TRACE_XICS_ICP_CHECK_IPI,
    TRACE_XICS_ICP_ACCEPT,
    TRACE_XICS_ICP_EOI,
    TRACE_XICS_ICP_IRQ,
    TRACE_XICS_ICP_RAISE,
    TRACE_XICS_SET_IRQ_MSI,
    TRACE_XICS_MASKED_PENDING,
    TRACE_XICS_SET_IRQ_LSI,
    TRACE_XICS_ICS_WRITE_XIVE,
    TRACE_XICS_ICS_REJECT,
    TRACE_XICS_ICS_EOI,
    TRACE_XICS_ALLOC,
    TRACE_XICS_ALLOC_BLOCK,
    TRACE_XICS_ICS_FREE,
    TRACE_XICS_ICS_FREE_WARN,
    TRACE_SPAPR_CAS_FAILED,
    TRACE_SPAPR_CAS_CONTINUE,
    TRACE_SPAPR_CAS_PVR_TRY,
    TRACE_SPAPR_CAS_PVR,
    TRACE_SPAPR_IOMMU_PUT,
    TRACE_SPAPR_IOMMU_GET,
    TRACE_SPAPR_IOMMU_INDIRECT,
    TRACE_SPAPR_IOMMU_STUFF,
    TRACE_SPAPR_IOMMU_PCI_PUT,
    TRACE_SPAPR_IOMMU_PCI_GET,
    TRACE_SPAPR_IOMMU_PCI_INDIRECT,
    TRACE_SPAPR_IOMMU_PCI_STUFF,
    TRACE_SPAPR_IOMMU_XLATE,
    TRACE_SPAPR_IOMMU_NEW_TABLE,
    TRACE_PPC_TB_ADJUST,
    TRACE_PREP_IO_800_WRITEB,
    TRACE_PREP_IO_800_READB,
    TRACE_BUFFER_RESIZE,
    TRACE_BUFFER_MOVE_EMPTY,
    TRACE_BUFFER_MOVE,
    TRACE_BUFFER_FREE,
    TRACE_HBITMAP_ITER_SKIP_WORDS,
    TRACE_HBITMAP_RESET,
    TRACE_HBITMAP_SET,
    TRACE_GET_SKEYS_NONZERO,
    TRACE_SET_SKEYS_NONZERO,
    TRACE_IOINST,
    TRACE_IOINST_SCH_ID,
    TRACE_IOINST_CHP_ID,
    TRACE_IOINST_CHSC_CMD,
    TRACE_CSS_ENABLE_FACILITY,
    TRACE_CSS_CRW,
    TRACE_CSS_CHPID_ADD,
    TRACE_CSS_NEW_IMAGE,
    TRACE_CSS_ASSIGN_SUBCH,
    TRACE_CSS_IO_INTERRUPT,
    TRACE_CSS_ADAPTER_INTERRUPT,
    TRACE_VIRTIO_CCW_INTERPRET_CCW,
    TRACE_VIRTIO_CCW_NEW_DEVICE,
    TRACE_FLIC_CREATE_DEVICE,
    TRACE_FLIC_NO_DEVICE_API,
    TRACE_FLIC_RESET_FAILED,
    TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE,
    TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING,
    TRACE_MIGRATE_SET_STATE,
    TRACE_MIGRATE_FD_CLEANUP,
    TRACE_MIGRATE_FD_ERROR,
    TRACE_MIGRATE_FD_CANCEL,
    TRACE_MIGRATE_HANDLE_RP_REQ_PAGES,
    TRACE_MIGRATE_PENDING,
    TRACE_MIGRATE_SEND_RP_MESSAGE,
    TRACE_MIGRATION_COMPLETION_FILE_ERR,
    TRACE_MIGRATION_COMPLETION_POSTCOPY_END,
    TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE,
    TRACE_MIGRATION_COMPLETION_POSTCOPY_END_BEFORE_RP,
    TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_RP,
    TRACE_MIGRATION_THREAD_AFTER_LOOP,
    TRACE_MIGRATION_THREAD_FILE_ERR,
    TRACE_MIGRATION_THREAD_SETUP_COMPLETE,
    TRACE_OPEN_RETURN_PATH_ON_SOURCE,
    TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE,
    TRACE_POSTCOPY_START,
    TRACE_POSTCOPY_START_SET_RUN,
    TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END,
    TRACE_SOURCE_RETURN_PATH_THREAD_END,
    TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY,
    TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP,
    TRACE_SOURCE_RETURN_PATH_THREAD_PONG,
    TRACE_SOURCE_RETURN_PATH_THREAD_SHUT,
    TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD,
    TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE,
    TRACE_MIGRATION_THREAD_LOW_PENDING,
    TRACE_MIGRATE_STATE_TOO_BIG,
    TRACE_MIGRATE_TRANSFERRED,
    TRACE_PROCESS_INCOMING_MIGRATION_CO_END,
    TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN,
    TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION,
    TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED,
    TRACE_QEMU_RDMA_ACCEPT_PIN_STATE,
    TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC,
    TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS,
    TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_B,
    TRACE_QEMU_RDMA_CLEANUP_DISCONNECT,
    TRACE_QEMU_RDMA_CLEANUP_WAITING_FOR_DISCONNECT,
    TRACE_QEMU_RDMA_CLOSE,
    TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED,
    TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME,
    TRACE_QEMU_RDMA_DEST_INIT_TRYING,
    TRACE_QEMU_RDMA_DUMP_GID,
    TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START,
    TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE,
    TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK,
    TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING,
    TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED,
    TRACE_QEMU_RDMA_FILL,
    TRACE_QEMU_RDMA_INIT_RAM_BLOCKS,
    TRACE_QEMU_RDMA_POLL_RECV,
    TRACE_QEMU_RDMA_POLL_WRITE,
    TRACE_QEMU_RDMA_POLL_OTHER,
    TRACE_QEMU_RDMA_POST_SEND_CONTROL,
    TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS,
    TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT,
    TRACE_QEMU_RDMA_REGISTRATION_START,
    TRACE_QEMU_RDMA_REGISTRATION_STOP,
    TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM,
    TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING,
    TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND,
    TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY,
    TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT,
    TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC,
    TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND,
    TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE,
    TRACE_QEMU_RDMA_WRITE_FLUSH,
    TRACE_QEMU_RDMA_WRITE_ONE_BLOCK,
    TRACE_QEMU_RDMA_WRITE_ONE_POST,
    TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL,
    TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES,
    TRACE_QEMU_RDMA_WRITE_ONE_SENDREG,
    TRACE_QEMU_RDMA_WRITE_ONE_TOP,
    TRACE_QEMU_RDMA_WRITE_ONE_ZERO,
    TRACE_RDMA_ADD_BLOCK,
    TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE,
    TRACE_RDMA_DELETE_BLOCK,
    TRACE_RDMA_START_INCOMING_MIGRATION,
    TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT,
    TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN,
    TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT,
    TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT,
    TRACE_POSTCOPY_DISCARD_SEND_FINISH,
    TRACE_POSTCOPY_DISCARD_SEND_RANGE,
    TRACE_POSTCOPY_RAM_DISCARD_RANGE,
    TRACE_POSTCOPY_CLEANUP_RANGE,
    TRACE_POSTCOPY_INIT_RANGE,
    TRACE_POSTCOPY_NHP_RANGE,
    TRACE_POSTCOPY_PLACE_PAGE,
    TRACE_POSTCOPY_PLACE_PAGE_ZERO,
    TRACE_POSTCOPY_RAM_ENABLE_NOTIFY,
    TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY,
    TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT,
    TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT,
    TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST,
    TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF,
    TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY,
    TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT,
    TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN,
    TRACE_KVM_IOCTL,
    TRACE_KVM_VM_IOCTL,
    TRACE_KVM_VCPU_IOCTL,
    TRACE_KVM_RUN_EXIT,
    TRACE_KVM_DEVICE_IOCTL,
    TRACE_KVM_FAILED_REG_GET,
    TRACE_KVM_FAILED_REG_SET,
    TRACE_KVM_FAILED_SPR_SET,
    TRACE_KVM_FAILED_SPR_GET,
    TRACE_EXEC_TB,
    TRACE_EXEC_TB_NOCACHE,
    TRACE_EXEC_TB_EXIT,
    TRACE_TRANSLATE_BLOCK,
    TRACE_MEMORY_REGION_OPS_READ,
    TRACE_MEMORY_REGION_OPS_WRITE,
    TRACE_MEMORY_REGION_SUBPAGE_READ,
    TRACE_MEMORY_REGION_SUBPAGE_WRITE,
    TRACE_MEMORY_REGION_TB_READ,
    TRACE_MEMORY_REGION_TB_WRITE,
    TRACE_OBJECT_DYNAMIC_CAST_ASSERT,
    TRACE_OBJECT_CLASS_DYNAMIC_CAST_ASSERT,
    TRACE_XEN_PV_MMIO_READ,
    TRACE_XEN_PV_MMIO_WRITE,
    TRACE_PCI_CFG_READ,
    TRACE_PCI_CFG_WRITE,
    TRACE_VFIO_INTX_INTERRUPT,
    TRACE_VFIO_INTX_EOI,
    TRACE_VFIO_INTX_ENABLE_KVM,
    TRACE_VFIO_INTX_DISABLE_KVM,
    TRACE_VFIO_INTX_UPDATE,
    TRACE_VFIO_INTX_ENABLE,
    TRACE_VFIO_INTX_DISABLE,
    TRACE_VFIO_MSI_INTERRUPT,
    TRACE_VFIO_MSIX_VECTOR_DO_USE,
    TRACE_VFIO_MSIX_VECTOR_RELEASE,
    TRACE_VFIO_MSIX_ENABLE,
    TRACE_VFIO_MSIX_PBA_DISABLE,
    TRACE_VFIO_MSIX_PBA_ENABLE,
    TRACE_VFIO_MSIX_DISABLE,
    TRACE_VFIO_MSIX_FIXUP,
    TRACE_VFIO_MSI_ENABLE,
    TRACE_VFIO_MSI_DISABLE,
    TRACE_VFIO_PCI_LOAD_ROM,
    TRACE_VFIO_ROM_READ,
    TRACE_VFIO_PCI_SIZE_ROM,
    TRACE_VFIO_VGA_WRITE,
    TRACE_VFIO_VGA_READ,
    TRACE_VFIO_PCI_READ_CONFIG,
    TRACE_VFIO_PCI_WRITE_CONFIG,
    TRACE_VFIO_MSI_SETUP,
    TRACE_VFIO_MSIX_EARLY_SETUP,
    TRACE_VFIO_CHECK_PCIE_FLR,
    TRACE_VFIO_CHECK_PM_RESET,
    TRACE_VFIO_CHECK_AF_FLR,
    TRACE_VFIO_PCI_HOT_RESET,
    TRACE_VFIO_PCI_HOT_RESET_HAS_DEP_DEVICES,
    TRACE_VFIO_PCI_HOT_RESET_DEP_DEVICES,
    TRACE_VFIO_PCI_HOT_RESET_RESULT,
    TRACE_VFIO_POPULATE_DEVICE_CONFIG,
    TRACE_VFIO_POPULATE_DEVICE_GET_IRQ_INFO_FAILURE,
    TRACE_VFIO_INITFN,
    TRACE_VFIO_PCI_RESET,
    TRACE_VFIO_PCI_RESET_FLR,
    TRACE_VFIO_PCI_RESET_PM,
    TRACE_VFIO_PCI_EMULATED_VENDOR_ID,
    TRACE_VFIO_PCI_EMULATED_DEVICE_ID,
    TRACE_VFIO_PCI_EMULATED_SUB_VENDOR_ID,
    TRACE_VFIO_PCI_EMULATED_SUB_DEVICE_ID,
    TRACE_VFIO_QUIRK_ROM_BLACKLISTED,
    TRACE_VFIO_QUIRK_GENERIC_WINDOW_ADDRESS_WRITE,
    TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_READ,
    TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_WRITE,
    TRACE_VFIO_QUIRK_GENERIC_MIRROR_READ,
    TRACE_VFIO_QUIRK_GENERIC_MIRROR_WRITE,
    TRACE_VFIO_QUIRK_ATI_3C3_READ,
    TRACE_VFIO_QUIRK_ATI_3C3_PROBE,
    TRACE_VFIO_QUIRK_ATI_BAR4_PROBE,
    TRACE_VFIO_QUIRK_ATI_BAR2_PROBE,
    TRACE_VFIO_QUIRK_NVIDIA_3D0_STATE,
    TRACE_VFIO_QUIRK_NVIDIA_3D0_READ,
    TRACE_VFIO_QUIRK_NVIDIA_3D0_WRITE,
    TRACE_VFIO_QUIRK_NVIDIA_3D0_PROBE,
    TRACE_VFIO_QUIRK_NVIDIA_BAR5_STATE,
    TRACE_VFIO_QUIRK_NVIDIA_BAR5_PROBE,
    TRACE_VFIO_QUIRK_NVIDIA_BAR0_MSI_ACK,
    TRACE_VFIO_QUIRK_NVIDIA_BAR0_PROBE,
    TRACE_VFIO_QUIRK_RTL8168_FAKE_LATCH,
    TRACE_VFIO_QUIRK_RTL8168_MSIX_WRITE,
    TRACE_VFIO_QUIRK_RTL8168_MSIX_READ,
    TRACE_VFIO_QUIRK_RTL8168_PROBE,
    TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_SKIPPED,
    TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_NO_SMC,
    TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_TIMEOUT,
    TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_DONE,
    TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET,
    TRACE_VFIO_REGION_WRITE,
    TRACE_VFIO_REGION_READ,
    TRACE_VFIO_IOMMU_MAP_NOTIFY,
    TRACE_VFIO_LISTENER_REGION_ADD_SKIP,
    TRACE_VFIO_LISTENER_REGION_ADD_IOMMU,
    TRACE_VFIO_LISTENER_REGION_ADD_RAM,
    TRACE_VFIO_LISTENER_REGION_DEL_SKIP,
    TRACE_VFIO_LISTENER_REGION_DEL,
    TRACE_VFIO_DISCONNECT_CONTAINER,
    TRACE_VFIO_PUT_GROUP,
    TRACE_VFIO_GET_DEVICE,
    TRACE_VFIO_PUT_BASE_DEVICE,
    TRACE_VFIO_REGION_SETUP,
    TRACE_VFIO_REGION_MMAP_FAULT,
    TRACE_VFIO_REGION_MMAP,
    TRACE_VFIO_REGION_EXIT,
    TRACE_VFIO_REGION_FINALIZE,
    TRACE_VFIO_REGION_MMAPS_SET_ENABLED,
    TRACE_VFIO_PLATFORM_BASE_DEVICE_INIT,
    TRACE_VFIO_PLATFORM_REALIZE,
    TRACE_VFIO_PLATFORM_EOI,
    TRACE_VFIO_PLATFORM_INTP_MMAP_ENABLE,
    TRACE_VFIO_PLATFORM_INTP_INTERRUPT,
    TRACE_VFIO_PLATFORM_INTP_INJECT_PENDING_LOCKHELD,
    TRACE_VFIO_PLATFORM_POPULATE_INTERRUPTS,
    TRACE_VFIO_INTP_INTERRUPT_SET_PENDING,
    TRACE_VFIO_PLATFORM_START_LEVEL_IRQFD_INJECTION,
    TRACE_VFIO_PLATFORM_START_EDGE_IRQFD_INJECTION,
    TRACE_MHP_ACPI_INVALID_SLOT_SELECTED,
    TRACE_MHP_ACPI_EJECTING_INVALID_SLOT,
    TRACE_MHP_ACPI_READ_ADDR_LO,
    TRACE_MHP_ACPI_READ_ADDR_HI,
    TRACE_MHP_ACPI_READ_SIZE_LO,
    TRACE_MHP_ACPI_READ_SIZE_HI,
    TRACE_MHP_ACPI_READ_PXM,
    TRACE_MHP_ACPI_READ_FLAGS,
    TRACE_MHP_ACPI_WRITE_SLOT,
    TRACE_MHP_ACPI_WRITE_OST_EV,
    TRACE_MHP_ACPI_WRITE_OST_STATUS,
    TRACE_MHP_ACPI_CLEAR_INSERT_EVT,
    TRACE_MHP_ACPI_CLEAR_REMOVE_EVT,
    TRACE_MHP_ACPI_PC_DIMM_DELETED,
    TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED,
    TRACE_MHP_PC_DIMM_ASSIGNED_SLOT,
    TRACE_MHP_PC_DIMM_ASSIGNED_ADDRESS,
    TRACE_KVM_ENABLE_CMMA,
    TRACE_KVM_CLEAR_CMMA,
    TRACE_KVM_FAILED_CPU_STATE_SET,
    TRACE_KVM_SIGP_FINISHED,
    TRACE_I8257_UNREGISTERED_DMA,
    TRACE_CPU_SET_STATE,
    TRACE_CPU_HALT,
    TRACE_CPU_UNHALT,
    TRACE_VIRT_ACPI_SETUP,
    TRACE_ALPHA_PCI_IACK_WRITE,
    TRACE_ALSA_REVENTS,
    TRACE_ALSA_POLLOUT,
    TRACE_ALSA_SET_HANDLER,
    TRACE_ALSA_WROTE_ZERO,
    TRACE_ALSA_READ_ZERO,
    TRACE_ALSA_XRUN_OUT,
    TRACE_ALSA_XRUN_IN,
    TRACE_ALSA_RESUME_OUT,
    TRACE_ALSA_RESUME_IN,
    TRACE_ALSA_NO_FRAMES,
    TRACE_OSS_VERSION,
    TRACE_OSS_INVALID_AVAILABLE_SIZE,
    TRACE_QCRYPTO_TLS_CREDS_LOAD_DH,
    TRACE_QCRYPTO_TLS_CREDS_GET_PATH,
    TRACE_QCRYPTO_TLS_CREDS_ANON_LOAD,
    TRACE_QCRYPTO_TLS_CREDS_X509_LOAD,
    TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_BASIC_CONSTRAINTS,
    TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_USAGE,
    TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_PURPOSE,
    TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT,
    TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_LIST,
    TRACE_QCRYPTO_TLS_SESSION_NEW,
    TRACE_VHOST_USER_EVENT,
    TRACE_USER_SETUP_FRAME,
    TRACE_USER_SETUP_RT_FRAME,
    TRACE_USER_DO_RT_SIGRETURN,
    TRACE_USER_DO_SIGRETURN,
    TRACE_USER_FORCE_SIG,
    TRACE_USER_HANDLE_SIGNAL,
    TRACE_USER_HOST_SIGNAL,
    TRACE_USER_QUEUE_SIGNAL,
    TRACE_USER_S390X_RESTORE_SIGREGS,
    TRACE_QIO_TASK_NEW,
    TRACE_QIO_TASK_COMPLETE,
    TRACE_QIO_TASK_ABORT,
    TRACE_QIO_TASK_THREAD_START,
    TRACE_QIO_TASK_THREAD_RUN,
    TRACE_QIO_TASK_THREAD_EXIT,
    TRACE_QIO_TASK_THREAD_RESULT,
    TRACE_QIO_CHANNEL_SOCKET_NEW,
    TRACE_QIO_CHANNEL_SOCKET_NEW_FD,
    TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC,
    TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC,
    TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL,
    TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE,
    TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC,
    TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC,
    TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL,
    TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE,
    TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC,
    TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC,
    TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL,
    TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE,
    TRACE_QIO_CHANNEL_SOCKET_ACCEPT,
    TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL,
    TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE,
    TRACE_QIO_CHANNEL_FILE_NEW_FD,
    TRACE_QIO_CHANNEL_FILE_NEW_PATH,
    TRACE_QIO_CHANNEL_TLS_NEW_CLIENT,
    TRACE_QIO_CHANNEL_TLS_NEW_SERVER,
    TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START,
    TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING,
    TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL,
    TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE,
    TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW,
    TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY,
    TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER,
    TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START,
    TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING,
    TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY,
    TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL,
    TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE,
    TRACE_QIO_CHANNEL_COMMAND_NEW_PID,
    TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN,
    TRACE_QIO_CHANNEL_COMMAND_ABORT,
    TRACE_QIO_CHANNEL_COMMAND_WAIT,
    TRACE_ASPEED_TIMER_CTRL_ENABLE,
    TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK,
    TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT,
    TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE,
    TRACE_ASPEED_TIMER_SET_CTRL2,
    TRACE_ASPEED_TIMER_SET_VALUE,
    TRACE_ASPEED_TIMER_READ,
    TRACE_ASPEED_VIC_SET_IRQ,
    TRACE_ASPEED_VIC_UPDATE_FIQ,
    TRACE_ASPEED_VIC_UPDATE_IRQ,
    TRACE_ASPEED_VIC_READ,
    TRACE_ASPEED_VIC_WRITE,
    TRACE_EVENT_COUNT
} TraceEventID;
#define TRACE_QEMU_MEMALIGN_ENABLED 1
#define TRACE_QEMU_ANON_RAM_ALLOC_ENABLED 1
#define TRACE_QEMU_VFREE_ENABLED 1
#define TRACE_QEMU_ANON_RAM_FREE_ENABLED 1
#define TRACE_VIRTQUEUE_FILL_ENABLED 1
#define TRACE_VIRTQUEUE_FLUSH_ENABLED 1
#define TRACE_VIRTQUEUE_POP_ENABLED 1
#define TRACE_VIRTIO_QUEUE_NOTIFY_ENABLED 1
#define TRACE_VIRTIO_IRQ_ENABLED 1
#define TRACE_VIRTIO_NOTIFY_ENABLED 1
#define TRACE_VIRTIO_SET_STATUS_ENABLED 1
#define TRACE_VIRTIO_RNG_GUEST_NOT_READY_ENABLED 1
#define TRACE_VIRTIO_RNG_PUSHED_ENABLED 1
#define TRACE_VIRTIO_RNG_REQUEST_ENABLED 1
#define TRACE_VIRTIO_SERIAL_SEND_CONTROL_EVENT_ENABLED 1
#define TRACE_VIRTIO_SERIAL_THROTTLE_PORT_ENABLED 1
#define TRACE_VIRTIO_SERIAL_HANDLE_CONTROL_MESSAGE_ENABLED 1
#define TRACE_VIRTIO_SERIAL_HANDLE_CONTROL_MESSAGE_PORT_ENABLED 1
#define TRACE_VIRTIO_CONSOLE_FLUSH_BUF_ENABLED 1
#define TRACE_VIRTIO_CONSOLE_CHR_READ_ENABLED 1
#define TRACE_VIRTIO_CONSOLE_CHR_EVENT_ENABLED 1
#define TRACE_BDRV_OPEN_COMMON_ENABLED 1
#define TRACE_BDRV_LOCK_MEDIUM_ENABLED 1
#define TRACE_MULTIWRITE_CB_ENABLED 1
#define TRACE_BDRV_AIO_MULTIWRITE_ENABLED 1
#define TRACE_BDRV_AIO_DISCARD_ENABLED 1
#define TRACE_BDRV_AIO_FLUSH_ENABLED 1
#define TRACE_BDRV_AIO_READV_ENABLED 1
#define TRACE_BDRV_AIO_WRITEV_ENABLED 1
#define TRACE_BDRV_AIO_WRITE_ZEROES_ENABLED 1
#define TRACE_BDRV_CO_READV_ENABLED 1
#define TRACE_BDRV_CO_COPY_ON_READV_ENABLED 1
#define TRACE_BDRV_CO_READV_NO_SERIALISING_ENABLED 1
#define TRACE_BDRV_CO_WRITEV_ENABLED 1
#define TRACE_BDRV_CO_WRITE_ZEROES_ENABLED 1
#define TRACE_BDRV_CO_IO_EM_ENABLED 1
#define TRACE_BDRV_CO_DO_COPY_ON_READV_ENABLED 1
#define TRACE_STREAM_ONE_ITERATION_ENABLED 1
#define TRACE_STREAM_START_ENABLED 1
#define TRACE_COMMIT_ONE_ITERATION_ENABLED 1
#define TRACE_COMMIT_START_ENABLED 1
#define TRACE_MIRROR_START_ENABLED 1
#define TRACE_MIRROR_RESTART_ITER_ENABLED 1
#define TRACE_MIRROR_BEFORE_FLUSH_ENABLED 1
#define TRACE_MIRROR_BEFORE_DRAIN_ENABLED 1
#define TRACE_MIRROR_BEFORE_SLEEP_ENABLED 1
#define TRACE_MIRROR_ONE_ITERATION_ENABLED 1
#define TRACE_MIRROR_ITERATION_DONE_ENABLED 1
#define TRACE_MIRROR_YIELD_ENABLED 1
#define TRACE_MIRROR_YIELD_IN_FLIGHT_ENABLED 1
#define TRACE_MIRROR_YIELD_BUF_BUSY_ENABLED 1
#define TRACE_MIRROR_BREAK_BUF_BUSY_ENABLED 1
#define TRACE_BACKUP_DO_COW_ENTER_ENABLED 1
#define TRACE_BACKUP_DO_COW_RETURN_ENABLED 1
#define TRACE_BACKUP_DO_COW_SKIP_ENABLED 1
#define TRACE_BACKUP_DO_COW_PROCESS_ENABLED 1
#define TRACE_BACKUP_DO_COW_READ_FAIL_ENABLED 1
#define TRACE_BACKUP_DO_COW_WRITE_FAIL_ENABLED 1
#define TRACE_QMP_BLOCK_JOB_CANCEL_ENABLED 1
#define TRACE_QMP_BLOCK_JOB_PAUSE_ENABLED 1
#define TRACE_QMP_BLOCK_JOB_RESUME_ENABLED 1
#define TRACE_QMP_BLOCK_JOB_COMPLETE_ENABLED 1
#define TRACE_BLOCK_JOB_CB_ENABLED 1
#define TRACE_QMP_BLOCK_STREAM_ENABLED 1
#define TRACE_VIRTIO_BLK_REQ_COMPLETE_ENABLED 1
#define TRACE_VIRTIO_BLK_RW_COMPLETE_ENABLED 1
#define TRACE_VIRTIO_BLK_HANDLE_WRITE_ENABLED 1
#define TRACE_VIRTIO_BLK_HANDLE_READ_ENABLED 1
#define TRACE_VIRTIO_BLK_SUBMIT_MULTIREQ_ENABLED 1
#define TRACE_VIRTIO_BLK_DATA_PLANE_START_ENABLED 1
#define TRACE_VIRTIO_BLK_DATA_PLANE_STOP_ENABLED 1
#define TRACE_VIRTIO_BLK_DATA_PLANE_PROCESS_REQUEST_ENABLED 1
#define TRACE_THREAD_POOL_SUBMIT_ENABLED 1
#define TRACE_THREAD_POOL_COMPLETE_ENABLED 1
#define TRACE_THREAD_POOL_CANCEL_ENABLED 1
#define TRACE_PAIO_SUBMIT_CO_ENABLED 1
#define TRACE_PAIO_SUBMIT_ENABLED 1
#define TRACE_CPU_IN_ENABLED 1
#define TRACE_CPU_OUT_ENABLED 1
#define TRACE_BALLOON_EVENT_ENABLED 1
#define TRACE_VIRTIO_BALLOON_HANDLE_OUTPUT_ENABLED 1
#define TRACE_VIRTIO_BALLOON_GET_CONFIG_ENABLED 1
#define TRACE_VIRTIO_BALLOON_SET_CONFIG_ENABLED 1
#define TRACE_VIRTIO_BALLOON_TO_TARGET_ENABLED 1
#define TRACE_CPU_SET_APIC_BASE_ENABLED 1
#define TRACE_CPU_GET_APIC_BASE_ENABLED 1
#define TRACE_APIC_REPORT_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_RESET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_GET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_LOCAL_DELIVER_ENABLED 1
#define TRACE_APIC_DELIVER_IRQ_ENABLED 1
#define TRACE_APIC_MEM_READL_ENABLED 1
#define TRACE_APIC_MEM_WRITEL_ENABLED 1
#define TRACE_CS4231_MEM_READL_DREG_ENABLED 1
#define TRACE_CS4231_MEM_READL_REG_ENABLED 1
#define TRACE_CS4231_MEM_WRITEL_REG_ENABLED 1
#define TRACE_CS4231_MEM_WRITEL_DREG_ENABLED 1
#define TRACE_NVRAM_READ_ENABLED 1
#define TRACE_NVRAM_WRITE_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MER_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MDR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_VCR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_DR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR1_ENABLED 1
#define TRACE_ECC_MEM_READL_MER_ENABLED 1
#define TRACE_ECC_MEM_READL_MDR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_READL_VCR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR0_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR1_ENABLED 1
#define TRACE_ECC_MEM_READL_DR_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR1_ENABLED 1
#define TRACE_ECC_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_ECC_DIAG_MEM_READB_ENABLED 1
#define TRACE_FW_CFG_SELECT_ENABLED 1
#define TRACE_FW_CFG_READ_ENABLED 1
#define TRACE_FW_CFG_ADD_FILE_ENABLED 1
#define TRACE_HD_GEOMETRY_LCHS_GUESS_ENABLED 1
#define TRACE_HD_GEOMETRY_GUESS_ENABLED 1
#define TRACE_JAZZ_LED_READ_ENABLED 1
#define TRACE_JAZZ_LED_WRITE_ENABLED 1
#define TRACE_XENFB_MOUSE_EVENT_ENABLED 1
#define TRACE_XENFB_INPUT_CONNECTED_ENABLED 1
#define TRACE_LANCE_MEM_READW_ENABLED 1
#define TRACE_LANCE_MEM_WRITEW_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_ENABLED 1
#define TRACE_SLAVIO_CHECK_INTERRUPTS_ENABLED 1
#define TRACE_SLAVIO_SET_IRQ_ENABLED 1
#define TRACE_SLAVIO_SET_TIMER_IRQ_CPU_ENABLED 1
#define TRACE_PS2_PUT_KEYCODE_ENABLED 1
#define TRACE_PS2_READ_DATA_ENABLED 1
#define TRACE_PS2_SET_LEDSTATE_ENABLED 1
#define TRACE_PS2_RESET_KEYBOARD_ENABLED 1
#define TRACE_PS2_WRITE_KEYBOARD_ENABLED 1
#define TRACE_PS2_KEYBOARD_SET_TRANSLATION_ENABLED 1
#define TRACE_PS2_MOUSE_SEND_PACKET_ENABLED 1
#define TRACE_PS2_MOUSE_EVENT_DISABLED_ENABLED 1
#define TRACE_PS2_MOUSE_EVENT_ENABLED 1
#define TRACE_PS2_MOUSE_FAKE_EVENT_ENABLED 1
#define TRACE_PS2_WRITE_MOUSE_ENABLED 1
#define TRACE_PS2_KBD_RESET_ENABLED 1
#define TRACE_PS2_MOUSE_RESET_ENABLED 1
#define TRACE_PS2_KBD_INIT_ENABLED 1
#define TRACE_PS2_MOUSE_INIT_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_ENABLED 1
#define TRACE_SLAVIO_SET_POWER_FAIL_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_READB_ENABLED 1
#define TRACE_APC_MEM_WRITEB_ENABLED 1
#define TRACE_APC_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_WRITEW_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_READW_ENABLED 1
#define TRACE_SLAVIO_TIMER_GET_OUT_ENABLED 1
#define TRACE_SLAVIO_TIMER_IRQ_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_READL_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_ENABLED 1
#define TRACE_JAZZIO_READ_ENABLED 1
#define TRACE_JAZZIO_WRITE_ENABLED 1
#define TRACE_RC4030_READ_ENABLED 1
#define TRACE_RC4030_WRITE_ENABLED 1
#define TRACE_LEDMA_MEMORY_READ_ENABLED 1
#define TRACE_LEDMA_MEMORY_WRITE_ENABLED 1
#define TRACE_SPARC32_DMA_SET_IRQ_RAISE_ENABLED 1
#define TRACE_SPARC32_DMA_SET_IRQ_LOWER_ENABLED 1
#define TRACE_ESPDMA_MEMORY_READ_ENABLED 1
#define TRACE_ESPDMA_MEMORY_WRITE_ENABLED 1
#define TRACE_SPARC32_DMA_MEM_READL_ENABLED 1
#define TRACE_SPARC32_DMA_MEM_WRITEL_ENABLED 1
#define TRACE_SPARC32_DMA_ENABLE_RAISE_ENABLED 1
#define TRACE_SPARC32_DMA_ENABLE_LOWER_ENABLED 1
#define TRACE_SUN4M_CPU_INTERRUPT_ENABLED 1
#define TRACE_SUN4M_CPU_RESET_INTERRUPT_ENABLED 1
#define TRACE_SUN4M_CPU_SET_IRQ_RAISE_ENABLED 1
#define TRACE_SUN4M_CPU_SET_IRQ_LOWER_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_READL_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_CTRL_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_TLBFLUSH_ENABLED 1
#define TRACE_SUN4M_IOMMU_MEM_WRITEL_PGFLUSH_ENABLED 1
#define TRACE_SUN4M_IOMMU_PAGE_GET_FLAGS_ENABLED 1
#define TRACE_SUN4M_IOMMU_TRANSLATE_PA_ENABLED 1
#define TRACE_SUN4M_IOMMU_BAD_ADDR_ENABLED 1
#define TRACE_USB_PACKET_STATE_CHANGE_ENABLED 1
#define TRACE_USB_PACKET_STATE_FAULT_ENABLED 1
#define TRACE_USB_PORT_CLAIM_ENABLED 1
#define TRACE_USB_PORT_ATTACH_ENABLED 1
#define TRACE_USB_PORT_DETACH_ENABLED 1
#define TRACE_USB_PORT_RELEASE_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_READ_FAILED_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_HEAD_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_HEAD_OFFSET_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_RELATIVE_FRAME_NUMBER_NEG_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_RELATIVE_FRAME_NUMBER_BIG_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_BAD_DIRECTION_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_BAD_BP_BE_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_BAD_CC_NOT_ACCESSED_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_BAD_CC_OVERRUN_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_SO_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_DATA_OVERRUN_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_DATA_UNDERRUN_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_NAK_ENABLED 1
#define TRACE_USB_OHCI_ISO_TD_BAD_RESPONSE_ENABLED 1
#define TRACE_USB_OHCI_PORT_ATTACH_ENABLED 1
#define TRACE_USB_OHCI_PORT_DETACH_ENABLED 1
#define TRACE_USB_OHCI_PORT_WAKEUP_ENABLED 1
#define TRACE_USB_OHCI_PORT_SUSPEND_ENABLED 1
#define TRACE_USB_OHCI_PORT_RESET_ENABLED 1
#define TRACE_USB_OHCI_REMOTE_WAKEUP_ENABLED 1
#define TRACE_USB_OHCI_RESET_ENABLED 1
#define TRACE_USB_OHCI_START_ENABLED 1
#define TRACE_USB_OHCI_RESUME_ENABLED 1
#define TRACE_USB_OHCI_STOP_ENABLED 1
#define TRACE_USB_OHCI_EXIT_ENABLED 1
#define TRACE_USB_OHCI_SET_CTL_ENABLED 1
#define TRACE_USB_OHCI_TD_UNDERRUN_ENABLED 1
#define TRACE_USB_OHCI_TD_DEV_ERROR_ENABLED 1
#define TRACE_USB_OHCI_TD_NAK_ENABLED 1
#define TRACE_USB_OHCI_TD_STALL_ENABLED 1
#define TRACE_USB_OHCI_TD_BABBLE_ENABLED 1
#define TRACE_USB_OHCI_TD_BAD_DEVICE_RESPONSE_ENABLED 1
#define TRACE_USB_OHCI_TD_READ_ERROR_ENABLED 1
#define TRACE_USB_OHCI_TD_BAD_DIRECTION_ENABLED 1
#define TRACE_USB_OHCI_TD_SKIP_ASYNC_ENABLED 1
#define TRACE_USB_OHCI_TD_PKT_HDR_ENABLED 1
#define TRACE_USB_OHCI_TD_PKT_SHORT_ENABLED 1
#define TRACE_USB_OHCI_TD_PKT_FULL_ENABLED 1
#define TRACE_USB_OHCI_TD_TOO_MANY_PENDING_ENABLED 1
#define TRACE_USB_OHCI_TD_PACKET_STATUS_ENABLED 1
#define TRACE_USB_OHCI_ED_READ_ERROR_ENABLED 1
#define TRACE_USB_OHCI_ED_PKT_ENABLED 1
#define TRACE_USB_OHCI_ED_PKT_FLAGS_ENABLED 1
#define TRACE_USB_OHCI_HCCA_READ_ERROR_ENABLED 1
#define TRACE_USB_OHCI_MEM_READ_UNALIGNED_ENABLED 1
#define TRACE_USB_OHCI_MEM_READ_BAD_OFFSET_ENABLED 1
#define TRACE_USB_OHCI_MEM_WRITE_UNALIGNED_ENABLED 1
#define TRACE_USB_OHCI_MEM_WRITE_BAD_OFFSET_ENABLED 1
#define TRACE_USB_OHCI_PROCESS_LISTS_ENABLED 1
#define TRACE_USB_OHCI_BUS_EOF_TIMER_FAILED_ENABLED 1
#define TRACE_USB_OHCI_SET_FRAME_INTERVAL_ENABLED 1
#define TRACE_USB_OHCI_HUB_POWER_UP_ENABLED 1
#define TRACE_USB_OHCI_HUB_POWER_DOWN_ENABLED 1
#define TRACE_USB_OHCI_INIT_TIME_ENABLED 1
#define TRACE_USB_OHCI_DIE_ENABLED 1
#define TRACE_USB_OHCI_ASYNC_COMPLETE_ENABLED 1
#define TRACE_USB_EHCI_RESET_ENABLED 1
#define TRACE_USB_EHCI_UNREALIZE_ENABLED 1
#define TRACE_USB_EHCI_OPREG_READ_ENABLED 1
#define TRACE_USB_EHCI_OPREG_WRITE_ENABLED 1
#define TRACE_USB_EHCI_OPREG_CHANGE_ENABLED 1
#define TRACE_USB_EHCI_PORTSC_READ_ENABLED 1
#define TRACE_USB_EHCI_PORTSC_WRITE_ENABLED 1
#define TRACE_USB_EHCI_PORTSC_CHANGE_ENABLED 1
#define TRACE_USB_EHCI_USBSTS_ENABLED 1
#define TRACE_USB_EHCI_STATE_ENABLED 1
#define TRACE_USB_EHCI_QH_PTRS_ENABLED 1
#define TRACE_USB_EHCI_QH_FIELDS_ENABLED 1
#define TRACE_USB_EHCI_QH_BITS_ENABLED 1
#define TRACE_USB_EHCI_QTD_PTRS_ENABLED 1
#define TRACE_USB_EHCI_QTD_FIELDS_ENABLED 1
#define TRACE_USB_EHCI_QTD_BITS_ENABLED 1
#define TRACE_USB_EHCI_ITD_ENABLED 1
#define TRACE_USB_EHCI_SITD_ENABLED 1
#define TRACE_USB_EHCI_PORT_ATTACH_ENABLED 1
#define TRACE_USB_EHCI_PORT_DETACH_ENABLED 1
#define TRACE_USB_EHCI_PORT_RESET_ENABLED 1
#define TRACE_USB_EHCI_PORT_SUSPEND_ENABLED 1
#define TRACE_USB_EHCI_PORT_WAKEUP_ENABLED 1
#define TRACE_USB_EHCI_PORT_RESUME_ENABLED 1
#define TRACE_USB_EHCI_QUEUE_ACTION_ENABLED 1
#define TRACE_USB_EHCI_PACKET_ACTION_ENABLED 1
#define TRACE_USB_EHCI_IRQ_ENABLED 1
#define TRACE_USB_EHCI_GUEST_BUG_ENABLED 1
#define TRACE_USB_EHCI_DOORBELL_RING_ENABLED 1
#define TRACE_USB_EHCI_DOORBELL_ACK_ENABLED 1
#define TRACE_USB_EHCI_DMA_ERROR_ENABLED 1
#define TRACE_USB_UHCI_RESET_ENABLED 1
#define TRACE_USB_UHCI_EXIT_ENABLED 1
#define TRACE_USB_UHCI_SCHEDULE_START_ENABLED 1
#define TRACE_USB_UHCI_SCHEDULE_STOP_ENABLED 1
#define TRACE_USB_UHCI_FRAME_START_ENABLED 1
#define TRACE_USB_UHCI_FRAME_STOP_BANDWIDTH_ENABLED 1
#define TRACE_USB_UHCI_FRAME_LOOP_STOP_IDLE_ENABLED 1
#define TRACE_USB_UHCI_FRAME_LOOP_CONTINUE_ENABLED 1
#define TRACE_USB_UHCI_MMIO_READW_ENABLED 1
#define TRACE_USB_UHCI_MMIO_WRITEW_ENABLED 1
#define TRACE_USB_UHCI_QUEUE_ADD_ENABLED 1
#define TRACE_USB_UHCI_QUEUE_DEL_ENABLED 1
#define TRACE_USB_UHCI_PACKET_ADD_ENABLED 1
#define TRACE_USB_UHCI_PACKET_LINK_ASYNC_ENABLED 1
#define TRACE_USB_UHCI_PACKET_UNLINK_ASYNC_ENABLED 1
#define TRACE_USB_UHCI_PACKET_CANCEL_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_SUCCESS_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_SHORTXFER_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_STALL_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_BABBLE_ENABLED 1
#define TRACE_USB_UHCI_PACKET_COMPLETE_ERROR_ENABLED 1
#define TRACE_USB_UHCI_PACKET_DEL_ENABLED 1
#define TRACE_USB_UHCI_QH_LOAD_ENABLED 1
#define TRACE_USB_UHCI_TD_LOAD_ENABLED 1
#define TRACE_USB_UHCI_TD_QUEUE_ENABLED 1
#define TRACE_USB_UHCI_TD_NEXTQH_ENABLED 1
#define TRACE_USB_UHCI_TD_ASYNC_ENABLED 1
#define TRACE_USB_UHCI_TD_COMPLETE_ENABLED 1
#define TRACE_USB_XHCI_RESET_ENABLED 1
#define TRACE_USB_XHCI_EXIT_ENABLED 1
#define TRACE_USB_XHCI_RUN_ENABLED 1
#define TRACE_USB_XHCI_STOP_ENABLED 1
#define TRACE_USB_XHCI_CAP_READ_ENABLED 1
#define TRACE_USB_XHCI_OPER_READ_ENABLED 1
#define TRACE_USB_XHCI_PORT_READ_ENABLED 1
#define TRACE_USB_XHCI_RUNTIME_READ_ENABLED 1
#define TRACE_USB_XHCI_DOORBELL_READ_ENABLED 1
#define TRACE_USB_XHCI_OPER_WRITE_ENABLED 1
#define TRACE_USB_XHCI_PORT_WRITE_ENABLED 1
#define TRACE_USB_XHCI_RUNTIME_WRITE_ENABLED 1
#define TRACE_USB_XHCI_DOORBELL_WRITE_ENABLED 1
#define TRACE_USB_XHCI_IRQ_INTX_ENABLED 1
#define TRACE_USB_XHCI_IRQ_MSI_ENABLED 1
#define TRACE_USB_XHCI_IRQ_MSIX_ENABLED 1
#define TRACE_USB_XHCI_IRQ_MSIX_USE_ENABLED 1
#define TRACE_USB_XHCI_IRQ_MSIX_UNUSE_ENABLED 1
#define TRACE_USB_XHCI_QUEUE_EVENT_ENABLED 1
#define TRACE_USB_XHCI_FETCH_TRB_ENABLED 1
#define TRACE_USB_XHCI_PORT_RESET_ENABLED 1
#define TRACE_USB_XHCI_PORT_LINK_ENABLED 1
#define TRACE_USB_XHCI_PORT_NOTIFY_ENABLED 1
#define TRACE_USB_XHCI_SLOT_ENABLE_ENABLED 1
#define TRACE_USB_XHCI_SLOT_DISABLE_ENABLED 1
#define TRACE_USB_XHCI_SLOT_ADDRESS_ENABLED 1
#define TRACE_USB_XHCI_SLOT_CONFIGURE_ENABLED 1
#define TRACE_USB_XHCI_SLOT_EVALUATE_ENABLED 1
#define TRACE_USB_XHCI_SLOT_RESET_ENABLED 1
#define TRACE_USB_XHCI_EP_ENABLE_ENABLED 1
#define TRACE_USB_XHCI_EP_DISABLE_ENABLED 1
#define TRACE_USB_XHCI_EP_SET_DEQUEUE_ENABLED 1
#define TRACE_USB_XHCI_EP_KICK_ENABLED 1
#define TRACE_USB_XHCI_EP_STOP_ENABLED 1
#define TRACE_USB_XHCI_EP_RESET_ENABLED 1
#define TRACE_USB_XHCI_EP_STATE_ENABLED 1
#define TRACE_USB_XHCI_XFER_START_ENABLED 1
#define TRACE_USB_XHCI_XFER_ASYNC_ENABLED 1
#define TRACE_USB_XHCI_XFER_NAK_ENABLED 1
#define TRACE_USB_XHCI_XFER_RETRY_ENABLED 1
#define TRACE_USB_XHCI_XFER_SUCCESS_ENABLED 1
#define TRACE_USB_XHCI_XFER_ERROR_ENABLED 1
#define TRACE_USB_XHCI_UNIMPLEMENTED_ENABLED 1
#define TRACE_USB_DESC_DEVICE_ENABLED 1
#define TRACE_USB_DESC_DEVICE_QUALIFIER_ENABLED 1
#define TRACE_USB_DESC_CONFIG_ENABLED 1
#define TRACE_USB_DESC_OTHER_SPEED_CONFIG_ENABLED 1
#define TRACE_USB_DESC_STRING_ENABLED 1
#define TRACE_USB_DESC_BOS_ENABLED 1
#define TRACE_USB_DESC_MSOS_ENABLED 1
#define TRACE_USB_SET_ADDR_ENABLED 1
#define TRACE_USB_SET_CONFIG_ENABLED 1
#define TRACE_USB_SET_INTERFACE_ENABLED 1
#define TRACE_USB_CLEAR_DEVICE_FEATURE_ENABLED 1
#define TRACE_USB_SET_DEVICE_FEATURE_ENABLED 1
#define TRACE_USB_HUB_RESET_ENABLED 1
#define TRACE_USB_HUB_CONTROL_ENABLED 1
#define TRACE_USB_HUB_GET_PORT_STATUS_ENABLED 1
#define TRACE_USB_HUB_SET_PORT_FEATURE_ENABLED 1
#define TRACE_USB_HUB_CLEAR_PORT_FEATURE_ENABLED 1
#define TRACE_USB_HUB_ATTACH_ENABLED 1
#define TRACE_USB_HUB_DETACH_ENABLED 1
#define TRACE_USB_HUB_STATUS_REPORT_ENABLED 1
#define TRACE_USB_UAS_RESET_ENABLED 1
#define TRACE_USB_UAS_COMMAND_ENABLED 1
#define TRACE_USB_UAS_RESPONSE_ENABLED 1
#define TRACE_USB_UAS_SENSE_ENABLED 1
#define TRACE_USB_UAS_READ_READY_ENABLED 1
#define TRACE_USB_UAS_WRITE_READY_ENABLED 1
#define TRACE_USB_UAS_XFER_DATA_ENABLED 1
#define TRACE_USB_UAS_SCSI_DATA_ENABLED 1
#define TRACE_USB_UAS_SCSI_COMPLETE_ENABLED 1
#define TRACE_USB_UAS_TMF_ABORT_TASK_ENABLED 1
#define TRACE_USB_UAS_TMF_LOGICAL_UNIT_RESET_ENABLED 1
#define TRACE_USB_UAS_TMF_UNSUPPORTED_ENABLED 1
#define TRACE_USB_MTP_RESET_ENABLED 1
#define TRACE_USB_MTP_COMMAND_ENABLED 1
#define TRACE_USB_MTP_SUCCESS_ENABLED 1
#define TRACE_USB_MTP_ERROR_ENABLED 1
#define TRACE_USB_MTP_DATA_IN_ENABLED 1
#define TRACE_USB_MTP_XFER_ENABLED 1
#define TRACE_USB_MTP_NAK_ENABLED 1
#define TRACE_USB_MTP_STALL_ENABLED 1
#define TRACE_USB_MTP_OP_GET_DEVICE_INFO_ENABLED 1
#define TRACE_USB_MTP_OP_OPEN_SESSION_ENABLED 1
#define TRACE_USB_MTP_OP_CLOSE_SESSION_ENABLED 1
#define TRACE_USB_MTP_OP_GET_STORAGE_IDS_ENABLED 1
#define TRACE_USB_MTP_OP_GET_STORAGE_INFO_ENABLED 1
#define TRACE_USB_MTP_OP_GET_NUM_OBJECTS_ENABLED 1
#define TRACE_USB_MTP_OP_GET_OBJECT_HANDLES_ENABLED 1
#define TRACE_USB_MTP_OP_GET_OBJECT_INFO_ENABLED 1
#define TRACE_USB_MTP_OP_GET_OBJECT_ENABLED 1
#define TRACE_USB_MTP_OP_GET_PARTIAL_OBJECT_ENABLED 1
#define TRACE_USB_MTP_OP_UNKNOWN_ENABLED 1
#define TRACE_USB_MTP_OBJECT_ALLOC_ENABLED 1
#define TRACE_USB_MTP_OBJECT_FREE_ENABLED 1
#define TRACE_USB_MTP_ADD_CHILD_ENABLED 1
#define TRACE_USB_MTP_INOTIFY_EVENT_ENABLED 1
#define TRACE_USB_HOST_OPEN_STARTED_ENABLED 1
#define TRACE_USB_HOST_OPEN_SUCCESS_ENABLED 1
#define TRACE_USB_HOST_OPEN_FAILURE_ENABLED 1
#define TRACE_USB_HOST_CLOSE_ENABLED 1
#define TRACE_USB_HOST_ATTACH_KERNEL_ENABLED 1
#define TRACE_USB_HOST_DETACH_KERNEL_ENABLED 1
#define TRACE_USB_HOST_SET_ADDRESS_ENABLED 1
#define TRACE_USB_HOST_SET_CONFIG_ENABLED 1
#define TRACE_USB_HOST_SET_INTERFACE_ENABLED 1
#define TRACE_USB_HOST_CLAIM_INTERFACE_ENABLED 1
#define TRACE_USB_HOST_RELEASE_INTERFACE_ENABLED 1
#define TRACE_USB_HOST_REQ_CONTROL_ENABLED 1
#define TRACE_USB_HOST_REQ_DATA_ENABLED 1
#define TRACE_USB_HOST_REQ_COMPLETE_ENABLED 1
#define TRACE_USB_HOST_REQ_EMULATED_ENABLED 1
#define TRACE_USB_HOST_REQ_CANCELED_ENABLED 1
#define TRACE_USB_HOST_ISO_START_ENABLED 1
#define TRACE_USB_HOST_ISO_STOP_ENABLED 1
#define TRACE_USB_HOST_ISO_OUT_OF_BUFS_ENABLED 1
#define TRACE_USB_HOST_RESET_ENABLED 1
#define TRACE_USB_HOST_AUTO_SCAN_ENABLED_ENABLED 1
#define TRACE_USB_HOST_AUTO_SCAN_DISABLED_ENABLED 1
#define TRACE_USB_HOST_PARSE_CONFIG_ENABLED 1
#define TRACE_USB_HOST_PARSE_INTERFACE_ENABLED 1
#define TRACE_USB_HOST_PARSE_ENDPOINT_ENABLED 1
#define TRACE_USB_HOST_PARSE_ERROR_ENABLED 1
#define TRACE_SCSI_REQ_ALLOC_ENABLED 1
#define TRACE_SCSI_REQ_CANCEL_ENABLED 1
#define TRACE_SCSI_REQ_DATA_ENABLED 1
#define TRACE_SCSI_REQ_DATA_CANCELED_ENABLED 1
#define TRACE_SCSI_REQ_DEQUEUE_ENABLED 1
#define TRACE_SCSI_REQ_CONTINUE_ENABLED 1
#define TRACE_SCSI_REQ_CONTINUE_CANCELED_ENABLED 1
#define TRACE_SCSI_REQ_PARSED_ENABLED 1
#define TRACE_SCSI_REQ_PARSED_LBA_ENABLED 1
#define TRACE_SCSI_REQ_PARSE_BAD_ENABLED 1
#define TRACE_SCSI_REQ_BUILD_SENSE_ENABLED 1
#define TRACE_SCSI_DEVICE_SET_UA_ENABLED 1
#define TRACE_SCSI_REPORT_LUNS_ENABLED 1
#define TRACE_SCSI_INQUIRY_ENABLED 1
#define TRACE_SCSI_TEST_UNIT_READY_ENABLED 1
#define TRACE_SCSI_REQUEST_SENSE_ENABLED 1
#define TRACE_VM_STATE_NOTIFY_ENABLED 1
#define TRACE_LOAD_FILE_ENABLED 1
#define TRACE_RUNSTATE_SET_ENABLED 1
#define TRACE_SYSTEM_WAKEUP_REQUEST_ENABLED 1
#define TRACE_QEMU_SYSTEM_SHUTDOWN_REQUEST_ENABLED 1
#define TRACE_QEMU_SYSTEM_POWERDOWN_REQUEST_ENABLED 1
#define TRACE_QCOW2_WRITEV_START_REQ_ENABLED 1
#define TRACE_QCOW2_WRITEV_DONE_REQ_ENABLED 1
#define TRACE_QCOW2_WRITEV_START_PART_ENABLED 1
#define TRACE_QCOW2_WRITEV_DONE_PART_ENABLED 1
#define TRACE_QCOW2_WRITEV_DATA_ENABLED 1
#define TRACE_QCOW2_ALLOC_CLUSTERS_OFFSET_ENABLED 1
#define TRACE_QCOW2_HANDLE_COPIED_ENABLED 1
#define TRACE_QCOW2_HANDLE_ALLOC_ENABLED 1
#define TRACE_QCOW2_DO_ALLOC_CLUSTERS_OFFSET_ENABLED 1
#define TRACE_QCOW2_CLUSTER_ALLOC_PHYS_ENABLED 1
#define TRACE_QCOW2_CLUSTER_LINK_L2_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_GET_EMPTY_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_WRITE_L2_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_WRITE_L1_ENABLED 1
#define TRACE_QCOW2_L2_ALLOCATE_DONE_ENABLED 1
#define TRACE_QCOW2_CACHE_GET_ENABLED 1
#define TRACE_QCOW2_CACHE_GET_REPLACE_ENTRY_ENABLED 1
#define TRACE_QCOW2_CACHE_GET_READ_ENABLED 1
#define TRACE_QCOW2_CACHE_GET_DONE_ENABLED 1
#define TRACE_QCOW2_CACHE_FLUSH_ENABLED 1
#define TRACE_QCOW2_CACHE_ENTRY_FLUSH_ENABLED 1
#define TRACE_QED_ALLOC_L2_CACHE_ENTRY_ENABLED 1
#define TRACE_QED_UNREF_L2_CACHE_ENTRY_ENABLED 1
#define TRACE_QED_FIND_L2_CACHE_ENTRY_ENABLED 1
#define TRACE_QED_READ_TABLE_ENABLED 1
#define TRACE_QED_READ_TABLE_CB_ENABLED 1
#define TRACE_QED_WRITE_TABLE_ENABLED 1
#define TRACE_QED_WRITE_TABLE_CB_ENABLED 1
#define TRACE_QED_NEED_CHECK_TIMER_CB_ENABLED 1
#define TRACE_QED_START_NEED_CHECK_TIMER_ENABLED 1
#define TRACE_QED_CANCEL_NEED_CHECK_TIMER_ENABLED 1
#define TRACE_QED_AIO_COMPLETE_ENABLED 1
#define TRACE_QED_AIO_SETUP_ENABLED 1
#define TRACE_QED_AIO_NEXT_IO_ENABLED 1
#define TRACE_QED_AIO_READ_DATA_ENABLED 1
#define TRACE_QED_AIO_WRITE_DATA_ENABLED 1
#define TRACE_QED_AIO_WRITE_PREFILL_ENABLED 1
#define TRACE_QED_AIO_WRITE_POSTFILL_ENABLED 1
#define TRACE_QED_AIO_WRITE_MAIN_ENABLED 1
#define TRACE_G364FB_READ_ENABLED 1
#define TRACE_G364FB_WRITE_ENABLED 1
#define TRACE_GRLIB_GPTIMER_ENABLE_ENABLED 1
#define TRACE_GRLIB_GPTIMER_DISABLED_ENABLED 1
#define TRACE_GRLIB_GPTIMER_RESTART_ENABLED 1
#define TRACE_GRLIB_GPTIMER_SET_SCALER_ENABLED 1
#define TRACE_GRLIB_GPTIMER_HIT_ENABLED 1
#define TRACE_GRLIB_GPTIMER_READL_ENABLED 1
#define TRACE_GRLIB_GPTIMER_WRITEL_ENABLED 1
#define TRACE_GRLIB_IRQMP_CHECK_IRQS_ENABLED 1
#define TRACE_GRLIB_IRQMP_ACK_ENABLED 1
#define TRACE_GRLIB_IRQMP_SET_IRQ_ENABLED 1
#define TRACE_GRLIB_IRQMP_READL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_APBUART_EVENT_ENABLED 1
#define TRACE_GRLIB_APBUART_WRITEL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_APBUART_READL_UNKNOWN_ENABLED 1
#define TRACE_LEON3_SET_IRQ_ENABLED 1
#define TRACE_LEON3_RESET_IRQ_ENABLED 1
#define TRACE_SPICE_VMC_WRITE_ENABLED 1
#define TRACE_SPICE_VMC_READ_ENABLED 1
#define TRACE_SPICE_VMC_REGISTER_INTERFACE_ENABLED 1
#define TRACE_SPICE_VMC_UNREGISTER_INTERFACE_ENABLED 1
#define TRACE_SPICE_VMC_EVENT_ENABLED 1
#define TRACE_LM32_PIC_RAISE_IRQ_ENABLED 1
#define TRACE_LM32_PIC_LOWER_IRQ_ENABLED 1
#define TRACE_LM32_PIC_INTERRUPT_ENABLED 1
#define TRACE_LM32_PIC_SET_IM_ENABLED 1
#define TRACE_LM32_PIC_SET_IP_ENABLED 1
#define TRACE_LM32_PIC_GET_IM_ENABLED 1
#define TRACE_LM32_PIC_GET_IP_ENABLED 1
#define TRACE_LM32_JUART_GET_JTX_ENABLED 1
#define TRACE_LM32_JUART_SET_JTX_ENABLED 1
#define TRACE_LM32_JUART_GET_JRX_ENABLED 1
#define TRACE_LM32_JUART_SET_JRX_ENABLED 1
#define TRACE_LM32_TIMER_MEMORY_WRITE_ENABLED 1
#define TRACE_LM32_TIMER_MEMORY_READ_ENABLED 1
#define TRACE_LM32_TIMER_HIT_ENABLED 1
#define TRACE_LM32_TIMER_IRQ_STATE_ENABLED 1
#define TRACE_LM32_UART_MEMORY_WRITE_ENABLED 1
#define TRACE_LM32_UART_MEMORY_READ_ENABLED 1
#define TRACE_LM32_UART_IRQ_STATE_ENABLED 1
#define TRACE_MPTSAS_COMMAND_COMPLETE_ENABLED 1
#define TRACE_MPTSAS_DIAG_READ_ENABLED 1
#define TRACE_MPTSAS_DIAG_WRITE_ENABLED 1
#define TRACE_MPTSAS_IRQ_INTX_ENABLED 1
#define TRACE_MPTSAS_IRQ_MSI_ENABLED 1
#define TRACE_MPTSAS_MMIO_READ_ENABLED 1
#define TRACE_MPTSAS_MMIO_UNHANDLED_READ_ENABLED 1
#define TRACE_MPTSAS_MMIO_UNHANDLED_WRITE_ENABLED 1
#define TRACE_MPTSAS_MMIO_WRITE_ENABLED 1
#define TRACE_MPTSAS_PROCESS_MESSAGE_ENABLED 1
#define TRACE_MPTSAS_PROCESS_SCSI_IO_REQUEST_ENABLED 1
#define TRACE_MPTSAS_RESET_ENABLED 1
#define TRACE_MPTSAS_SCSI_OVERFLOW_ENABLED 1
#define TRACE_MPTSAS_SGL_OVERFLOW_ENABLED 1
#define TRACE_MPTSAS_UNHANDLED_CMD_ENABLED 1
#define TRACE_MPTSAS_UNHANDLED_DOORBELL_CMD_ENABLED 1
#define TRACE_MPTSAS_CONFIG_SAS_DEVICE_ENABLED 1
#define TRACE_MPTSAS_CONFIG_SAS_PHY_ENABLED 1
#define TRACE_MEGASAS_INIT_FIRMWARE_ENABLED 1
#define TRACE_MEGASAS_INIT_QUEUE_ENABLED 1
#define TRACE_MEGASAS_INITQ_MAP_FAILED_ENABLED 1
#define TRACE_MEGASAS_INITQ_MAPPED_ENABLED 1
#define TRACE_MEGASAS_INITQ_MISMATCH_ENABLED 1
#define TRACE_MEGASAS_QF_MAPPED_ENABLED 1
#define TRACE_MEGASAS_QF_NEW_ENABLED 1
#define TRACE_MEGASAS_QF_BUSY_ENABLED 1
#define TRACE_MEGASAS_QF_ENQUEUE_ENABLED 1
#define TRACE_MEGASAS_QF_UPDATE_ENABLED 1
#define TRACE_MEGASAS_QF_MAP_FAILED_ENABLED 1
#define TRACE_MEGASAS_QF_COMPLETE_NOIRQ_ENABLED 1
#define TRACE_MEGASAS_QF_COMPLETE_ENABLED 1
#define TRACE_MEGASAS_FRAME_BUSY_ENABLED 1
#define TRACE_MEGASAS_UNHANDLED_FRAME_CMD_ENABLED 1
#define TRACE_MEGASAS_HANDLE_SCSI_ENABLED 1
#define TRACE_MEGASAS_SCSI_TARGET_NOT_PRESENT_ENABLED 1
#define TRACE_MEGASAS_SCSI_INVALID_CDB_LEN_ENABLED 1
#define TRACE_MEGASAS_IOV_READ_OVERFLOW_ENABLED 1
#define TRACE_MEGASAS_IOV_WRITE_OVERFLOW_ENABLED 1
#define TRACE_MEGASAS_IOV_READ_UNDERFLOW_ENABLED 1
#define TRACE_MEGASAS_IOV_WRITE_UNDERFLOW_ENABLED 1
#define TRACE_MEGASAS_SCSI_REQ_ALLOC_FAILED_ENABLED 1
#define TRACE_MEGASAS_SCSI_READ_START_ENABLED 1
#define TRACE_MEGASAS_SCSI_WRITE_START_ENABLED 1
#define TRACE_MEGASAS_SCSI_NODATA_ENABLED 1
#define TRACE_MEGASAS_SCSI_COMPLETE_ENABLED 1
#define TRACE_MEGASAS_COMMAND_COMPLETE_ENABLED 1
#define TRACE_MEGASAS_HANDLE_IO_ENABLED 1
#define TRACE_MEGASAS_IO_TARGET_NOT_PRESENT_ENABLED 1
#define TRACE_MEGASAS_IO_READ_START_ENABLED 1
#define TRACE_MEGASAS_IO_WRITE_START_ENABLED 1
#define TRACE_MEGASAS_IO_COMPLETE_ENABLED 1
#define TRACE_MEGASAS_IOVEC_SGL_OVERFLOW_ENABLED 1
#define TRACE_MEGASAS_IOVEC_SGL_UNDERFLOW_ENABLED 1
#define TRACE_MEGASAS_IOVEC_SGL_INVALID_ENABLED 1
#define TRACE_MEGASAS_IOVEC_OVERFLOW_ENABLED 1
#define TRACE_MEGASAS_IOVEC_UNDERFLOW_ENABLED 1
#define TRACE_MEGASAS_HANDLE_DCMD_ENABLED 1
#define TRACE_MEGASAS_FINISH_DCMD_ENABLED 1
#define TRACE_MEGASAS_DCMD_REQ_ALLOC_FAILED_ENABLED 1
#define TRACE_MEGASAS_DCMD_INTERNAL_SUBMIT_ENABLED 1
#define TRACE_MEGASAS_DCMD_INTERNAL_FINISH_ENABLED 1
#define TRACE_MEGASAS_DCMD_INTERNAL_INVALID_ENABLED 1
#define TRACE_MEGASAS_DCMD_UNHANDLED_ENABLED 1
#define TRACE_MEGASAS_DCMD_ZERO_SGE_ENABLED 1
#define TRACE_MEGASAS_DCMD_INVALID_SGE_ENABLED 1
#define TRACE_MEGASAS_DCMD_INVALID_XFER_LEN_ENABLED 1
#define TRACE_MEGASAS_DCMD_ENTER_ENABLED 1
#define TRACE_MEGASAS_DCMD_DUMMY_ENABLED 1
#define TRACE_MEGASAS_DCMD_SET_FW_TIME_ENABLED 1
#define TRACE_MEGASAS_DCMD_PD_GET_LIST_ENABLED 1
#define TRACE_MEGASAS_DCMD_LD_GET_LIST_ENABLED 1
#define TRACE_MEGASAS_DCMD_LD_GET_INFO_ENABLED 1
#define TRACE_MEGASAS_DCMD_LD_LIST_QUERY_ENABLED 1
#define TRACE_MEGASAS_DCMD_PD_GET_INFO_ENABLED 1
#define TRACE_MEGASAS_DCMD_PD_LIST_QUERY_ENABLED 1
#define TRACE_MEGASAS_DCMD_RESET_LD_ENABLED 1
#define TRACE_MEGASAS_DCMD_UNSUPPORTED_ENABLED 1
#define TRACE_MEGASAS_ABORT_FRAME_ENABLED 1
#define TRACE_MEGASAS_ABORT_NO_CMD_ENABLED 1
#define TRACE_MEGASAS_ABORT_INVALID_CONTEXT_ENABLED 1
#define TRACE_MEGASAS_RESET_ENABLED 1
#define TRACE_MEGASAS_INIT_ENABLED 1
#define TRACE_MEGASAS_MSIX_RAISE_ENABLED 1
#define TRACE_MEGASAS_MSI_RAISE_ENABLED 1
#define TRACE_MEGASAS_IRQ_LOWER_ENABLED 1
#define TRACE_MEGASAS_IRQ_RAISE_ENABLED 1
#define TRACE_MEGASAS_INTR_ENABLED_ENABLED 1
#define TRACE_MEGASAS_INTR_DISABLED_ENABLED 1
#define TRACE_MEGASAS_MSIX_ENABLED_ENABLED 1
#define TRACE_MEGASAS_MSI_ENABLED_ENABLED 1
#define TRACE_MEGASAS_MMIO_READL_ENABLED 1
#define TRACE_MEGASAS_MMIO_INVALID_READL_ENABLED 1
#define TRACE_MEGASAS_MMIO_WRITEL_ENABLED 1
#define TRACE_MEGASAS_MMIO_INVALID_WRITEL_ENABLED 1
#define TRACE_MILKYMIST_AC97_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_AC97_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_AC97_PULSE_IRQ_CRREQUEST_ENABLED 1
#define TRACE_MILKYMIST_AC97_PULSE_IRQ_CRREPLY_ENABLED 1
#define TRACE_MILKYMIST_AC97_PULSE_IRQ_DMAW_ENABLED 1
#define TRACE_MILKYMIST_AC97_PULSE_IRQ_DMAR_ENABLED 1
#define TRACE_MILKYMIST_AC97_IN_CB_ENABLED 1
#define TRACE_MILKYMIST_AC97_IN_CB_TRANSFERRED_ENABLED 1
#define TRACE_MILKYMIST_AC97_OUT_CB_ENABLED 1
#define TRACE_MILKYMIST_AC97_OUT_CB_TRANSFERRED_ENABLED 1
#define TRACE_MILKYMIST_HPDMC_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_HPDMC_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_MEMCARD_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_MEMCARD_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_MDIO_WRITE_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_MDIO_READ_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_TX_FRAME_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_RX_FRAME_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_RX_TRANSFER_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_RAISE_IRQ_RX_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_LOWER_IRQ_RX_ENABLED 1
#define TRACE_MILKYMIST_MINIMAC2_PULSE_IRQ_TX_ENABLED 1
#define TRACE_MILKYMIST_PFPU_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_PFPU_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_PFPU_VECTOUT_ENABLED 1
#define TRACE_MILKYMIST_PFPU_PULSE_IRQ_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEVT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_KEVT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_ICAP_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_START_TIMER0_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_STOP_TIMER0_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_START_TIMER1_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_STOP_TIMER1_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER0_ENABLED 1
#define TRACE_MILKYMIST_SYSCTL_PULSE_IRQ_TIMER1_ENABLED 1
#define TRACE_MILKYMIST_TMU2_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_TMU2_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_TMU2_START_ENABLED 1
#define TRACE_MILKYMIST_TMU2_PULSE_IRQ_ENABLED 1
#define TRACE_MILKYMIST_UART_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_UART_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_UART_RAISE_IRQ_ENABLED 1
#define TRACE_MILKYMIST_UART_LOWER_IRQ_ENABLED 1
#define TRACE_MILKYMIST_VGAFB_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_VGAFB_MEMORY_WRITE_ENABLED 1
#define TRACE_MIPSNET_SEND_ENABLED 1
#define TRACE_MIPSNET_RECEIVE_ENABLED 1
#define TRACE_MIPSNET_READ_ENABLED 1
#define TRACE_MIPSNET_WRITE_ENABLED 1
#define TRACE_MIPSNET_IRQ_ENABLED 1
#define TRACE_PC87312_IO_READ_ENABLED 1
#define TRACE_PC87312_IO_WRITE_ENABLED 1
#define TRACE_PC87312_INFO_FLOPPY_ENABLED 1
#define TRACE_PC87312_INFO_IDE_ENABLED 1
#define TRACE_PC87312_INFO_PARALLEL_ENABLED 1
#define TRACE_PC87312_INFO_SERIAL_ENABLED 1
#define TRACE_PVSCSI_RING_INIT_DATA_ENABLED 1
#define TRACE_PVSCSI_RING_INIT_MSG_ENABLED 1
#define TRACE_PVSCSI_RING_FLUSH_CMP_ENABLED 1
#define TRACE_PVSCSI_RING_FLUSH_MSG_ENABLED 1
#define TRACE_PVSCSI_UPDATE_IRQ_LEVEL_ENABLED 1
#define TRACE_PVSCSI_UPDATE_IRQ_MSI_ENABLED 1
#define TRACE_PVSCSI_CMP_RING_PUT_ENABLED 1
#define TRACE_PVSCSI_MSG_RING_PUT_ENABLED 1
#define TRACE_PVSCSI_COMPLETE_REQUEST_ENABLED 1
#define TRACE_PVSCSI_GET_SG_LIST_ENABLED 1
#define TRACE_PVSCSI_GET_NEXT_SG_ELEM_ENABLED 1
#define TRACE_PVSCSI_COMMAND_COMPLETE_NOT_FOUND_ENABLED 1
#define TRACE_PVSCSI_COMMAND_COMPLETE_DATA_RUN_ENABLED 1
#define TRACE_PVSCSI_COMMAND_COMPLETE_SENSE_LEN_ENABLED 1
#define TRACE_PVSCSI_CONVERT_SGLIST_ENABLED 1
#define TRACE_PVSCSI_PROCESS_REQ_DESCR_ENABLED 1
#define TRACE_PVSCSI_PROCESS_REQ_DESCR_UNKNOWN_DEVICE_ENABLED 1
#define TRACE_PVSCSI_PROCESS_REQ_DESCR_INVALID_DIR_ENABLED 1
#define TRACE_PVSCSI_PROCESS_IO_ENABLED 1
#define TRACE_PVSCSI_ON_CMD_NOIMPL_ENABLED 1
#define TRACE_PVSCSI_ON_CMD_RESET_DEV_ENABLED 1
#define TRACE_PVSCSI_ON_CMD_ARRIVED_ENABLED 1
#define TRACE_PVSCSI_ON_CMD_ABORT_ENABLED 1
#define TRACE_PVSCSI_ON_CMD_UNKNOWN_ENABLED 1
#define TRACE_PVSCSI_ON_CMD_UNKNOWN_DATA_ENABLED 1
#define TRACE_PVSCSI_IO_WRITE_ENABLED 1
#define TRACE_PVSCSI_IO_WRITE_UNKNOWN_ENABLED 1
#define TRACE_PVSCSI_IO_READ_ENABLED 1
#define TRACE_PVSCSI_IO_READ_UNKNOWN_ENABLED 1
#define TRACE_PVSCSI_INIT_MSI_FAIL_ENABLED 1
#define TRACE_PVSCSI_STATE_ENABLED 1
#define TRACE_PVSCSI_TX_RINGS_PPN_ENABLED 1
#define TRACE_PVSCSI_TX_RINGS_NUM_PAGES_ENABLED 1
#define TRACE_XEN_RAM_ALLOC_ENABLED 1
#define TRACE_XEN_CLIENT_SET_MEMORY_ENABLED 1
#define TRACE_XEN_IOREQ_SERVER_CREATE_ENABLED 1
#define TRACE_XEN_IOREQ_SERVER_DESTROY_ENABLED 1
#define TRACE_XEN_IOREQ_SERVER_STATE_ENABLED 1
#define TRACE_XEN_MAP_MMIO_RANGE_ENABLED 1
#define TRACE_XEN_UNMAP_MMIO_RANGE_ENABLED 1
#define TRACE_XEN_MAP_PORTIO_RANGE_ENABLED 1
#define TRACE_XEN_UNMAP_PORTIO_RANGE_ENABLED 1
#define TRACE_XEN_MAP_PCIDEV_ENABLED 1
#define TRACE_XEN_UNMAP_PCIDEV_ENABLED 1
#define TRACE_HANDLE_IOREQ_ENABLED 1
#define TRACE_HANDLE_IOREQ_READ_ENABLED 1
#define TRACE_HANDLE_IOREQ_WRITE_ENABLED 1
#define TRACE_CPU_IOREQ_PIO_ENABLED 1
#define TRACE_CPU_IOREQ_PIO_READ_REG_ENABLED 1
#define TRACE_CPU_IOREQ_PIO_WRITE_REG_ENABLED 1
#define TRACE_CPU_IOREQ_MOVE_ENABLED 1
#define TRACE_XEN_MAP_CACHE_ENABLED 1
#define TRACE_XEN_REMAP_BUCKET_ENABLED 1
#define TRACE_XEN_MAP_CACHE_RETURN_ENABLED 1
#define TRACE_XEN_PLATFORM_LOG_ENABLED 1
#define TRACE_QEMU_COROUTINE_ENTER_ENABLED 1
#define TRACE_QEMU_COROUTINE_YIELD_ENABLED 1
#define TRACE_QEMU_COROUTINE_TERMINATE_ENABLED 1
#define TRACE_QEMU_CO_QUEUE_RUN_RESTART_ENABLED 1
#define TRACE_QEMU_CO_QUEUE_NEXT_ENABLED 1
#define TRACE_QEMU_CO_MUTEX_LOCK_ENTRY_ENABLED 1
#define TRACE_QEMU_CO_MUTEX_LOCK_RETURN_ENABLED 1
#define TRACE_QEMU_CO_MUTEX_UNLOCK_ENTRY_ENABLED 1
#define TRACE_QEMU_CO_MUTEX_UNLOCK_RETURN_ENABLED 1
#define TRACE_ESCC_PUT_QUEUE_ENABLED 1
#define TRACE_ESCC_GET_QUEUE_ENABLED 1
#define TRACE_ESCC_UPDATE_IRQ_ENABLED 1
#define TRACE_ESCC_UPDATE_PARAMETERS_ENABLED 1
#define TRACE_ESCC_MEM_WRITEB_CTRL_ENABLED 1
#define TRACE_ESCC_MEM_WRITEB_DATA_ENABLED 1
#define TRACE_ESCC_MEM_READB_CTRL_ENABLED 1
#define TRACE_ESCC_MEM_READB_DATA_ENABLED 1
#define TRACE_ESCC_SERIAL_RECEIVE_BYTE_ENABLED 1
#define TRACE_ESCC_SUNKBD_EVENT_IN_ENABLED 1
#define TRACE_ESCC_SUNKBD_EVENT_OUT_ENABLED 1
#define TRACE_ESCC_KBD_COMMAND_ENABLED 1
#define TRACE_ESCC_SUNMOUSE_EVENT_ENABLED 1
#define TRACE_ESP_ERROR_FIFO_OVERRUN_ENABLED 1
#define TRACE_ESP_ERROR_UNHANDLED_COMMAND_ENABLED 1
#define TRACE_ESP_ERROR_INVALID_WRITE_ENABLED 1
#define TRACE_ESP_RAISE_IRQ_ENABLED 1
#define TRACE_ESP_LOWER_IRQ_ENABLED 1
#define TRACE_ESP_DMA_ENABLE_ENABLED 1
#define TRACE_ESP_DMA_DISABLE_ENABLED 1
#define TRACE_ESP_GET_CMD_ENABLED 1
#define TRACE_ESP_DO_BUSID_CMD_ENABLED 1
#define TRACE_ESP_HANDLE_SATN_STOP_ENABLED 1
#define TRACE_ESP_WRITE_RESPONSE_ENABLED 1
#define TRACE_ESP_DO_DMA_ENABLED 1
#define TRACE_ESP_COMMAND_COMPLETE_ENABLED 1
#define TRACE_ESP_COMMAND_COMPLETE_UNEXPECTED_ENABLED 1
#define TRACE_ESP_COMMAND_COMPLETE_FAIL_ENABLED 1
#define TRACE_ESP_TRANSFER_DATA_ENABLED 1
#define TRACE_ESP_HANDLE_TI_ENABLED 1
#define TRACE_ESP_HANDLE_TI_CMD_ENABLED 1
#define TRACE_ESP_MEM_READB_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_NOP_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_FLUSH_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_RESET_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_BUS_RESET_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_ICCS_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_MSGACC_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_PAD_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_SATN_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_RSTATN_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_SEL_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_SELATN_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_SELATNS_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_ENSEL_ENABLED 1
#define TRACE_ESP_MEM_WRITEB_CMD_DISSEL_ENABLED 1
#define TRACE_ESP_PCI_ERROR_INVALID_DMA_DIRECTION_ENABLED 1
#define TRACE_ESP_PCI_ERROR_INVALID_READ_ENABLED 1
#define TRACE_ESP_PCI_ERROR_INVALID_WRITE_ENABLED 1
#define TRACE_ESP_PCI_ERROR_INVALID_WRITE_DMA_ENABLED 1
#define TRACE_ESP_PCI_DMA_READ_ENABLED 1
#define TRACE_ESP_PCI_DMA_WRITE_ENABLED 1
#define TRACE_ESP_PCI_DMA_IDLE_ENABLED 1
#define TRACE_ESP_PCI_DMA_BLAST_ENABLED 1
#define TRACE_ESP_PCI_DMA_ABORT_ENABLED 1
#define TRACE_ESP_PCI_DMA_START_ENABLED 1
#define TRACE_ESP_PCI_SBAC_READ_ENABLED 1
#define TRACE_ESP_PCI_SBAC_WRITE_ENABLED 1
#define TRACE_HANDLE_QMP_COMMAND_ENABLED 1
#define TRACE_MONITOR_PROTOCOL_EMITTER_ENABLED 1
#define TRACE_MONITOR_PROTOCOL_EVENT_HANDLER_ENABLED 1
#define TRACE_MONITOR_PROTOCOL_EVENT_EMIT_ENABLED 1
#define TRACE_MONITOR_PROTOCOL_EVENT_QUEUE_ENABLED 1
#define TRACE_MONITOR_PROTOCOL_EVENT_THROTTLE_ENABLED 1
#define TRACE_OPEN_ETH_MII_WRITE_ENABLED 1
#define TRACE_OPEN_ETH_MII_READ_ENABLED 1
#define TRACE_OPEN_ETH_UPDATE_IRQ_ENABLED 1
#define TRACE_OPEN_ETH_RECEIVE_ENABLED 1
#define TRACE_OPEN_ETH_RECEIVE_MCAST_ENABLED 1
#define TRACE_OPEN_ETH_RECEIVE_REJECT_ENABLED 1
#define TRACE_OPEN_ETH_RECEIVE_DESC_ENABLED 1
#define TRACE_OPEN_ETH_START_XMIT_ENABLED 1
#define TRACE_OPEN_ETH_REG_READ_ENABLED 1
#define TRACE_OPEN_ETH_REG_WRITE_ENABLED 1
#define TRACE_OPEN_ETH_DESC_READ_ENABLED 1
#define TRACE_OPEN_ETH_DESC_WRITE_ENABLED 1
#define TRACE_V9FS_RERROR_ENABLED 1
#define TRACE_V9FS_VERSION_ENABLED 1
#define TRACE_V9FS_VERSION_RETURN_ENABLED 1
#define TRACE_V9FS_ATTACH_ENABLED 1
#define TRACE_V9FS_ATTACH_RETURN_ENABLED 1
#define TRACE_V9FS_STAT_ENABLED 1
#define TRACE_V9FS_STAT_RETURN_ENABLED 1
#define TRACE_V9FS_GETATTR_ENABLED 1
#define TRACE_V9FS_GETATTR_RETURN_ENABLED 1
#define TRACE_V9FS_WALK_ENABLED 1
#define TRACE_V9FS_WALK_RETURN_ENABLED 1
#define TRACE_V9FS_OPEN_ENABLED 1
#define TRACE_V9FS_OPEN_RETURN_ENABLED 1
#define TRACE_V9FS_LCREATE_ENABLED 1
#define TRACE_V9FS_LCREATE_RETURN_ENABLED 1
#define TRACE_V9FS_FSYNC_ENABLED 1
#define TRACE_V9FS_CLUNK_ENABLED 1
#define TRACE_V9FS_READ_ENABLED 1
#define TRACE_V9FS_READ_RETURN_ENABLED 1
#define TRACE_V9FS_READDIR_ENABLED 1
#define TRACE_V9FS_READDIR_RETURN_ENABLED 1
#define TRACE_V9FS_WRITE_ENABLED 1
#define TRACE_V9FS_WRITE_RETURN_ENABLED 1
#define TRACE_V9FS_CREATE_ENABLED 1
#define TRACE_V9FS_CREATE_RETURN_ENABLED 1
#define TRACE_V9FS_SYMLINK_ENABLED 1
#define TRACE_V9FS_SYMLINK_RETURN_ENABLED 1
#define TRACE_V9FS_FLUSH_ENABLED 1
#define TRACE_V9FS_LINK_ENABLED 1
#define TRACE_V9FS_REMOVE_ENABLED 1
#define TRACE_V9FS_WSTAT_ENABLED 1
#define TRACE_V9FS_MKNOD_ENABLED 1
#define TRACE_V9FS_MKNOD_RETURN_ENABLED 1
#define TRACE_V9FS_LOCK_ENABLED 1
#define TRACE_V9FS_LOCK_RETURN_ENABLED 1
#define TRACE_V9FS_GETLOCK_ENABLED 1
#define TRACE_V9FS_GETLOCK_RETURN_ENABLED 1
#define TRACE_V9FS_MKDIR_ENABLED 1
#define TRACE_V9FS_MKDIR_RETURN_ENABLED 1
#define TRACE_V9FS_XATTRWALK_ENABLED 1
#define TRACE_V9FS_XATTRWALK_RETURN_ENABLED 1
#define TRACE_V9FS_XATTRCREATE_ENABLED 1
#define TRACE_V9FS_READLINK_ENABLED 1
#define TRACE_V9FS_READLINK_RETURN_ENABLED 1
#define TRACE_MMU_HELPER_DFAULT_ENABLED 1
#define TRACE_MMU_HELPER_DPROT_ENABLED 1
#define TRACE_MMU_HELPER_DMISS_ENABLED 1
#define TRACE_MMU_HELPER_TFAULT_ENABLED 1
#define TRACE_MMU_HELPER_TMISS_ENABLED 1
#define TRACE_MMU_HELPER_GET_PHYS_ADDR_CODE_ENABLED 1
#define TRACE_MMU_HELPER_GET_PHYS_ADDR_DATA_ENABLED 1
#define TRACE_MMU_HELPER_MMU_FAULT_ENABLED 1
#define TRACE_INT_HELPER_SET_SOFTINT_ENABLED 1
#define TRACE_INT_HELPER_CLEAR_SOFTINT_ENABLED 1
#define TRACE_INT_HELPER_WRITE_SOFTINT_ENABLED 1
#define TRACE_INT_HELPER_ICACHE_FREEZE_ENABLED 1
#define TRACE_INT_HELPER_DCACHE_FREEZE_ENABLED 1
#define TRACE_WIN_HELPER_GREGSET_ERROR_ENABLED 1
#define TRACE_WIN_HELPER_SWITCH_PSTATE_ENABLED 1
#define TRACE_WIN_HELPER_NO_SWITCH_PSTATE_ENABLED 1
#define TRACE_WIN_HELPER_WRPIL_ENABLED 1
#define TRACE_WIN_HELPER_DONE_ENABLED 1
#define TRACE_WIN_HELPER_RETRY_ENABLED 1
#define TRACE_DMA_BLK_IO_ENABLED 1
#define TRACE_DMA_AIO_CANCEL_ENABLED 1
#define TRACE_DMA_COMPLETE_ENABLED 1
#define TRACE_DMA_BLK_CB_ENABLED 1
#define TRACE_DMA_MAP_WAIT_ENABLED 1
#define TRACE_CONSOLE_GFX_NEW_ENABLED 1
#define TRACE_CONSOLE_PUTCHAR_CSI_ENABLED 1
#define TRACE_CONSOLE_PUTCHAR_UNHANDLED_ENABLED 1
#define TRACE_CONSOLE_TXT_NEW_ENABLED 1
#define TRACE_CONSOLE_SELECT_ENABLED 1
#define TRACE_CONSOLE_REFRESH_ENABLED 1
#define TRACE_DISPLAYSURFACE_CREATE_ENABLED 1
#define TRACE_DISPLAYSURFACE_CREATE_FROM_ENABLED 1
#define TRACE_DISPLAYSURFACE_CREATE_PIXMAN_ENABLED 1
#define TRACE_DISPLAYSURFACE_FREE_ENABLED 1
#define TRACE_DISPLAYCHANGELISTENER_REGISTER_ENABLED 1
#define TRACE_DISPLAYCHANGELISTENER_UNREGISTER_ENABLED 1
#define TRACE_PPM_SAVE_ENABLED 1
#define TRACE_GD_SWITCH_ENABLED 1
#define TRACE_GD_UPDATE_ENABLED 1
#define TRACE_GD_KEY_EVENT_ENABLED 1
#define TRACE_GD_GRAB_ENABLED 1
#define TRACE_GD_UNGRAB_ENABLED 1
#define TRACE_VNC_KEY_GUEST_LEDS_ENABLED 1
#define TRACE_VNC_KEY_MAP_INIT_ENABLED 1
#define TRACE_VNC_KEY_EVENT_EXT_ENABLED 1
#define TRACE_VNC_KEY_EVENT_MAP_ENABLED 1
#define TRACE_VNC_KEY_SYNC_NUMLOCK_ENABLED 1
#define TRACE_VNC_KEY_SYNC_CAPSLOCK_ENABLED 1
#define TRACE_INPUT_EVENT_KEY_NUMBER_ENABLED 1
#define TRACE_INPUT_EVENT_KEY_QCODE_ENABLED 1
#define TRACE_INPUT_EVENT_BTN_ENABLED 1
#define TRACE_INPUT_EVENT_REL_ENABLED 1
#define TRACE_INPUT_EVENT_ABS_ENABLED 1
#define TRACE_INPUT_EVENT_SYNC_ENABLED 1
#define TRACE_INPUT_MOUSE_MODE_ENABLED 1
#define TRACE_VMWARE_VALUE_READ_ENABLED 1
#define TRACE_VMWARE_VALUE_WRITE_ENABLED 1
#define TRACE_VMWARE_PALETTE_READ_ENABLED 1
#define TRACE_VMWARE_PALETTE_WRITE_ENABLED 1
#define TRACE_VMWARE_SCRATCH_READ_ENABLED 1
#define TRACE_VMWARE_SCRATCH_WRITE_ENABLED 1
#define TRACE_VMWARE_SETMODE_ENABLED 1
#define TRACE_VIRTIO_GPU_FEATURES_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_GET_DISPLAY_INFO_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_GET_CAPS_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_SET_SCANOUT_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_CREATE_2D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_CREATE_3D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_UNREF_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_BACK_ATTACH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_BACK_DETACH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_2D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_XFER_TOH_3D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_XFER_FROMH_3D_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_RES_FLUSH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_CREATE_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_DESTROY_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_RES_ATTACH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_RES_DETACH_ENABLED 1
#define TRACE_VIRTIO_GPU_CMD_CTX_SUBMIT_ENABLED 1
#define TRACE_VIRTIO_GPU_UPDATE_CURSOR_ENABLED 1
#define TRACE_VIRTIO_GPU_FENCE_CTRL_ENABLED 1
#define TRACE_VIRTIO_GPU_FENCE_RESP_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_MAIN_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_MAIN_QUIT_PARENT_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_POST_MAIN_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_ENABLED 1
#define TRACE_QEMU_SAVEVM_SEND_PACKAGED_ENABLED 1
#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_ENABLED 1
#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN_ENABLED 1
#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_CPU_SYNC_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_VMSTART_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER_ENABLED 1
#define TRACE_LOADVM_PROCESS_COMMAND_ENABLED 1
#define TRACE_LOADVM_PROCESS_COMMAND_PING_ENABLED 1
#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_START_ENABLED 1
#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE_ENABLED 1
#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD_ENABLED 1
#define TRACE_SAVEVM_COMMAND_SEND_ENABLED 1
#define TRACE_SAVEVM_SECTION_START_ENABLED 1
#define TRACE_SAVEVM_SECTION_END_ENABLED 1
#define TRACE_SAVEVM_SECTION_SKIP_ENABLED 1
#define TRACE_SAVEVM_SEND_OPEN_RETURN_PATH_ENABLED 1
#define TRACE_SAVEVM_SEND_PING_ENABLED 1
#define TRACE_SAVEVM_SEND_POSTCOPY_LISTEN_ENABLED 1
#define TRACE_SAVEVM_SEND_POSTCOPY_RUN_ENABLED 1
#define TRACE_SAVEVM_STATE_BEGIN_ENABLED 1
#define TRACE_SAVEVM_STATE_HEADER_ENABLED 1
#define TRACE_SAVEVM_STATE_ITERATE_ENABLED 1
#define TRACE_SAVEVM_STATE_CLEANUP_ENABLED 1
#define TRACE_SAVEVM_STATE_COMPLETE_PRECOPY_ENABLED 1
#define TRACE_VMSTATE_SAVE_ENABLED 1
#define TRACE_VMSTATE_LOAD_ENABLED 1
#define TRACE_QEMU_ANNOUNCE_SELF_ITER_ENABLED 1
#define TRACE_VMSTATE_LOAD_FIELD_ERROR_ENABLED 1
#define TRACE_VMSTATE_LOAD_STATE_ENABLED 1
#define TRACE_VMSTATE_LOAD_STATE_END_ENABLED 1
#define TRACE_VMSTATE_LOAD_STATE_FIELD_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_LOAD_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_LOAD_BAD_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_LOAD_GOOD_ENABLED 1
#define TRACE_QEMU_FILE_FCLOSE_ENABLED 1
#define TRACE_GET_QUEUED_PAGE_ENABLED 1
#define TRACE_GET_QUEUED_PAGE_NOT_DIRTY_ENABLED 1
#define TRACE_MIGRATION_BITMAP_SYNC_START_ENABLED 1
#define TRACE_MIGRATION_BITMAP_SYNC_END_ENABLED 1
#define TRACE_MIGRATION_THROTTLE_ENABLED 1
#define TRACE_RAM_LOAD_POSTCOPY_LOOP_ENABLED 1
#define TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP_ENABLED 1
#define TRACE_RAM_SAVE_QUEUE_PAGES_ENABLED 1
#define TRACE_QXL_INTERFACE_SET_MM_TIME_ENABLED 0
#define TRACE_QXL_IO_WRITE_VGA_ENABLED 0
#define TRACE_QXL_CREATE_GUEST_PRIMARY_ENABLED 1
#define TRACE_QXL_CREATE_GUEST_PRIMARY_REST_ENABLED 1
#define TRACE_QXL_DESTROY_PRIMARY_ENABLED 1
#define TRACE_QXL_ENTER_VGA_MODE_ENABLED 1
#define TRACE_QXL_EXIT_VGA_MODE_ENABLED 1
#define TRACE_QXL_HARD_RESET_ENABLED 1
#define TRACE_QXL_INTERFACE_ASYNC_COMPLETE_IO_ENABLED 1
#define TRACE_QXL_INTERFACE_ATTACH_WORKER_ENABLED 1
#define TRACE_QXL_INTERFACE_GET_INIT_INFO_ENABLED 1
#define TRACE_QXL_INTERFACE_SET_COMPRESSION_LEVEL_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_REST_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_OVERFLOW_ENABLED 1
#define TRACE_QXL_INTERFACE_UPDATE_AREA_COMPLETE_SCHEDULE_BH_ENABLED 1
#define TRACE_QXL_IO_DESTROY_PRIMARY_IGNORED_ENABLED 1
#define TRACE_QXL_IO_LOG_ENABLED 1
#define TRACE_QXL_IO_READ_UNEXPECTED_ENABLED 1
#define TRACE_QXL_IO_UNEXPECTED_VGA_MODE_ENABLED 1
#define TRACE_QXL_IO_WRITE_ENABLED 1
#define TRACE_QXL_MEMSLOT_ADD_GUEST_ENABLED 1
#define TRACE_QXL_POST_LOAD_ENABLED 1
#define TRACE_QXL_PRE_LOAD_ENABLED 1
#define TRACE_QXL_PRE_SAVE_ENABLED 1
#define TRACE_QXL_RESET_SURFACES_ENABLED 1
#define TRACE_QXL_RING_COMMAND_CHECK_ENABLED 1
#define TRACE_QXL_RING_COMMAND_GET_ENABLED 1
#define TRACE_QXL_RING_COMMAND_REQ_NOTIFICATION_ENABLED 1
#define TRACE_QXL_RING_CURSOR_CHECK_ENABLED 1
#define TRACE_QXL_RING_CURSOR_GET_ENABLED 1
#define TRACE_QXL_RING_CURSOR_REQ_NOTIFICATION_ENABLED 1
#define TRACE_QXL_RING_RES_PUSH_ENABLED 1
#define TRACE_QXL_RING_RES_PUSH_REST_ENABLED 1
#define TRACE_QXL_RING_RES_PUT_ENABLED 1
#define TRACE_QXL_SET_MODE_ENABLED 1
#define TRACE_QXL_SOFT_RESET_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACES_COMPLETE_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACES_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_COMPLETE_ENABLED 1
#define TRACE_QXL_SPICE_DESTROY_SURFACE_WAIT_ENABLED 1
#define TRACE_QXL_SPICE_FLUSH_SURFACES_ASYNC_ENABLED 1
#define TRACE_QXL_SPICE_MONITORS_CONFIG_ENABLED 1
#define TRACE_QXL_SPICE_LOADVM_COMMANDS_ENABLED 1
#define TRACE_QXL_SPICE_OOM_ENABLED 1
#define TRACE_QXL_SPICE_RESET_CURSOR_ENABLED 1
#define TRACE_QXL_SPICE_RESET_IMAGE_CACHE_ENABLED 1
#define TRACE_QXL_SPICE_RESET_MEMSLOTS_ENABLED 1
#define TRACE_QXL_SPICE_UPDATE_AREA_ENABLED 1
#define TRACE_QXL_SPICE_UPDATE_AREA_REST_ENABLED 1
#define TRACE_QXL_SURFACES_DIRTY_ENABLED 1
#define TRACE_QXL_SEND_EVENTS_ENABLED 1
#define TRACE_QXL_SEND_EVENTS_VM_STOPPED_ENABLED 1
#define TRACE_QXL_SET_GUEST_BUG_ENABLED 1
#define TRACE_QXL_INTERRUPT_CLIENT_MONITORS_CONFIG_ENABLED 1
#define TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_GUEST_ENABLED 1
#define TRACE_QXL_CLIENT_MONITORS_CONFIG_UNSUPPORTED_BY_DEVICE_ENABLED 1
#define TRACE_QXL_CLIENT_MONITORS_CONFIG_CAPPED_ENABLED 1
#define TRACE_QXL_CLIENT_MONITORS_CONFIG_CRC_ENABLED 1
#define TRACE_QXL_SET_CLIENT_CAPABILITIES_UNSUPPORTED_BY_REVISION_ENABLED 1
#define TRACE_QEMU_SPICE_ADD_MEMSLOT_ENABLED 1
#define TRACE_QEMU_SPICE_DEL_MEMSLOT_ENABLED 1
#define TRACE_QEMU_SPICE_CREATE_PRIMARY_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_DESTROY_PRIMARY_SURFACE_ENABLED 1
#define TRACE_QEMU_SPICE_WAKEUP_ENABLED 1
#define TRACE_QEMU_SPICE_CREATE_UPDATE_ENABLED 1
#define TRACE_QXL_RENDER_BLIT_ENABLED 1
#define TRACE_QXL_RENDER_GUEST_PRIMARY_RESIZED_ENABLED 1
#define TRACE_QXL_RENDER_UPDATE_AREA_DONE_ENABLED 1
#define TRACE_SPAPR_PCI_MSI_ENABLED 1
#define TRACE_SPAPR_PCI_MSI_SETUP_ENABLED 1
#define TRACE_SPAPR_PCI_RTAS_IBM_CHANGE_MSI_ENABLED 1
#define TRACE_SPAPR_PCI_RTAS_IBM_QUERY_INTERRUPT_SOURCE_NUMBER_ENABLED 1
#define TRACE_SPAPR_PCI_MSI_WRITE_ENABLED 1
#define TRACE_SPAPR_PCI_LSI_SET_ENABLED 1
#define TRACE_SPAPR_PCI_MSI_RETRY_ENABLED 1
#define TRACE_PCI_UPDATE_MAPPINGS_DEL_ENABLED 1
#define TRACE_PCI_UPDATE_MAPPINGS_ADD_ENABLED 1
#define TRACE_PCNET_S_RESET_ENABLED 1
#define TRACE_PCNET_USER_INT_ENABLED 1
#define TRACE_PCNET_ISR_CHANGE_ENABLED 1
#define TRACE_PCNET_INIT_ENABLED 1
#define TRACE_PCNET_RLEN_TLEN_ENABLED 1
#define TRACE_PCNET_SS32_RDRA_TDRA_ENABLED 1
#define TRACE_PCNET_APROM_WRITEB_ENABLED 1
#define TRACE_PCNET_APROM_READB_ENABLED 1
#define TRACE_PCNET_IOPORT_READ_ENABLED 1
#define TRACE_PCNET_IOPORT_WRITE_ENABLED 1
#define TRACE_PCNET_MMIO_WRITEB_ENABLED 1
#define TRACE_PCNET_MMIO_WRITEW_ENABLED 1
#define TRACE_PCNET_MMIO_WRITEL_ENABLED 1
#define TRACE_PCNET_MMIO_READB_ENABLED 1
#define TRACE_PCNET_MMIO_READW_ENABLED 1
#define TRACE_PCNET_MMIO_READL_ENABLED 1
#define TRACE_XICS_ICP_CHECK_IPI_ENABLED 1
#define TRACE_XICS_ICP_ACCEPT_ENABLED 1
#define TRACE_XICS_ICP_EOI_ENABLED 1
#define TRACE_XICS_ICP_IRQ_ENABLED 1
#define TRACE_XICS_ICP_RAISE_ENABLED 1
#define TRACE_XICS_SET_IRQ_MSI_ENABLED 1
#define TRACE_XICS_MASKED_PENDING_ENABLED 1
#define TRACE_XICS_SET_IRQ_LSI_ENABLED 1
#define TRACE_XICS_ICS_WRITE_XIVE_ENABLED 1
#define TRACE_XICS_ICS_REJECT_ENABLED 1
#define TRACE_XICS_ICS_EOI_ENABLED 1
#define TRACE_XICS_ALLOC_ENABLED 1
#define TRACE_XICS_ALLOC_BLOCK_ENABLED 1
#define TRACE_XICS_ICS_FREE_ENABLED 1
#define TRACE_XICS_ICS_FREE_WARN_ENABLED 1
#define TRACE_SPAPR_CAS_FAILED_ENABLED 1
#define TRACE_SPAPR_CAS_CONTINUE_ENABLED 1
#define TRACE_SPAPR_CAS_PVR_TRY_ENABLED 1
#define TRACE_SPAPR_CAS_PVR_ENABLED 1
#define TRACE_SPAPR_IOMMU_PUT_ENABLED 1
#define TRACE_SPAPR_IOMMU_GET_ENABLED 1
#define TRACE_SPAPR_IOMMU_INDIRECT_ENABLED 1
#define TRACE_SPAPR_IOMMU_STUFF_ENABLED 1
#define TRACE_SPAPR_IOMMU_PCI_PUT_ENABLED 1
#define TRACE_SPAPR_IOMMU_PCI_GET_ENABLED 1
#define TRACE_SPAPR_IOMMU_PCI_INDIRECT_ENABLED 1
#define TRACE_SPAPR_IOMMU_PCI_STUFF_ENABLED 1
#define TRACE_SPAPR_IOMMU_XLATE_ENABLED 1
#define TRACE_SPAPR_IOMMU_NEW_TABLE_ENABLED 1
#define TRACE_PPC_TB_ADJUST_ENABLED 1
#define TRACE_PREP_IO_800_WRITEB_ENABLED 1
#define TRACE_PREP_IO_800_READB_ENABLED 1
#define TRACE_BUFFER_RESIZE_ENABLED 1
#define TRACE_BUFFER_MOVE_EMPTY_ENABLED 1
#define TRACE_BUFFER_MOVE_ENABLED 1
#define TRACE_BUFFER_FREE_ENABLED 1
#define TRACE_HBITMAP_ITER_SKIP_WORDS_ENABLED 1
#define TRACE_HBITMAP_RESET_ENABLED 1
#define TRACE_HBITMAP_SET_ENABLED 1
#define TRACE_GET_SKEYS_NONZERO_ENABLED 1
#define TRACE_SET_SKEYS_NONZERO_ENABLED 1
#define TRACE_IOINST_ENABLED 1
#define TRACE_IOINST_SCH_ID_ENABLED 1
#define TRACE_IOINST_CHP_ID_ENABLED 1
#define TRACE_IOINST_CHSC_CMD_ENABLED 1
#define TRACE_CSS_ENABLE_FACILITY_ENABLED 1
#define TRACE_CSS_CRW_ENABLED 1
#define TRACE_CSS_CHPID_ADD_ENABLED 1
#define TRACE_CSS_NEW_IMAGE_ENABLED 1
#define TRACE_CSS_ASSIGN_SUBCH_ENABLED 1
#define TRACE_CSS_IO_INTERRUPT_ENABLED 1
#define TRACE_CSS_ADAPTER_INTERRUPT_ENABLED 1
#define TRACE_VIRTIO_CCW_INTERPRET_CCW_ENABLED 1
#define TRACE_VIRTIO_CCW_NEW_DEVICE_ENABLED 1
#define TRACE_FLIC_CREATE_DEVICE_ENABLED 1
#define TRACE_FLIC_NO_DEVICE_API_ENABLED 1
#define TRACE_FLIC_RESET_FAILED_ENABLED 1
#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE_ENABLED 1
#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING_ENABLED 1
#define TRACE_MIGRATE_SET_STATE_ENABLED 1
#define TRACE_MIGRATE_FD_CLEANUP_ENABLED 1
#define TRACE_MIGRATE_FD_ERROR_ENABLED 1
#define TRACE_MIGRATE_FD_CANCEL_ENABLED 1
#define TRACE_MIGRATE_HANDLE_RP_REQ_PAGES_ENABLED 1
#define TRACE_MIGRATE_PENDING_ENABLED 1
#define TRACE_MIGRATE_SEND_RP_MESSAGE_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_FILE_ERR_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_BEFORE_RP_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_RP_ENABLED 1
#define TRACE_MIGRATION_THREAD_AFTER_LOOP_ENABLED 1
#define TRACE_MIGRATION_THREAD_FILE_ERR_ENABLED 1
#define TRACE_MIGRATION_THREAD_SETUP_COMPLETE_ENABLED 1
#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_ENABLED 1
#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE_ENABLED 1
#define TRACE_POSTCOPY_START_ENABLED 1
#define TRACE_POSTCOPY_START_SET_RUN_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_END_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_PONG_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_SHUT_ENABLED 1
#define TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD_ENABLED 1
#define TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE_ENABLED 1
#define TRACE_MIGRATION_THREAD_LOW_PENDING_ENABLED 1
#define TRACE_MIGRATE_STATE_TOO_BIG_ENABLED 1
#define TRACE_MIGRATE_TRANSFERRED_ENABLED 1
#define TRACE_PROCESS_INCOMING_MIGRATION_CO_END_ENABLED 1
#define TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_PIN_STATE_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC_ENABLED 1
#define TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_ENABLED 1
#define TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_B_ENABLED 1
#define TRACE_QEMU_RDMA_CLEANUP_DISCONNECT_ENABLED 1
#define TRACE_QEMU_RDMA_CLEANUP_WAITING_FOR_DISCONNECT_ENABLED 1
#define TRACE_QEMU_RDMA_CLOSE_ENABLED 1
#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED_ENABLED 1
#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME_ENABLED 1
#define TRACE_QEMU_RDMA_DEST_INIT_TRYING_ENABLED 1
#define TRACE_QEMU_RDMA_DUMP_GID_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED_ENABLED 1
#define TRACE_QEMU_RDMA_FILL_ENABLED 1
#define TRACE_QEMU_RDMA_INIT_RAM_BLOCKS_ENABLED 1
#define TRACE_QEMU_RDMA_POLL_RECV_ENABLED 1
#define TRACE_QEMU_RDMA_POLL_WRITE_ENABLED 1
#define TRACE_QEMU_RDMA_POLL_OTHER_ENABLED 1
#define TRACE_QEMU_RDMA_POST_SEND_CONTROL_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_START_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_STOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM_ENABLED 1
#define TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING_ENABLED 1
#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND_ENABLED 1
#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_FLUSH_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_BLOCK_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_POST_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_SENDREG_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_TOP_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_ZERO_ENABLED 1
#define TRACE_RDMA_ADD_BLOCK_ENABLED 1
#define TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE_ENABLED 1
#define TRACE_RDMA_DELETE_BLOCK_ENABLED 1
#define TRACE_RDMA_START_INCOMING_MIGRATION_ENABLED 1
#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT_ENABLED 1
#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN_ENABLED 1
#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT_ENABLED 1
#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT_ENABLED 1
#define TRACE_POSTCOPY_DISCARD_SEND_FINISH_ENABLED 1
#define TRACE_POSTCOPY_DISCARD_SEND_RANGE_ENABLED 1
#define TRACE_POSTCOPY_RAM_DISCARD_RANGE_ENABLED 1
#define TRACE_POSTCOPY_CLEANUP_RANGE_ENABLED 1
#define TRACE_POSTCOPY_INIT_RANGE_ENABLED 1
#define TRACE_POSTCOPY_NHP_RANGE_ENABLED 1
#define TRACE_POSTCOPY_PLACE_PAGE_ENABLED 1
#define TRACE_POSTCOPY_PLACE_PAGE_ZERO_ENABLED 1
#define TRACE_POSTCOPY_RAM_ENABLE_NOTIFY_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN_ENABLED 1
#define TRACE_KVM_IOCTL_ENABLED 1
#define TRACE_KVM_VM_IOCTL_ENABLED 1
#define TRACE_KVM_VCPU_IOCTL_ENABLED 1
#define TRACE_KVM_RUN_EXIT_ENABLED 1
#define TRACE_KVM_DEVICE_IOCTL_ENABLED 1
#define TRACE_KVM_FAILED_REG_GET_ENABLED 1
#define TRACE_KVM_FAILED_REG_SET_ENABLED 1
#define TRACE_KVM_FAILED_SPR_SET_ENABLED 1
#define TRACE_KVM_FAILED_SPR_GET_ENABLED 1
#define TRACE_EXEC_TB_ENABLED 0
#define TRACE_EXEC_TB_NOCACHE_ENABLED 0
#define TRACE_EXEC_TB_EXIT_ENABLED 0
#define TRACE_TRANSLATE_BLOCK_ENABLED 1
#define TRACE_MEMORY_REGION_OPS_READ_ENABLED 1
#define TRACE_MEMORY_REGION_OPS_WRITE_ENABLED 1
#define TRACE_MEMORY_REGION_SUBPAGE_READ_ENABLED 1
#define TRACE_MEMORY_REGION_SUBPAGE_WRITE_ENABLED 1
#define TRACE_MEMORY_REGION_TB_READ_ENABLED 1
#define TRACE_MEMORY_REGION_TB_WRITE_ENABLED 1
#define TRACE_OBJECT_DYNAMIC_CAST_ASSERT_ENABLED 1
#define TRACE_OBJECT_CLASS_DYNAMIC_CAST_ASSERT_ENABLED 1
#define TRACE_XEN_PV_MMIO_READ_ENABLED 1
#define TRACE_XEN_PV_MMIO_WRITE_ENABLED 1
#define TRACE_PCI_CFG_READ_ENABLED 1
#define TRACE_PCI_CFG_WRITE_ENABLED 1
#define TRACE_VFIO_INTX_INTERRUPT_ENABLED 1
#define TRACE_VFIO_INTX_EOI_ENABLED 1
#define TRACE_VFIO_INTX_ENABLE_KVM_ENABLED 1
#define TRACE_VFIO_INTX_DISABLE_KVM_ENABLED 1
#define TRACE_VFIO_INTX_UPDATE_ENABLED 1
#define TRACE_VFIO_INTX_ENABLE_ENABLED 1
#define TRACE_VFIO_INTX_DISABLE_ENABLED 1
#define TRACE_VFIO_MSI_INTERRUPT_ENABLED 1
#define TRACE_VFIO_MSIX_VECTOR_DO_USE_ENABLED 1
#define TRACE_VFIO_MSIX_VECTOR_RELEASE_ENABLED 1
#define TRACE_VFIO_MSIX_ENABLE_ENABLED 1
#define TRACE_VFIO_MSIX_PBA_DISABLE_ENABLED 1
#define TRACE_VFIO_MSIX_PBA_ENABLE_ENABLED 1
#define TRACE_VFIO_MSIX_DISABLE_ENABLED 1
#define TRACE_VFIO_MSIX_FIXUP_ENABLED 1
#define TRACE_VFIO_MSI_ENABLE_ENABLED 1
#define TRACE_VFIO_MSI_DISABLE_ENABLED 1
#define TRACE_VFIO_PCI_LOAD_ROM_ENABLED 1
#define TRACE_VFIO_ROM_READ_ENABLED 1
#define TRACE_VFIO_PCI_SIZE_ROM_ENABLED 1
#define TRACE_VFIO_VGA_WRITE_ENABLED 1
#define TRACE_VFIO_VGA_READ_ENABLED 1
#define TRACE_VFIO_PCI_READ_CONFIG_ENABLED 1
#define TRACE_VFIO_PCI_WRITE_CONFIG_ENABLED 1
#define TRACE_VFIO_MSI_SETUP_ENABLED 1
#define TRACE_VFIO_MSIX_EARLY_SETUP_ENABLED 1
#define TRACE_VFIO_CHECK_PCIE_FLR_ENABLED 1
#define TRACE_VFIO_CHECK_PM_RESET_ENABLED 1
#define TRACE_VFIO_CHECK_AF_FLR_ENABLED 1
#define TRACE_VFIO_PCI_HOT_RESET_ENABLED 1
#define TRACE_VFIO_PCI_HOT_RESET_HAS_DEP_DEVICES_ENABLED 1
#define TRACE_VFIO_PCI_HOT_RESET_DEP_DEVICES_ENABLED 1
#define TRACE_VFIO_PCI_HOT_RESET_RESULT_ENABLED 1
#define TRACE_VFIO_POPULATE_DEVICE_CONFIG_ENABLED 1
#define TRACE_VFIO_POPULATE_DEVICE_GET_IRQ_INFO_FAILURE_ENABLED 1
#define TRACE_VFIO_INITFN_ENABLED 1
#define TRACE_VFIO_PCI_RESET_ENABLED 1
#define TRACE_VFIO_PCI_RESET_FLR_ENABLED 1
#define TRACE_VFIO_PCI_RESET_PM_ENABLED 1
#define TRACE_VFIO_PCI_EMULATED_VENDOR_ID_ENABLED 1
#define TRACE_VFIO_PCI_EMULATED_DEVICE_ID_ENABLED 1
#define TRACE_VFIO_PCI_EMULATED_SUB_VENDOR_ID_ENABLED 1
#define TRACE_VFIO_PCI_EMULATED_SUB_DEVICE_ID_ENABLED 1
#define TRACE_VFIO_QUIRK_ROM_BLACKLISTED_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_WINDOW_ADDRESS_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_WINDOW_DATA_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_MIRROR_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_GENERIC_MIRROR_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_3C3_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_3C3_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BAR4_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BAR2_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_3D0_STATE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_3D0_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_3D0_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_3D0_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_BAR5_STATE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_BAR5_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_BAR0_MSI_ACK_ENABLED 1
#define TRACE_VFIO_QUIRK_NVIDIA_BAR0_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_RTL8168_FAKE_LATCH_ENABLED 1
#define TRACE_VFIO_QUIRK_RTL8168_MSIX_WRITE_ENABLED 1
#define TRACE_VFIO_QUIRK_RTL8168_MSIX_READ_ENABLED 1
#define TRACE_VFIO_QUIRK_RTL8168_PROBE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_SKIPPED_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_NO_SMC_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_TIMEOUT_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_DONE_ENABLED 1
#define TRACE_VFIO_QUIRK_ATI_BONAIRE_RESET_ENABLED 1
#define TRACE_VFIO_REGION_WRITE_ENABLED 1
#define TRACE_VFIO_REGION_READ_ENABLED 1
#define TRACE_VFIO_IOMMU_MAP_NOTIFY_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_ADD_SKIP_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_ADD_IOMMU_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_ADD_RAM_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_DEL_SKIP_ENABLED 1
#define TRACE_VFIO_LISTENER_REGION_DEL_ENABLED 1
#define TRACE_VFIO_DISCONNECT_CONTAINER_ENABLED 1
#define TRACE_VFIO_PUT_GROUP_ENABLED 1
#define TRACE_VFIO_GET_DEVICE_ENABLED 1
#define TRACE_VFIO_PUT_BASE_DEVICE_ENABLED 1
#define TRACE_VFIO_REGION_SETUP_ENABLED 1
#define TRACE_VFIO_REGION_MMAP_FAULT_ENABLED 1
#define TRACE_VFIO_REGION_MMAP_ENABLED 1
#define TRACE_VFIO_REGION_EXIT_ENABLED 1
#define TRACE_VFIO_REGION_FINALIZE_ENABLED 1
#define TRACE_VFIO_REGION_MMAPS_SET_ENABLED_ENABLED 1
#define TRACE_VFIO_PLATFORM_BASE_DEVICE_INIT_ENABLED 1
#define TRACE_VFIO_PLATFORM_REALIZE_ENABLED 1
#define TRACE_VFIO_PLATFORM_EOI_ENABLED 1
#define TRACE_VFIO_PLATFORM_INTP_MMAP_ENABLE_ENABLED 1
#define TRACE_VFIO_PLATFORM_INTP_INTERRUPT_ENABLED 1
#define TRACE_VFIO_PLATFORM_INTP_INJECT_PENDING_LOCKHELD_ENABLED 1
#define TRACE_VFIO_PLATFORM_POPULATE_INTERRUPTS_ENABLED 1
#define TRACE_VFIO_INTP_INTERRUPT_SET_PENDING_ENABLED 1
#define TRACE_VFIO_PLATFORM_START_LEVEL_IRQFD_INJECTION_ENABLED 1
#define TRACE_VFIO_PLATFORM_START_EDGE_IRQFD_INJECTION_ENABLED 1
#define TRACE_MHP_ACPI_INVALID_SLOT_SELECTED_ENABLED 1
#define TRACE_MHP_ACPI_EJECTING_INVALID_SLOT_ENABLED 1
#define TRACE_MHP_ACPI_READ_ADDR_LO_ENABLED 1
#define TRACE_MHP_ACPI_READ_ADDR_HI_ENABLED 1
#define TRACE_MHP_ACPI_READ_SIZE_LO_ENABLED 1
#define TRACE_MHP_ACPI_READ_SIZE_HI_ENABLED 1
#define TRACE_MHP_ACPI_READ_PXM_ENABLED 1
#define TRACE_MHP_ACPI_READ_FLAGS_ENABLED 1
#define TRACE_MHP_ACPI_WRITE_SLOT_ENABLED 1
#define TRACE_MHP_ACPI_WRITE_OST_EV_ENABLED 1
#define TRACE_MHP_ACPI_WRITE_OST_STATUS_ENABLED 1
#define TRACE_MHP_ACPI_CLEAR_INSERT_EVT_ENABLED 1
#define TRACE_MHP_ACPI_CLEAR_REMOVE_EVT_ENABLED 1
#define TRACE_MHP_ACPI_PC_DIMM_DELETED_ENABLED 1
#define TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED_ENABLED 1
#define TRACE_MHP_PC_DIMM_ASSIGNED_SLOT_ENABLED 1
#define TRACE_MHP_PC_DIMM_ASSIGNED_ADDRESS_ENABLED 1
#define TRACE_KVM_ENABLE_CMMA_ENABLED 1
#define TRACE_KVM_CLEAR_CMMA_ENABLED 1
#define TRACE_KVM_FAILED_CPU_STATE_SET_ENABLED 1
#define TRACE_KVM_SIGP_FINISHED_ENABLED 1
#define TRACE_I8257_UNREGISTERED_DMA_ENABLED 1
#define TRACE_CPU_SET_STATE_ENABLED 1
#define TRACE_CPU_HALT_ENABLED 1
#define TRACE_CPU_UNHALT_ENABLED 1
#define TRACE_VIRT_ACPI_SETUP_ENABLED 1
#define TRACE_ALPHA_PCI_IACK_WRITE_ENABLED 1
#define TRACE_ALSA_REVENTS_ENABLED 1
#define TRACE_ALSA_POLLOUT_ENABLED 1
#define TRACE_ALSA_SET_HANDLER_ENABLED 1
#define TRACE_ALSA_WROTE_ZERO_ENABLED 1
#define TRACE_ALSA_READ_ZERO_ENABLED 1
#define TRACE_ALSA_XRUN_OUT_ENABLED 1
#define TRACE_ALSA_XRUN_IN_ENABLED 1
#define TRACE_ALSA_RESUME_OUT_ENABLED 1
#define TRACE_ALSA_RESUME_IN_ENABLED 1
#define TRACE_ALSA_NO_FRAMES_ENABLED 1
#define TRACE_OSS_VERSION_ENABLED 1
#define TRACE_OSS_INVALID_AVAILABLE_SIZE_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_LOAD_DH_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_GET_PATH_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_ANON_LOAD_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_BASIC_CONSTRAINTS_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_USAGE_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_CHECK_KEY_PURPOSE_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_ENABLED 1
#define TRACE_QCRYPTO_TLS_CREDS_X509_LOAD_CERT_LIST_ENABLED 1
#define TRACE_QCRYPTO_TLS_SESSION_NEW_ENABLED 1
#define TRACE_VHOST_USER_EVENT_ENABLED 1
#define TRACE_USER_SETUP_FRAME_ENABLED 1
#define TRACE_USER_SETUP_RT_FRAME_ENABLED 1
#define TRACE_USER_DO_RT_SIGRETURN_ENABLED 1
#define TRACE_USER_DO_SIGRETURN_ENABLED 1
#define TRACE_USER_FORCE_SIG_ENABLED 1
#define TRACE_USER_HANDLE_SIGNAL_ENABLED 1
#define TRACE_USER_HOST_SIGNAL_ENABLED 1
#define TRACE_USER_QUEUE_SIGNAL_ENABLED 1
#define TRACE_USER_S390X_RESTORE_SIGREGS_ENABLED 1
#define TRACE_QIO_TASK_NEW_ENABLED 1
#define TRACE_QIO_TASK_COMPLETE_ENABLED 1
#define TRACE_QIO_TASK_ABORT_ENABLED 1
#define TRACE_QIO_TASK_THREAD_START_ENABLED 1
#define TRACE_QIO_TASK_THREAD_RUN_ENABLED 1
#define TRACE_QIO_TASK_THREAD_EXIT_ENABLED 1
#define TRACE_QIO_TASK_THREAD_RESULT_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_NEW_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_NEW_FD_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_FILE_NEW_FD_ENABLED 1
#define TRACE_QIO_CHANNEL_FILE_NEW_PATH_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_NEW_CLIENT_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_NEW_SERVER_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_NEW_PID_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_ABORT_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_WAIT_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_ENABLE_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE_ENABLED 1
#define TRACE_ASPEED_TIMER_SET_CTRL2_ENABLED 1
#define TRACE_ASPEED_TIMER_SET_VALUE_ENABLED 1
#define TRACE_ASPEED_TIMER_READ_ENABLED 1
#define TRACE_ASPEED_VIC_SET_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_FIQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_READ_ENABLED 1
#define TRACE_ASPEED_VIC_WRITE_ENABLED 1

static inline void trace_qemu_memalign(size_t alignment, size_t size, void * ptr)
{
}

static inline void trace_qemu_anon_ram_alloc(size_t size, void * ptr)
{
}

static inline void trace_qemu_vfree(void * ptr)
{
}

static inline void trace_qemu_anon_ram_free(void * ptr, size_t size)
{
}

static inline void trace_virtqueue_fill(void * vq, const void * elem, unsigned int len, unsigned int idx)
{
}

static inline void trace_virtqueue_flush(void * vq, unsigned int count)
{
}

static inline void trace_virtqueue_pop(void * vq, void * elem, unsigned int in_num, unsigned int out_num)
{
}

static inline void trace_virtio_queue_notify(void * vdev, int n, void * vq)
{
}

static inline void trace_virtio_irq(void * vq)
{
}

static inline void trace_virtio_notify(void * vdev, void * vq)
{
}

static inline void trace_virtio_set_status(void * vdev, uint8_t val)
{
}

static inline void trace_virtio_rng_guest_not_ready(void * rng)
{
}

static inline void trace_virtio_rng_pushed(void * rng, size_t len)
{
}

static inline void trace_virtio_rng_request(void * rng, size_t size, unsigned quota)
{
}

static inline void trace_virtio_serial_send_control_event(unsigned int port, uint16_t event, uint16_t value)
{
}

static inline void trace_virtio_serial_throttle_port(unsigned int port, bool throttle)
{
}

static inline void trace_virtio_serial_handle_control_message(uint16_t event, uint16_t value)
{
}

static inline void trace_virtio_serial_handle_control_message_port(unsigned int port)
{
}

static inline void trace_virtio_console_flush_buf(unsigned int port, size_t len, ssize_t ret)
{
}

static inline void trace_virtio_console_chr_read(unsigned int port, int size)
{
}

static inline void trace_virtio_console_chr_event(unsigned int port, int event)
{
}

static inline void trace_bdrv_open_common(void * bs, const char * filename, int flags, const char * format_name)
{
}

static inline void trace_bdrv_lock_medium(void * bs, bool locked)
{
}

static inline void trace_multiwrite_cb(void * mcb, int ret)
{
}

static inline void trace_bdrv_aio_multiwrite(void * mcb, int num_callbacks, int num_reqs)
{
}

static inline void trace_bdrv_aio_discard(void * bs, int64_t sector_num, int nb_sectors, void * opaque)
{
}

static inline void trace_bdrv_aio_flush(void * bs, void * opaque)
{
}

static inline void trace_bdrv_aio_readv(void * bs, int64_t sector_num, int nb_sectors, void * opaque)
{
}

static inline void trace_bdrv_aio_writev(void * bs, int64_t sector_num, int nb_sectors, void * opaque)
{
}

static inline void trace_bdrv_aio_write_zeroes(void * bs, int64_t sector_num, int nb_sectors, int flags, void * opaque)
{
}

static inline void trace_bdrv_co_readv(void * bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_copy_on_readv(void * bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_readv_no_serialising(void * bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_writev(void * bs, int64_t sector_num, int nb_sector)
{
}

static inline void trace_bdrv_co_write_zeroes(void * bs, int64_t sector_num, int nb_sector, int flags)
{
}

static inline void trace_bdrv_co_io_em(void * bs, int64_t sector_num, int nb_sectors, int is_write, void * acb)
{
}

static inline void trace_bdrv_co_do_copy_on_readv(void * bs, int64_t sector_num, int nb_sectors, int64_t cluster_sector_num, int cluster_nb_sectors)
{
}

static inline void trace_stream_one_iteration(void * s, int64_t sector_num, int nb_sectors, int is_allocated)
{
}

static inline void trace_stream_start(void * bs, void * base, void * s, void * co, void * opaque)
{
}

static inline void trace_commit_one_iteration(void * s, int64_t sector_num, int nb_sectors, int is_allocated)
{
}

static inline void trace_commit_start(void * bs, void * base, void * top, void * s, void * co, void * opaque)
{
}

static inline void trace_mirror_start(void * bs, void * s, void * co, void * opaque)
{
}

static inline void trace_mirror_restart_iter(void * s, int64_t cnt)
{
}

static inline void trace_mirror_before_flush(void * s)
{
}

static inline void trace_mirror_before_drain(void * s, int64_t cnt)
{
}

static inline void trace_mirror_before_sleep(void * s, int64_t cnt, int synced, uint64_t delay_ns)
{
}

static inline void trace_mirror_one_iteration(void * s, int64_t sector_num, int nb_sectors)
{
}

static inline void trace_mirror_iteration_done(void * s, int64_t sector_num, int nb_sectors, int ret)
{
}

static inline void trace_mirror_yield(void * s, int64_t cnt, int buf_free_count, int in_flight)
{
}

static inline void trace_mirror_yield_in_flight(void * s, int64_t sector_num, int in_flight)
{
}

static inline void trace_mirror_yield_buf_busy(void * s, int nb_chunks, int in_flight)
{
}

static inline void trace_mirror_break_buf_busy(void * s, int nb_chunks, int in_flight)
{
}

static inline void trace_backup_do_cow_enter(void * job, int64_t start, int64_t sector_num, int nb_sectors)
{
}

static inline void trace_backup_do_cow_return(void * job, int64_t sector_num, int nb_sectors, int ret)
{
}

static inline void trace_backup_do_cow_skip(void * job, int64_t start)
{
}

static inline void trace_backup_do_cow_process(void * job, int64_t start)
{
}

static inline void trace_backup_do_cow_read_fail(void * job, int64_t start, int ret)
{
}

static inline void trace_backup_do_cow_write_fail(void * job, int64_t start, int ret)
{
}

static inline void trace_qmp_block_job_cancel(void * job)
{
}

static inline void trace_qmp_block_job_pause(void * job)
{
}

static inline void trace_qmp_block_job_resume(void * job)
{
}

static inline void trace_qmp_block_job_complete(void * job)
{
}

static inline void trace_block_job_cb(void * bs, void * job, int ret)
{
}

static inline void trace_qmp_block_stream(void * bs, void * job)
{
}

static inline void trace_virtio_blk_req_complete(void * req, int status)
{
}

static inline void trace_virtio_blk_rw_complete(void * req, int ret)
{
}

static inline void trace_virtio_blk_handle_write(void * req, uint64_t sector, size_t nsectors)
{
}

static inline void trace_virtio_blk_handle_read(void * req, uint64_t sector, size_t nsectors)
{
}

static inline void trace_virtio_blk_submit_multireq(void * mrb, int start, int num_reqs, uint64_t sector, size_t nsectors, bool is_write)
{
}

static inline void trace_virtio_blk_data_plane_start(void * s)
{
}

static inline void trace_virtio_blk_data_plane_stop(void * s)
{
}

static inline void trace_virtio_blk_data_plane_process_request(void * s, unsigned int out_num, unsigned int in_num, unsigned int head)
{
}

static inline void trace_thread_pool_submit(void * pool, void * req, void * opaque)
{
}

static inline void trace_thread_pool_complete(void * pool, void * req, void * opaque, int ret)
{
}

static inline void trace_thread_pool_cancel(void * req, void * opaque)
{
}

static inline void trace_paio_submit_co(int64_t sector_num, int nb_sectors, int type)
{
}

static inline void trace_paio_submit(void * acb, void * opaque, int64_t sector_num, int nb_sectors, int type)
{
}

static inline void trace_cpu_in(unsigned int addr, char size, unsigned int val)
{
}

static inline void trace_cpu_out(unsigned int addr, char size, unsigned int val)
{
}

static inline void trace_balloon_event(void * opaque, unsigned long addr)
{
}

static inline void trace_virtio_balloon_handle_output(const char * name, uint64_t gpa)
{
}

static inline void trace_virtio_balloon_get_config(uint32_t num_pages, uint32_t actual)
{
}

static inline void trace_virtio_balloon_set_config(uint32_t actual, uint32_t oldactual)
{
}

static inline void trace_virtio_balloon_to_target(uint64_t target, uint32_t num_pages)
{
}

static inline void trace_cpu_set_apic_base(uint64_t val)
{
}

static inline void trace_cpu_get_apic_base(uint64_t val)
{
}

static inline void trace_apic_report_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_get_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_local_deliver(int vector, uint32_t lvt)
{
}

static inline void trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
}

static inline void trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
}

static inline void trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_cs4231_mem_readl_dreg(uint32_t reg, uint32_t ret)
{
}

static inline void trace_cs4231_mem_readl_reg(uint32_t reg, uint32_t ret)
{
}

static inline void trace_cs4231_mem_writel_reg(uint32_t reg, uint32_t old, uint32_t val)
{
}

static inline void trace_cs4231_mem_writel_dreg(uint32_t reg, uint32_t old, uint32_t val)
{
}

static inline void trace_nvram_read(uint32_t addr, uint32_t ret)
{
}

static inline void trace_nvram_write(uint32_t addr, uint32_t old, uint32_t val)
{
}

static inline void trace_ecc_mem_writel_mer(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_mdr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_mfsr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_vcr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_dr(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_ecr0(uint32_t val)
{
}

static inline void trace_ecc_mem_writel_ecr1(uint32_t val)
{
}

static inline void trace_ecc_mem_readl_mer(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mdr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mfsr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_vcr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mfar0(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_mfar1(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_dr(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_ecr0(uint32_t ret)
{
}

static inline void trace_ecc_mem_readl_ecr1(uint32_t ret)
{
}

static inline void trace_ecc_diag_mem_writeb(uint64_t addr, uint32_t val)
{
}

static inline void trace_ecc_diag_mem_readb(uint64_t addr, uint32_t ret)
{
}

static inline void trace_fw_cfg_select(void * s, uint16_t key, int ret)
{
}

static inline void trace_fw_cfg_read(void * s, uint64_t ret)
{
}

static inline void trace_fw_cfg_add_file(void * s, int index, char * name, size_t len)
{
}

static inline void trace_hd_geometry_lchs_guess(void * blk, int cyls, int heads, int secs)
{
}

static inline void trace_hd_geometry_guess(void * blk, uint32_t cyls, uint32_t heads, uint32_t secs, int trans)
{
}

static inline void trace_jazz_led_read(uint64_t addr, uint8_t val)
{
}

static inline void trace_jazz_led_write(uint64_t addr, uint8_t new)
{
}

static inline void trace_xenfb_mouse_event(void * opaque, int dx, int dy, int dz, int button_state, int abs_pointer_wanted)
{
}

static inline void trace_xenfb_input_connected(void * xendev, int abs_pointer_wanted)
{
}

static inline void trace_lance_mem_readw(uint64_t addr, uint32_t ret)
{
}

static inline void trace_lance_mem_writew(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
}

static inline void trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
}

static inline void trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
}

static inline void trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
}

static inline void trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
}

static inline void trace_ps2_put_keycode(void * opaque, int keycode)
{
}

static inline void trace_ps2_read_data(void * opaque)
{
}

static inline void trace_ps2_set_ledstate(void * s, int ledstate)
{
}

static inline void trace_ps2_reset_keyboard(void * s)
{
}

static inline void trace_ps2_write_keyboard(void * opaque, int val)
{
}

static inline void trace_ps2_keyboard_set_translation(void * opaque, int mode)
{
}

static inline void trace_ps2_mouse_send_packet(void * s, int dx1, int dy1, int dz1, int b)
{
}

static inline void trace_ps2_mouse_event_disabled(void * opaque, int dx, int dy, int dz, int buttons_state, int mouse_dx, int mouse_dy, int mouse_dz)
{
}

static inline void trace_ps2_mouse_event(void * opaque, int dx, int dy, int dz, int buttons_state, int mouse_dx, int mouse_dy, int mouse_dz)
{
}

static inline void trace_ps2_mouse_fake_event(void * opaque)
{
}

static inline void trace_ps2_write_mouse(void * opaque, int val)
{
}

static inline void trace_ps2_kbd_reset(void * opaque)
{
}

static inline void trace_ps2_mouse_reset(void * opaque)
{
}

static inline void trace_ps2_kbd_init(void * s)
{
}

static inline void trace_ps2_mouse_init(void * s)
{
}

static inline void trace_slavio_misc_update_irq_raise(void)
{
}

static inline void trace_slavio_misc_update_irq_lower(void)
{
}

static inline void trace_slavio_set_power_fail(int power_failing, uint8_t config)
{
}

static inline void trace_slavio_cfg_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_cfg_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_diag_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_diag_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_mdm_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_mdm_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_aux1_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_aux1_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_aux2_mem_writeb(uint32_t val)
{
}

static inline void trace_slavio_aux2_mem_readb(uint32_t ret)
{
}

static inline void trace_apc_mem_writeb(uint32_t val)
{
}

static inline void trace_apc_mem_readb(uint32_t ret)
{
}

static inline void trace_slavio_sysctrl_mem_writel(uint32_t val)
{
}

static inline void trace_slavio_sysctrl_mem_readl(uint32_t ret)
{
}

static inline void trace_slavio_led_mem_writew(uint32_t val)
{
}

static inline void trace_slavio_led_mem_readw(uint32_t ret)
{
}

static inline void trace_slavio_timer_get_out(uint64_t limit, uint32_t counthigh, uint32_t count)
{
}

static inline void trace_slavio_timer_irq(uint32_t counthigh, uint32_t count)
{
}

static inline void trace_slavio_timer_mem_readl_invalid(uint64_t addr)
{
}

static inline void trace_slavio_timer_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_timer_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_timer_mem_writel_limit(unsigned int timer_index, uint64_t count)
{
}

static inline void trace_slavio_timer_mem_writel_counter_invalid(void)
{
}

static inline void trace_slavio_timer_mem_writel_status_start(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_status_stop(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_mode_user(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_mode_counter(unsigned int timer_index)
{
}

static inline void trace_slavio_timer_mem_writel_mode_invalid(void)
{
}

static inline void trace_slavio_timer_mem_writel_invalid(uint64_t addr)
{
}

static inline void trace_jazzio_read(uint64_t addr, uint32_t ret)
{
}

static inline void trace_jazzio_write(uint64_t addr, uint32_t val)
{
}

static inline void trace_rc4030_read(uint64_t addr, uint32_t ret)
{
}

static inline void trace_rc4030_write(uint64_t addr, uint32_t val)
{
}

static inline void trace_ledma_memory_read(uint64_t addr)
{
}

static inline void trace_ledma_memory_write(uint64_t addr)
{
}

static inline void trace_sparc32_dma_set_irq_raise(void)
{
}

static inline void trace_sparc32_dma_set_irq_lower(void)
{
}

static inline void trace_espdma_memory_read(uint32_t addr)
{
}

static inline void trace_espdma_memory_write(uint32_t addr)
{
}

static inline void trace_sparc32_dma_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_sparc32_dma_mem_writel(uint64_t addr, uint32_t old, uint32_t val)
{
}

static inline void trace_sparc32_dma_enable_raise(void)
{
}

static inline void trace_sparc32_dma_enable_lower(void)
{
}

static inline void trace_sun4m_cpu_interrupt(unsigned int level)
{
}

static inline void trace_sun4m_cpu_reset_interrupt(unsigned int level)
{
}

static inline void trace_sun4m_cpu_set_irq_raise(int level)
{
}

static inline void trace_sun4m_cpu_set_irq_lower(int level)
{
}

static inline void trace_sun4m_iommu_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_sun4m_iommu_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_sun4m_iommu_mem_writel_ctrl(uint64_t iostart)
{
}

static inline void trace_sun4m_iommu_mem_writel_tlbflush(uint32_t val)
{
}

static inline void trace_sun4m_iommu_mem_writel_pgflush(uint32_t val)
{
}

static inline void trace_sun4m_iommu_page_get_flags(uint64_t pa, uint64_t iopte, uint32_t ret)
{
}

static inline void trace_sun4m_iommu_translate_pa(uint64_t addr, uint64_t pa, uint32_t iopte)
{
}

static inline void trace_sun4m_iommu_bad_addr(uint64_t addr)
{
}

static inline void trace_usb_packet_state_change(int bus, const char * port, int ep, void * p, const char * o, const char * n)
{
}

static inline void trace_usb_packet_state_fault(int bus, const char * port, int ep, void * p, const char * o, const char * n)
{
}

static inline void trace_usb_port_claim(int bus, const char * port)
{
}

static inline void trace_usb_port_attach(int bus, const char * port, const char * devspeed, const char * portspeed)
{
}

static inline void trace_usb_port_detach(int bus, const char * port)
{
}

static inline void trace_usb_port_release(int bus, const char * port)
{
}

static inline void trace_usb_ohci_iso_td_read_failed(uint32_t addr)
{
}

static inline void trace_usb_ohci_iso_td_head(uint32_t head, uint32_t tail, uint32_t flags, uint32_t bp, uint32_t next, uint32_t be, uint32_t framenum, uint32_t startframe, uint32_t framecount, int rel_frame_num)
{
}

static inline void trace_usb_ohci_iso_td_head_offset(uint32_t o0, uint32_t o1, uint32_t o2, uint32_t o3, uint32_t o4, uint32_t o5, uint32_t o6, uint32_t o7)
{
}

static inline void trace_usb_ohci_iso_td_relative_frame_number_neg(int rel)
{
}

static inline void trace_usb_ohci_iso_td_relative_frame_number_big(int rel, int count)
{
}

static inline void trace_usb_ohci_iso_td_bad_direction(int dir)
{
}

static inline void trace_usb_ohci_iso_td_bad_bp_be(uint32_t bp, uint32_t be)
{
}

static inline void trace_usb_ohci_iso_td_bad_cc_not_accessed(uint32_t start, uint32_t next)
{
}

static inline void trace_usb_ohci_iso_td_bad_cc_overrun(uint32_t start, uint32_t next)
{
}

static inline void trace_usb_ohci_iso_td_so(uint32_t so, uint32_t eo, uint32_t s, uint32_t e, const char * str, ssize_t len, int ret)
{
}

static inline void trace_usb_ohci_iso_td_data_overrun(int ret, ssize_t len)
{
}

static inline void trace_usb_ohci_iso_td_data_underrun(int ret)
{
}

static inline void trace_usb_ohci_iso_td_nak(int ret)
{
}

static inline void trace_usb_ohci_iso_td_bad_response(int ret)
{
}

static inline void trace_usb_ohci_port_attach(int index)
{
}

static inline void trace_usb_ohci_port_detach(int index)
{
}

static inline void trace_usb_ohci_port_wakeup(int index)
{
}

static inline void trace_usb_ohci_port_suspend(int index)
{
}

static inline void trace_usb_ohci_port_reset(int index)
{
}

static inline void trace_usb_ohci_remote_wakeup(const char * s)
{
}

static inline void trace_usb_ohci_reset(const char * s)
{
}

static inline void trace_usb_ohci_start(const char * s)
{
}

static inline void trace_usb_ohci_resume(const char * s)
{
}

static inline void trace_usb_ohci_stop(const char * s)
{
}

static inline void trace_usb_ohci_exit(const char * s)
{
}

static inline void trace_usb_ohci_set_ctl(const char * s, uint32_t new_state)
{
}

static inline void trace_usb_ohci_td_underrun(void)
{
}

static inline void trace_usb_ohci_td_dev_error(void)
{
}

static inline void trace_usb_ohci_td_nak(void)
{
}

static inline void trace_usb_ohci_td_stall(void)
{
}

static inline void trace_usb_ohci_td_babble(void)
{
}

static inline void trace_usb_ohci_td_bad_device_response(int rc)
{
}

static inline void trace_usb_ohci_td_read_error(uint32_t addr)
{
}

static inline void trace_usb_ohci_td_bad_direction(int dir)
{
}

static inline void trace_usb_ohci_td_skip_async(void)
{
}

static inline void trace_usb_ohci_td_pkt_hdr(uint32_t addr, int64_t pktlen, int64_t len, const char * s, int flag_r, uint32_t cbp, uint32_t be)
{
}

static inline void trace_usb_ohci_td_pkt_short(const char * dir, const char * buf)
{
}

static inline void trace_usb_ohci_td_pkt_full(const char * dir, const char * buf)
{
}

static inline void trace_usb_ohci_td_too_many_pending(void)
{
}

static inline void trace_usb_ohci_td_packet_status(int status)
{
}

static inline void trace_usb_ohci_ed_read_error(uint32_t addr)
{
}

static inline void trace_usb_ohci_ed_pkt(uint32_t cur, int h, int c, uint32_t head, uint32_t tail, uint32_t next)
{
}

static inline void trace_usb_ohci_ed_pkt_flags(uint32_t fa, uint32_t en, uint32_t d, int s, int k, int f, uint32_t mps)
{
}

static inline void trace_usb_ohci_hcca_read_error(uint32_t addr)
{
}

static inline void trace_usb_ohci_mem_read_unaligned(uint32_t addr)
{
}

static inline void trace_usb_ohci_mem_read_bad_offset(uint32_t addr)
{
}

static inline void trace_usb_ohci_mem_write_unaligned(uint32_t addr)
{
}

static inline void trace_usb_ohci_mem_write_bad_offset(uint32_t addr)
{
}

static inline void trace_usb_ohci_process_lists(uint32_t head, uint32_t cur)
{
}

static inline void trace_usb_ohci_bus_eof_timer_failed(const char * name)
{
}

static inline void trace_usb_ohci_set_frame_interval(const char * name, uint16_t fi_x, uint16_t fi_u)
{
}

static inline void trace_usb_ohci_hub_power_up(void)
{
}

static inline void trace_usb_ohci_hub_power_down(void)
{
}

static inline void trace_usb_ohci_init_time(int64_t frametime, int64_t bittime)
{
}

static inline void trace_usb_ohci_die(void)
{
}

static inline void trace_usb_ohci_async_complete(void)
{
}

static inline void trace_usb_ehci_reset(void)
{
}

static inline void trace_usb_ehci_unrealize(void)
{
}

static inline void trace_usb_ehci_opreg_read(uint32_t addr, const char * str, uint32_t val)
{
}

static inline void trace_usb_ehci_opreg_write(uint32_t addr, const char * str, uint32_t val)
{
}

static inline void trace_usb_ehci_opreg_change(uint32_t addr, const char * str, uint32_t new, uint32_t old)
{
}

static inline void trace_usb_ehci_portsc_read(uint32_t addr, uint32_t port, uint32_t val)
{
}

static inline void trace_usb_ehci_portsc_write(uint32_t addr, uint32_t port, uint32_t val)
{
}

static inline void trace_usb_ehci_portsc_change(uint32_t addr, uint32_t port, uint32_t new, uint32_t old)
{
}

static inline void trace_usb_ehci_usbsts(const char * sts, int state)
{
}

static inline void trace_usb_ehci_state(const char * schedule, const char * state)
{
}

static inline void trace_usb_ehci_qh_ptrs(void * q, uint32_t addr, uint32_t nxt, uint32_t c_qtd, uint32_t n_qtd, uint32_t a_qtd)
{
}

static inline void trace_usb_ehci_qh_fields(uint32_t addr, int rl, int mplen, int eps, int ep, int devaddr)
{
}

static inline void trace_usb_ehci_qh_bits(uint32_t addr, int c, int h, int dtc, int i)
{
}

static inline void trace_usb_ehci_qtd_ptrs(void * q, uint32_t addr, uint32_t nxt, uint32_t altnext)
{
}

static inline void trace_usb_ehci_qtd_fields(uint32_t addr, int tbytes, int cpage, int cerr, int pid)
{
}

static inline void trace_usb_ehci_qtd_bits(uint32_t addr, int ioc, int active, int halt, int babble, int xacterr)
{
}

static inline void trace_usb_ehci_itd(uint32_t addr, uint32_t nxt, uint32_t mplen, uint32_t mult, uint32_t ep, uint32_t devaddr)
{
}

static inline void trace_usb_ehci_sitd(uint32_t addr, uint32_t nxt, uint32_t active)
{
}

static inline void trace_usb_ehci_port_attach(uint32_t port, const char * owner, const char * device)
{
}

static inline void trace_usb_ehci_port_detach(uint32_t port, const char * owner)
{
}

static inline void trace_usb_ehci_port_reset(uint32_t port, int enable)
{
}

static inline void trace_usb_ehci_port_suspend(uint32_t port)
{
}

static inline void trace_usb_ehci_port_wakeup(uint32_t port)
{
}

static inline void trace_usb_ehci_port_resume(uint32_t port)
{
}

static inline void trace_usb_ehci_queue_action(void * q, const char * action)
{
}

static inline void trace_usb_ehci_packet_action(void * q, void * p, const char * action)
{
}

static inline void trace_usb_ehci_irq(uint32_t level, uint32_t frindex, uint32_t sts, uint32_t mask)
{
}

static inline void trace_usb_ehci_guest_bug(const char * reason)
{
}

static inline void trace_usb_ehci_doorbell_ring(void)
{
}

static inline void trace_usb_ehci_doorbell_ack(void)
{
}

static inline void trace_usb_ehci_dma_error(void)
{
}

static inline void trace_usb_uhci_reset(void)
{
}

static inline void trace_usb_uhci_exit(void)
{
}

static inline void trace_usb_uhci_schedule_start(void)
{
}

static inline void trace_usb_uhci_schedule_stop(void)
{
}

static inline void trace_usb_uhci_frame_start(uint32_t num)
{
}

static inline void trace_usb_uhci_frame_stop_bandwidth(void)
{
}

static inline void trace_usb_uhci_frame_loop_stop_idle(void)
{
}

static inline void trace_usb_uhci_frame_loop_continue(void)
{
}

static inline void trace_usb_uhci_mmio_readw(uint32_t addr, uint32_t val)
{
}

static inline void trace_usb_uhci_mmio_writew(uint32_t addr, uint32_t val)
{
}

static inline void trace_usb_uhci_queue_add(uint32_t token)
{
}

static inline void trace_usb_uhci_queue_del(uint32_t token, const char * reason)
{
}

static inline void trace_usb_uhci_packet_add(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_link_async(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_unlink_async(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_cancel(uint32_t token, uint32_t addr, int done)
{
}

static inline void trace_usb_uhci_packet_complete_success(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_complete_shortxfer(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_complete_stall(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_complete_babble(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_complete_error(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_packet_del(uint32_t token, uint32_t addr)
{
}

static inline void trace_usb_uhci_qh_load(uint32_t qh)
{
}

static inline void trace_usb_uhci_td_load(uint32_t qh, uint32_t td, uint32_t ctrl, uint32_t token)
{
}

static inline void trace_usb_uhci_td_queue(uint32_t td, uint32_t ctrl, uint32_t token)
{
}

static inline void trace_usb_uhci_td_nextqh(uint32_t qh, uint32_t td)
{
}

static inline void trace_usb_uhci_td_async(uint32_t qh, uint32_t td)
{
}

static inline void trace_usb_uhci_td_complete(uint32_t qh, uint32_t td)
{
}

static inline void trace_usb_xhci_reset(void)
{
}

static inline void trace_usb_xhci_exit(void)
{
}

static inline void trace_usb_xhci_run(void)
{
}

static inline void trace_usb_xhci_stop(void)
{
}

static inline void trace_usb_xhci_cap_read(uint32_t off, uint32_t val)
{
}

static inline void trace_usb_xhci_oper_read(uint32_t off, uint32_t val)
{
}

static inline void trace_usb_xhci_port_read(uint32_t port, uint32_t off, uint32_t val)
{
}

static inline void trace_usb_xhci_runtime_read(uint32_t off, uint32_t val)
{
}

static inline void trace_usb_xhci_doorbell_read(uint32_t off, uint32_t val)
{
}

static inline void trace_usb_xhci_oper_write(uint32_t off, uint32_t val)
{
}

static inline void trace_usb_xhci_port_write(uint32_t port, uint32_t off, uint32_t val)
{
}

static inline void trace_usb_xhci_runtime_write(uint32_t off, uint32_t val)
{
}

static inline void trace_usb_xhci_doorbell_write(uint32_t off, uint32_t val)
{
}

static inline void trace_usb_xhci_irq_intx(uint32_t level)
{
}

static inline void trace_usb_xhci_irq_msi(uint32_t nr)
{
}

static inline void trace_usb_xhci_irq_msix(uint32_t nr)
{
}

static inline void trace_usb_xhci_irq_msix_use(uint32_t nr)
{
}

static inline void trace_usb_xhci_irq_msix_unuse(uint32_t nr)
{
}

static inline void trace_usb_xhci_queue_event(uint32_t vector, uint32_t idx, const char * trb, const char * evt, uint64_t param, uint32_t status, uint32_t control)
{
}

static inline void trace_usb_xhci_fetch_trb(uint64_t addr, const char * name, uint64_t param, uint32_t status, uint32_t control)
{
}

static inline void trace_usb_xhci_port_reset(uint32_t port, bool warm)
{
}

static inline void trace_usb_xhci_port_link(uint32_t port, uint32_t pls)
{
}

static inline void trace_usb_xhci_port_notify(uint32_t port, uint32_t pls)
{
}

static inline void trace_usb_xhci_slot_enable(uint32_t slotid)
{
}

static inline void trace_usb_xhci_slot_disable(uint32_t slotid)
{
}

static inline void trace_usb_xhci_slot_address(uint32_t slotid, const char * port)
{
}

static inline void trace_usb_xhci_slot_configure(uint32_t slotid)
{
}

static inline void trace_usb_xhci_slot_evaluate(uint32_t slotid)
{
}

static inline void trace_usb_xhci_slot_reset(uint32_t slotid)
{
}

static inline void trace_usb_xhci_ep_enable(uint32_t slotid, uint32_t epid)
{
}

static inline void trace_usb_xhci_ep_disable(uint32_t slotid, uint32_t epid)
{
}

static inline void trace_usb_xhci_ep_set_dequeue(uint32_t slotid, uint32_t epid, uint32_t streamid, uint64_t param)
{
}

static inline void trace_usb_xhci_ep_kick(uint32_t slotid, uint32_t epid, uint32_t streamid)
{
}

static inline void trace_usb_xhci_ep_stop(uint32_t slotid, uint32_t epid)
{
}

static inline void trace_usb_xhci_ep_reset(uint32_t slotid, uint32_t epid)
{
}

static inline void trace_usb_xhci_ep_state(uint32_t slotid, uint32_t epid, const char * os, const char * ns)
{
}

static inline void trace_usb_xhci_xfer_start(void * xfer, uint32_t slotid, uint32_t epid, uint32_t streamid)
{
}

static inline void trace_usb_xhci_xfer_async(void * xfer)
{
}

static inline void trace_usb_xhci_xfer_nak(void * xfer)
{
}

static inline void trace_usb_xhci_xfer_retry(void * xfer)
{
}

static inline void trace_usb_xhci_xfer_success(void * xfer, uint32_t bytes)
{
}

static inline void trace_usb_xhci_xfer_error(void * xfer, uint32_t ret)
{
}

static inline void trace_usb_xhci_unimplemented(const char * item, int nr)
{
}

static inline void trace_usb_desc_device(int addr, int len, int ret)
{
}

static inline void trace_usb_desc_device_qualifier(int addr, int len, int ret)
{
}

static inline void trace_usb_desc_config(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_desc_other_speed_config(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_desc_string(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_desc_bos(int addr, int len, int ret)
{
}

static inline void trace_usb_desc_msos(int addr, int index, int len, int ret)
{
}

static inline void trace_usb_set_addr(int addr)
{
}

static inline void trace_usb_set_config(int addr, int config, int ret)
{
}

static inline void trace_usb_set_interface(int addr, int iface, int alt, int ret)
{
}

static inline void trace_usb_clear_device_feature(int addr, int feature, int ret)
{
}

static inline void trace_usb_set_device_feature(int addr, int feature, int ret)
{
}

static inline void trace_usb_hub_reset(int addr)
{
}

static inline void trace_usb_hub_control(int addr, int request, int value, int index, int length)
{
}

static inline void trace_usb_hub_get_port_status(int addr, int nr, int status, int changed)
{
}

static inline void trace_usb_hub_set_port_feature(int addr, int nr, const char * f)
{
}

static inline void trace_usb_hub_clear_port_feature(int addr, int nr, const char * f)
{
}

static inline void trace_usb_hub_attach(int addr, int nr)
{
}

static inline void trace_usb_hub_detach(int addr, int nr)
{
}

static inline void trace_usb_hub_status_report(int addr, int status)
{
}

static inline void trace_usb_uas_reset(int addr)
{
}

static inline void trace_usb_uas_command(int addr, uint16_t tag, int lun, uint32_t lun64_1, uint32_t lun64_2)
{
}

static inline void trace_usb_uas_response(int addr, uint16_t tag, uint8_t code)
{
}

static inline void trace_usb_uas_sense(int addr, uint16_t tag, uint8_t status)
{
}

static inline void trace_usb_uas_read_ready(int addr, uint16_t tag)
{
}

static inline void trace_usb_uas_write_ready(int addr, uint16_t tag)
{
}

static inline void trace_usb_uas_xfer_data(int addr, uint16_t tag, uint32_t copy, uint32_t uoff, uint32_t usize, uint32_t soff, uint32_t ssize)
{
}

static inline void trace_usb_uas_scsi_data(int addr, uint16_t tag, uint32_t bytes)
{
}

static inline void trace_usb_uas_scsi_complete(int addr, uint16_t tag, uint32_t status, uint32_t resid)
{
}

static inline void trace_usb_uas_tmf_abort_task(int addr, uint16_t tag, uint16_t task_tag)
{
}

static inline void trace_usb_uas_tmf_logical_unit_reset(int addr, uint16_t tag, int lun)
{
}

static inline void trace_usb_uas_tmf_unsupported(int addr, uint16_t tag, uint32_t function)
{
}

static inline void trace_usb_mtp_reset(int addr)
{
}

static inline void trace_usb_mtp_command(int dev, uint16_t code, uint32_t trans, uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3, uint32_t arg4)
{
}

static inline void trace_usb_mtp_success(int dev, uint32_t trans, uint32_t arg0, uint32_t arg1)
{
}

static inline void trace_usb_mtp_error(int dev, uint16_t code, uint32_t trans, uint32_t arg0, uint32_t arg1)
{
}

static inline void trace_usb_mtp_data_in(int dev, uint32_t trans, uint32_t len)
{
}

static inline void trace_usb_mtp_xfer(int dev, uint32_t ep, uint32_t dlen, uint32_t plen)
{
}

static inline void trace_usb_mtp_nak(int dev, uint32_t ep)
{
}

static inline void trace_usb_mtp_stall(int dev, const char * reason)
{
}

static inline void trace_usb_mtp_op_get_device_info(int dev)
{
}

static inline void trace_usb_mtp_op_open_session(int dev)
{
}

static inline void trace_usb_mtp_op_close_session(int dev)
{
}

static inline void trace_usb_mtp_op_get_storage_ids(int dev)
{
}

static inline void trace_usb_mtp_op_get_storage_info(int dev)
{
}

static inline void trace_usb_mtp_op_get_num_objects(int dev, uint32_t handle, const char * path)
{
}

static inline void trace_usb_mtp_op_get_object_handles(int dev, uint32_t handle, const char * path)
{
}

static inline void trace_usb_mtp_op_get_object_info(int dev, uint32_t handle, const char * path)
{
}

static inline void trace_usb_mtp_op_get_object(int dev, uint32_t handle, const char * path)
{
}

static inline void trace_usb_mtp_op_get_partial_object(int dev, uint32_t handle, const char * path, uint32_t offset, uint32_t length)
{
}

static inline void trace_usb_mtp_op_unknown(int dev, uint32_t code)
{
}

static inline void trace_usb_mtp_object_alloc(int dev, uint32_t handle, const char * path)
{
}

static inline void trace_usb_mtp_object_free(int dev, uint32_t handle, const char * path)
{
}

static inline void trace_usb_mtp_add_child(int dev, uint32_t handle, const char * path)
{
}

static inline void trace_usb_mtp_inotify_event(int dev, const char * path, uint32_t mask, const char * s)
{
}

static inline void trace_usb_host_open_started(int bus, int addr)
{
}

static inline void trace_usb_host_open_success(int bus, int addr)
{
}

static inline void trace_usb_host_open_failure(int bus, int addr)
{
}

static inline void trace_usb_host_close(int bus, int addr)
{
}

static inline void trace_usb_host_attach_kernel(int bus, int addr, int interface)
{
}

static inline void trace_usb_host_detach_kernel(int bus, int addr, int interface)
{
}

static inline void trace_usb_host_set_address(int bus, int addr, int config)
{
}

static inline void trace_usb_host_set_config(int bus, int addr, int config)
{
}

static inline void trace_usb_host_set_interface(int bus, int addr, int interface, int alt)
{
}

static inline void trace_usb_host_claim_interface(int bus, int addr, int config, int interface)
{
}

static inline void trace_usb_host_release_interface(int bus, int addr, int interface)
{
}

static inline void trace_usb_host_req_control(int bus, int addr, void * p, int req, int value, int index)
{
}

static inline void trace_usb_host_req_data(int bus, int addr, void * p, int in, int ep, int size)
{
}

static inline void trace_usb_host_req_complete(int bus, int addr, void * p, int status, int length)
{
}

static inline void trace_usb_host_req_emulated(int bus, int addr, void * p, int status)
{
}

static inline void trace_usb_host_req_canceled(int bus, int addr, void * p)
{
}

static inline void trace_usb_host_iso_start(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_iso_stop(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_iso_out_of_bufs(int bus, int addr, int ep)
{
}

static inline void trace_usb_host_reset(int bus, int addr)
{
}

static inline void trace_usb_host_auto_scan_enabled(void)
{
}

static inline void trace_usb_host_auto_scan_disabled(void)
{
}

static inline void trace_usb_host_parse_config(int bus, int addr, int value, int active)
{
}

static inline void trace_usb_host_parse_interface(int bus, int addr, int num, int alt, int active)
{
}

static inline void trace_usb_host_parse_endpoint(int bus, int addr, int ep, const char * dir, const char * type, int active)
{
}

static inline void trace_usb_host_parse_error(int bus, int addr, const char * errmsg)
{
}

static inline void trace_scsi_req_alloc(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_cancel(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_data(int target, int lun, int tag, int len)
{
}

static inline void trace_scsi_req_data_canceled(int target, int lun, int tag, int len)
{
}

static inline void trace_scsi_req_dequeue(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_continue(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_continue_canceled(int target, int lun, int tag)
{
}

static inline void trace_scsi_req_parsed(int target, int lun, int tag, int cmd, int mode, int xfer)
{
}

static inline void trace_scsi_req_parsed_lba(int target, int lun, int tag, int cmd, uint64_t lba)
{
}

static inline void trace_scsi_req_parse_bad(int target, int lun, int tag, int cmd)
{
}

static inline void trace_scsi_req_build_sense(int target, int lun, int tag, int key, int asc, int ascq)
{
}

static inline void trace_scsi_device_set_ua(int target, int lun, int key, int asc, int ascq)
{
}

static inline void trace_scsi_report_luns(int target, int lun, int tag)
{
}

static inline void trace_scsi_inquiry(int target, int lun, int tag, int cdb1, int cdb2)
{
}

static inline void trace_scsi_test_unit_ready(int target, int lun, int tag)
{
}

static inline void trace_scsi_request_sense(int target, int lun, int tag)
{
}

static inline void trace_vm_state_notify(int running, int reason)
{
}

static inline void trace_load_file(const char * name, const char * path)
{
}

static inline void trace_runstate_set(int new_state)
{
}

static inline void trace_system_wakeup_request(int reason)
{
}

static inline void trace_qemu_system_shutdown_request(void)
{
}

static inline void trace_qemu_system_powerdown_request(void)
{
}

static inline void trace_qcow2_writev_start_req(void * co, int64_t sector, int nb_sectors)
{
}

static inline void trace_qcow2_writev_done_req(void * co, int ret)
{
}

static inline void trace_qcow2_writev_start_part(void * co)
{
}

static inline void trace_qcow2_writev_done_part(void * co, int cur_nr_sectors)
{
}

static inline void trace_qcow2_writev_data(void * co, uint64_t offset)
{
}

static inline void trace_qcow2_alloc_clusters_offset(void * co, uint64_t offset, int num)
{
}

static inline void trace_qcow2_handle_copied(void * co, uint64_t guest_offset, uint64_t host_offset, uint64_t bytes)
{
}

static inline void trace_qcow2_handle_alloc(void * co, uint64_t guest_offset, uint64_t host_offset, uint64_t bytes)
{
}

static inline void trace_qcow2_do_alloc_clusters_offset(void * co, uint64_t guest_offset, uint64_t host_offset, int nb_clusters)
{
}

static inline void trace_qcow2_cluster_alloc_phys(void * co)
{
}

static inline void trace_qcow2_cluster_link_l2(void * co, int nb_clusters)
{
}

static inline void trace_qcow2_l2_allocate(void * bs, int l1_index)
{
}

static inline void trace_qcow2_l2_allocate_get_empty(void * bs, int l1_index)
{
}

static inline void trace_qcow2_l2_allocate_write_l2(void * bs, int l1_index)
{
}

static inline void trace_qcow2_l2_allocate_write_l1(void * bs, int l1_index)
{
}

static inline void trace_qcow2_l2_allocate_done(void * bs, int l1_index, int ret)
{
}

static inline void trace_qcow2_cache_get(void * co, int c, uint64_t offset, bool read_from_disk)
{
}

static inline void trace_qcow2_cache_get_replace_entry(void * co, int c, int i)
{
}

static inline void trace_qcow2_cache_get_read(void * co, int c, int i)
{
}

static inline void trace_qcow2_cache_get_done(void * co, int c, int i)
{
}

static inline void trace_qcow2_cache_flush(void * co, int c)
{
}

static inline void trace_qcow2_cache_entry_flush(void * co, int c, int i)
{
}

static inline void trace_qed_alloc_l2_cache_entry(void * l2_cache, void * entry)
{
}

static inline void trace_qed_unref_l2_cache_entry(void * entry, int ref)
{
}

static inline void trace_qed_find_l2_cache_entry(void * l2_cache, void * entry, uint64_t offset, int ref)
{
}

static inline void trace_qed_read_table(void * s, uint64_t offset, void * table)
{
}

static inline void trace_qed_read_table_cb(void * s, void * table, int ret)
{
}

static inline void trace_qed_write_table(void * s, uint64_t offset, void * table, unsigned int index, unsigned int n)
{
}

static inline void trace_qed_write_table_cb(void * s, void * table, int flush, int ret)
{
}

static inline void trace_qed_need_check_timer_cb(void * s)
{
}

static inline void trace_qed_start_need_check_timer(void * s)
{
}

static inline void trace_qed_cancel_need_check_timer(void * s)
{
}

static inline void trace_qed_aio_complete(void * s, void * acb, int ret)
{
}

static inline void trace_qed_aio_setup(void * s, void * acb, int64_t sector_num, int nb_sectors, void * opaque, int flags)
{
}

static inline void trace_qed_aio_next_io(void * s, void * acb, int ret, uint64_t cur_pos)
{
}

static inline void trace_qed_aio_read_data(void * s, void * acb, int ret, uint64_t offset, size_t len)
{
}

static inline void trace_qed_aio_write_data(void * s, void * acb, int ret, uint64_t offset, size_t len)
{
}

static inline void trace_qed_aio_write_prefill(void * s, void * acb, uint64_t start, size_t len, uint64_t offset)
{
}

static inline void trace_qed_aio_write_postfill(void * s, void * acb, uint64_t start, size_t len, uint64_t offset)
{
}

static inline void trace_qed_aio_write_main(void * s, void * acb, int ret, uint64_t offset, size_t len)
{
}

static inline void trace_g364fb_read(uint64_t addr, uint32_t val)
{
}

static inline void trace_g364fb_write(uint64_t addr, uint32_t new)
{
}

static inline void trace_grlib_gptimer_enable(int id, uint32_t count)
{
}

static inline void trace_grlib_gptimer_disabled(int id, uint32_t config)
{
}

static inline void trace_grlib_gptimer_restart(int id, uint32_t reload)
{
}

static inline void trace_grlib_gptimer_set_scaler(uint32_t scaler, uint32_t freq)
{
}

static inline void trace_grlib_gptimer_hit(int id)
{
}

static inline void trace_grlib_gptimer_readl(int id, uint64_t addr, uint32_t val)
{
}

static inline void trace_grlib_gptimer_writel(int id, uint64_t addr, uint32_t val)
{
}

static inline void trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
}

static inline void trace_grlib_irqmp_ack(int intno)
{
}

static inline void trace_grlib_irqmp_set_irq(int irq)
{
}

static inline void trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
}

static inline void trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
}

static inline void trace_grlib_apbuart_event(int event)
{
}

static inline void trace_grlib_apbuart_writel_unknown(uint64_t addr, uint32_t value)
{
}

static inline void trace_grlib_apbuart_readl_unknown(uint64_t addr)
{
}

static inline void trace_leon3_set_irq(int intno)
{
}

static inline void trace_leon3_reset_irq(int intno)
{
}

static inline void trace_spice_vmc_write(ssize_t out, int len)
{
}

static inline void trace_spice_vmc_read(int bytes, int len)
{
}

static inline void trace_spice_vmc_register_interface(void * scd)
{
}

static inline void trace_spice_vmc_unregister_interface(void * scd)
{
}

static inline void trace_spice_vmc_event(int event)
{
}

static inline void trace_lm32_pic_raise_irq(void)
{
}

static inline void trace_lm32_pic_lower_irq(void)
{
}

static inline void trace_lm32_pic_interrupt(int irq, int level)
{
}

static inline void trace_lm32_pic_set_im(uint32_t im)
{
}

static inline void trace_lm32_pic_set_ip(uint32_t ip)
{
}

static inline void trace_lm32_pic_get_im(uint32_t im)
{
}

static inline void trace_lm32_pic_get_ip(uint32_t ip)
{
}

static inline void trace_lm32_juart_get_jtx(uint32_t value)
{
}

static inline void trace_lm32_juart_set_jtx(uint32_t value)
{
}

static inline void trace_lm32_juart_get_jrx(uint32_t value)
{
}

static inline void trace_lm32_juart_set_jrx(uint32_t value)
{
}

static inline void trace_lm32_timer_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_timer_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_timer_hit(void)
{
}

static inline void trace_lm32_timer_irq_state(int level)
{
}

static inline void trace_lm32_uart_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_uart_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_lm32_uart_irq_state(int level)
{
}

static inline void trace_mptsas_command_complete(void * dev, uint32_t ctx, uint32_t status, uint32_t resid)
{
}

static inline void trace_mptsas_diag_read(void * dev, uint32_t addr, uint32_t val)
{
}

static inline void trace_mptsas_diag_write(void * dev, uint32_t addr, uint32_t val)
{
}

static inline void trace_mptsas_irq_intx(void * dev, int level)
{
}

static inline void trace_mptsas_irq_msi(void * dev)
{
}

static inline void trace_mptsas_mmio_read(void * dev, uint32_t addr, uint32_t val)
{
}

static inline void trace_mptsas_mmio_unhandled_read(void * dev, uint32_t addr)
{
}

static inline void trace_mptsas_mmio_unhandled_write(void * dev, uint32_t addr, uint32_t val)
{
}

static inline void trace_mptsas_mmio_write(void * dev, uint32_t addr, uint32_t val)
{
}

static inline void trace_mptsas_process_message(void * dev, int msg, uint32_t ctx)
{
}

static inline void trace_mptsas_process_scsi_io_request(void * dev, int bus, int target, int lun, uint64_t len)
{
}

static inline void trace_mptsas_reset(void * dev)
{
}

static inline void trace_mptsas_scsi_overflow(void * dev, uint32_t ctx, uint64_t req, uint64_t found)
{
}

static inline void trace_mptsas_sgl_overflow(void * dev, uint32_t ctx, uint64_t req, uint64_t found)
{
}

static inline void trace_mptsas_unhandled_cmd(void * dev, uint32_t ctx, uint8_t msg_cmd)
{
}

static inline void trace_mptsas_unhandled_doorbell_cmd(void * dev, int cmd)
{
}

static inline void trace_mptsas_config_sas_device(void * dev, int address, int port, int phy_handle, int dev_handle, int page)
{
}

static inline void trace_mptsas_config_sas_phy(void * dev, int address, int port, int phy_handle, int dev_handle, int page)
{
}

static inline void trace_megasas_init_firmware(uint64_t pa)
{
}

static inline void trace_megasas_init_queue(uint64_t queue_pa, int queue_len, uint64_t head, uint64_t tail, uint32_t flags)
{
}

static inline void trace_megasas_initq_map_failed(int frame)
{
}

static inline void trace_megasas_initq_mapped(uint64_t pa)
{
}

static inline void trace_megasas_initq_mismatch(int queue_len, int fw_cmds)
{
}

static inline void trace_megasas_qf_mapped(unsigned int index)
{
}

static inline void trace_megasas_qf_new(unsigned int index, uint64_t frame)
{
}

static inline void trace_megasas_qf_busy(unsigned long pa)
{
}

static inline void trace_megasas_qf_enqueue(unsigned int index, unsigned int count, uint64_t context, unsigned int head, unsigned int tail, int busy)
{
}

static inline void trace_megasas_qf_update(unsigned int head, unsigned int tail, unsigned int busy)
{
}

static inline void trace_megasas_qf_map_failed(int cmd, unsigned long frame)
{
}

static inline void trace_megasas_qf_complete_noirq(uint64_t context)
{
}

static inline void trace_megasas_qf_complete(uint64_t context, unsigned int head, unsigned int tail, int busy)
{
}

static inline void trace_megasas_frame_busy(uint64_t addr)
{
}

static inline void trace_megasas_unhandled_frame_cmd(int cmd, uint8_t frame_cmd)
{
}

static inline void trace_megasas_handle_scsi(const char * frame, int bus, int dev, int lun, void * sdev, unsigned long size)
{
}

static inline void trace_megasas_scsi_target_not_present(const char * frame, int bus, int dev, int lun)
{
}

static inline void trace_megasas_scsi_invalid_cdb_len(const char * frame, int bus, int dev, int lun, int len)
{
}

static inline void trace_megasas_iov_read_overflow(int cmd, int bytes, int len)
{
}

static inline void trace_megasas_iov_write_overflow(int cmd, int bytes, int len)
{
}

static inline void trace_megasas_iov_read_underflow(int cmd, int bytes, int len)
{
}

static inline void trace_megasas_iov_write_underflow(int cmd, int bytes, int len)
{
}

static inline void trace_megasas_scsi_req_alloc_failed(const char * frame, int dev, int lun)
{
}

static inline void trace_megasas_scsi_read_start(int cmd, int len)
{
}

static inline void trace_megasas_scsi_write_start(int cmd, int len)
{
}

static inline void trace_megasas_scsi_nodata(int cmd)
{
}

static inline void trace_megasas_scsi_complete(int cmd, uint32_t status, int len, int xfer)
{
}

static inline void trace_megasas_command_complete(int cmd, uint32_t status, uint32_t resid)
{
}

static inline void trace_megasas_handle_io(int cmd, const char * frame, int dev, int lun, unsigned long lba, unsigned long count)
{
}

static inline void trace_megasas_io_target_not_present(int cmd, const char * frame, int dev, int lun)
{
}

static inline void trace_megasas_io_read_start(int cmd, unsigned long lba, unsigned long count, unsigned long len)
{
}

static inline void trace_megasas_io_write_start(int cmd, unsigned long lba, unsigned long count, unsigned long len)
{
}

static inline void trace_megasas_io_complete(int cmd, uint32_t len)
{
}

static inline void trace_megasas_iovec_sgl_overflow(int cmd, int index, int limit)
{
}

static inline void trace_megasas_iovec_sgl_underflow(int cmd, int index)
{
}

static inline void trace_megasas_iovec_sgl_invalid(int cmd, int index, uint64_t pa, uint32_t len)
{
}

static inline void trace_megasas_iovec_overflow(int cmd, int len, int limit)
{
}

static inline void trace_megasas_iovec_underflow(int cmd, int len, int limit)
{
}

static inline void trace_megasas_handle_dcmd(int cmd, int opcode)
{
}

static inline void trace_megasas_finish_dcmd(int cmd, int size)
{
}

static inline void trace_megasas_dcmd_req_alloc_failed(int cmd, const char * desc)
{
}

static inline void trace_megasas_dcmd_internal_submit(int cmd, const char * desc, int dev)
{
}

static inline void trace_megasas_dcmd_internal_finish(int cmd, int opcode, int lun)
{
}

static inline void trace_megasas_dcmd_internal_invalid(int cmd, int opcode)
{
}

static inline void trace_megasas_dcmd_unhandled(int cmd, int opcode, int len)
{
}

static inline void trace_megasas_dcmd_zero_sge(int cmd)
{
}

static inline void trace_megasas_dcmd_invalid_sge(int cmd, int count)
{
}

static inline void trace_megasas_dcmd_invalid_xfer_len(int cmd, unsigned long size, unsigned long max)
{
}

static inline void trace_megasas_dcmd_enter(int cmd, const char * dcmd, int len)
{
}

static inline void trace_megasas_dcmd_dummy(int cmd, unsigned long size)
{
}

static inline void trace_megasas_dcmd_set_fw_time(int cmd, unsigned long time)
{
}

static inline void trace_megasas_dcmd_pd_get_list(int cmd, int num, int max, int offset)
{
}

static inline void trace_megasas_dcmd_ld_get_list(int cmd, int num, int max)
{
}

static inline void trace_megasas_dcmd_ld_get_info(int cmd, int ld_id)
{
}

static inline void trace_megasas_dcmd_ld_list_query(int cmd, int flags)
{
}

static inline void trace_megasas_dcmd_pd_get_info(int cmd, int pd_id)
{
}

static inline void trace_megasas_dcmd_pd_list_query(int cmd, int flags)
{
}

static inline void trace_megasas_dcmd_reset_ld(int cmd, int target_id)
{
}

static inline void trace_megasas_dcmd_unsupported(int cmd, unsigned long size)
{
}

static inline void trace_megasas_abort_frame(int cmd, int abort_cmd)
{
}

static inline void trace_megasas_abort_no_cmd(int cmd, uint64_t context)
{
}

static inline void trace_megasas_abort_invalid_context(int cmd, uint64_t context, int abort_cmd)
{
}

static inline void trace_megasas_reset(int fw_state)
{
}

static inline void trace_megasas_init(int sges, int cmds, const char * mode)
{
}

static inline void trace_megasas_msix_raise(int vector)
{
}

static inline void trace_megasas_msi_raise(int vector)
{
}

static inline void trace_megasas_irq_lower(void)
{
}

static inline void trace_megasas_irq_raise(void)
{
}

static inline void trace_megasas_intr_enabled(void)
{
}

static inline void trace_megasas_intr_disabled(void)
{
}

static inline void trace_megasas_msix_enabled(int vector)
{
}

static inline void trace_megasas_msi_enabled(int vector)
{
}

static inline void trace_megasas_mmio_readl(const char * reg, uint32_t val)
{
}

static inline void trace_megasas_mmio_invalid_readl(unsigned long addr)
{
}

static inline void trace_megasas_mmio_writel(const char * reg, uint32_t val)
{
}

static inline void trace_megasas_mmio_invalid_writel(uint32_t addr, uint32_t val)
{
}

static inline void trace_milkymist_ac97_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_ac97_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_ac97_pulse_irq_crrequest(void)
{
}

static inline void trace_milkymist_ac97_pulse_irq_crreply(void)
{
}

static inline void trace_milkymist_ac97_pulse_irq_dmaw(void)
{
}

static inline void trace_milkymist_ac97_pulse_irq_dmar(void)
{
}

static inline void trace_milkymist_ac97_in_cb(int avail, uint32_t remaining)
{
}

static inline void trace_milkymist_ac97_in_cb_transferred(int transferred)
{
}

static inline void trace_milkymist_ac97_out_cb(int free, uint32_t remaining)
{
}

static inline void trace_milkymist_ac97_out_cb_transferred(int transferred)
{
}

static inline void trace_milkymist_hpdmc_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_hpdmc_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_memcard_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_memcard_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_minimac2_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_minimac2_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_minimac2_mdio_write(uint8_t phy_addr, uint8_t addr, uint16_t value)
{
}

static inline void trace_milkymist_minimac2_mdio_read(uint8_t phy_addr, uint8_t addr, uint16_t value)
{
}

static inline void trace_milkymist_minimac2_tx_frame(uint32_t length)
{
}

static inline void trace_milkymist_minimac2_rx_frame(const void * buf, uint32_t length)
{
}

static inline void trace_milkymist_minimac2_rx_transfer(const void * buf, uint32_t length)
{
}

static inline void trace_milkymist_minimac2_raise_irq_rx(void)
{
}

static inline void trace_milkymist_minimac2_lower_irq_rx(void)
{
}

static inline void trace_milkymist_minimac2_pulse_irq_tx(void)
{
}

static inline void trace_milkymist_pfpu_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_pfpu_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_pfpu_vectout(uint32_t a, uint32_t b, uint32_t dma_ptr)
{
}

static inline void trace_milkymist_pfpu_pulse_irq(void)
{
}

static inline void trace_milkymist_softusb_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_softusb_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_softusb_mevt(uint8_t m)
{
}

static inline void trace_milkymist_softusb_kevt(uint8_t m)
{
}

static inline void trace_milkymist_softusb_pulse_irq(void)
{
}

static inline void trace_milkymist_sysctl_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_sysctl_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_sysctl_icap_write(uint32_t value)
{
}

static inline void trace_milkymist_sysctl_start_timer0(void)
{
}

static inline void trace_milkymist_sysctl_stop_timer0(void)
{
}

static inline void trace_milkymist_sysctl_start_timer1(void)
{
}

static inline void trace_milkymist_sysctl_stop_timer1(void)
{
}

static inline void trace_milkymist_sysctl_pulse_irq_timer0(void)
{
}

static inline void trace_milkymist_sysctl_pulse_irq_timer1(void)
{
}

static inline void trace_milkymist_tmu2_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_tmu2_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_tmu2_start(void)
{
}

static inline void trace_milkymist_tmu2_pulse_irq(void)
{
}

static inline void trace_milkymist_uart_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_uart_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_uart_raise_irq(void)
{
}

static inline void trace_milkymist_uart_lower_irq(void)
{
}

static inline void trace_milkymist_vgafb_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_vgafb_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_mipsnet_send(uint32_t size)
{
}

static inline void trace_mipsnet_receive(uint32_t size)
{
}

static inline void trace_mipsnet_read(uint64_t addr, uint32_t val)
{
}

static inline void trace_mipsnet_write(uint64_t addr, uint64_t val)
{
}

static inline void trace_mipsnet_irq(uint32_t isr, uint32_t intctl)
{
}

static inline void trace_pc87312_io_read(uint32_t addr, uint32_t val)
{
}

static inline void trace_pc87312_io_write(uint32_t addr, uint32_t val)
{
}

static inline void trace_pc87312_info_floppy(uint32_t base)
{
}

static inline void trace_pc87312_info_ide(uint32_t base)
{
}

static inline void trace_pc87312_info_parallel(uint32_t base, uint32_t irq)
{
}

static inline void trace_pc87312_info_serial(int n, uint32_t base, uint32_t irq)
{
}

static inline void trace_pvscsi_ring_init_data(uint32_t txr_len_log2, uint32_t rxr_len_log2)
{
}

static inline void trace_pvscsi_ring_init_msg(uint32_t len_log2)
{
}

static inline void trace_pvscsi_ring_flush_cmp(uint64_t filled_cmp_ptr)
{
}

static inline void trace_pvscsi_ring_flush_msg(uint64_t filled_cmp_ptr)
{
}

static inline void trace_pvscsi_update_irq_level(bool raise, uint64_t mask, uint64_t status)
{
}

static inline void trace_pvscsi_update_irq_msi(void)
{
}

static inline void trace_pvscsi_cmp_ring_put(unsigned long addr)
{
}

static inline void trace_pvscsi_msg_ring_put(unsigned long addr)
{
}

static inline void trace_pvscsi_complete_request(uint64_t context, uint64_t len, uint8_t sense_key)
{
}

static inline void trace_pvscsi_get_sg_list(int nsg, size_t size)
{
}

static inline void trace_pvscsi_get_next_sg_elem(uint32_t flags)
{
}

static inline void trace_pvscsi_command_complete_not_found(uint32_t tag)
{
}

static inline void trace_pvscsi_command_complete_data_run(void)
{
}

static inline void trace_pvscsi_command_complete_sense_len(int len)
{
}

static inline void trace_pvscsi_convert_sglist(uint64_t context, unsigned long addr, uint32_t resid)
{
}

static inline void trace_pvscsi_process_req_descr(uint8_t cmd, uint64_t ctx)
{
}

static inline void trace_pvscsi_process_req_descr_unknown_device(void)
{
}

static inline void trace_pvscsi_process_req_descr_invalid_dir(void)
{
}

static inline void trace_pvscsi_process_io(unsigned long addr)
{
}

static inline void trace_pvscsi_on_cmd_noimpl(const char* cmd)
{
}

static inline void trace_pvscsi_on_cmd_reset_dev(uint32_t tgt, int lun, void* dev)
{
}

static inline void trace_pvscsi_on_cmd_arrived(const char* cmd)
{
}

static inline void trace_pvscsi_on_cmd_abort(uint64_t ctx, uint32_t tgt)
{
}

static inline void trace_pvscsi_on_cmd_unknown(uint64_t cmd_id)
{
}

static inline void trace_pvscsi_on_cmd_unknown_data(uint32_t data)
{
}

static inline void trace_pvscsi_io_write(const char* cmd, uint64_t val)
{
}

static inline void trace_pvscsi_io_write_unknown(unsigned long addr, unsigned sz, uint64_t val)
{
}

static inline void trace_pvscsi_io_read(const char* cmd, uint64_t status)
{
}

static inline void trace_pvscsi_io_read_unknown(unsigned long addr, unsigned sz)
{
}

static inline void trace_pvscsi_init_msi_fail(int res)
{
}

static inline void trace_pvscsi_state(const char* state)
{
}

static inline void trace_pvscsi_tx_rings_ppn(const char* label, uint64_t ppn)
{
}

static inline void trace_pvscsi_tx_rings_num_pages(const char* label, uint32_t num)
{
}

static inline void trace_xen_ram_alloc(unsigned long ram_addr, unsigned long size)
{
}

static inline void trace_xen_client_set_memory(uint64_t start_addr, unsigned long size, bool log_dirty)
{
}

static inline void trace_xen_ioreq_server_create(uint32_t id)
{
}

static inline void trace_xen_ioreq_server_destroy(uint32_t id)
{
}

static inline void trace_xen_ioreq_server_state(uint32_t id, bool enable)
{
}

static inline void trace_xen_map_mmio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
}

static inline void trace_xen_unmap_mmio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
}

static inline void trace_xen_map_portio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
}

static inline void trace_xen_unmap_portio_range(uint32_t id, uint64_t start_addr, uint64_t end_addr)
{
}

static inline void trace_xen_map_pcidev(uint32_t id, uint8_t bus, uint8_t dev, uint8_t func)
{
}

static inline void trace_xen_unmap_pcidev(uint32_t id, uint8_t bus, uint8_t dev, uint8_t func)
{
}

static inline void trace_handle_ioreq(void * req, uint32_t type, uint32_t dir, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_handle_ioreq_read(void * req, uint32_t type, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_handle_ioreq_write(void * req, uint32_t type, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_cpu_ioreq_pio(void * req, uint32_t dir, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_cpu_ioreq_pio_read_reg(void * req, uint64_t data, uint64_t addr, uint32_t size)
{
}

static inline void trace_cpu_ioreq_pio_write_reg(void * req, uint64_t data, uint64_t addr, uint32_t size)
{
}

static inline void trace_cpu_ioreq_move(void * req, uint32_t dir, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_xen_map_cache(uint64_t phys_addr)
{
}

static inline void trace_xen_remap_bucket(uint64_t index)
{
}

static inline void trace_xen_map_cache_return(void* ptr)
{
}

static inline void trace_xen_platform_log(char * s)
{
}

static inline void trace_qemu_coroutine_enter(void * from, void * to, void * opaque)
{
}

static inline void trace_qemu_coroutine_yield(void * from, void * to)
{
}

static inline void trace_qemu_coroutine_terminate(void * co)
{
}

static inline void trace_qemu_co_queue_run_restart(void * co)
{
}

static inline void trace_qemu_co_queue_next(void * nxt)
{
}

static inline void trace_qemu_co_mutex_lock_entry(void * mutex, void * self)
{
}

static inline void trace_qemu_co_mutex_lock_return(void * mutex, void * self)
{
}

static inline void trace_qemu_co_mutex_unlock_entry(void * mutex, void * self)
{
}

static inline void trace_qemu_co_mutex_unlock_return(void * mutex, void * self)
{
}

static inline void trace_escc_put_queue(char channel, int b)
{
}

static inline void trace_escc_get_queue(char channel, int val)
{
}

static inline void trace_escc_update_irq(int irq)
{
}

static inline void trace_escc_update_parameters(char channel, int speed, int parity, int data_bits, int stop_bits)
{
}

static inline void trace_escc_mem_writeb_ctrl(char channel, uint32_t reg, uint32_t val)
{
}

static inline void trace_escc_mem_writeb_data(char channel, uint32_t val)
{
}

static inline void trace_escc_mem_readb_ctrl(char channel, uint32_t reg, uint8_t val)
{
}

static inline void trace_escc_mem_readb_data(char channel, uint32_t ret)
{
}

static inline void trace_escc_serial_receive_byte(char channel, int ch)
{
}

static inline void trace_escc_sunkbd_event_in(int ch, const char * name, int down)
{
}

static inline void trace_escc_sunkbd_event_out(int ch)
{
}

static inline void trace_escc_kbd_command(int val)
{
}

static inline void trace_escc_sunmouse_event(int dx, int dy, int buttons_state)
{
}

static inline void trace_esp_error_fifo_overrun(void)
{
}

static inline void trace_esp_error_unhandled_command(uint32_t val)
{
}

static inline void trace_esp_error_invalid_write(uint32_t val, uint32_t addr)
{
}

static inline void trace_esp_raise_irq(void)
{
}

static inline void trace_esp_lower_irq(void)
{
}

static inline void trace_esp_dma_enable(void)
{
}

static inline void trace_esp_dma_disable(void)
{
}

static inline void trace_esp_get_cmd(uint32_t dmalen, int target)
{
}

static inline void trace_esp_do_busid_cmd(uint8_t busid)
{
}

static inline void trace_esp_handle_satn_stop(uint32_t cmdlen)
{
}

static inline void trace_esp_write_response(uint32_t status)
{
}

static inline void trace_esp_do_dma(uint32_t cmdlen, uint32_t len)
{
}

static inline void trace_esp_command_complete(void)
{
}

static inline void trace_esp_command_complete_unexpected(void)
{
}

static inline void trace_esp_command_complete_fail(void)
{
}

static inline void trace_esp_transfer_data(uint32_t dma_left, int32_t ti_size)
{
}

static inline void trace_esp_handle_ti(uint32_t minlen)
{
}

static inline void trace_esp_handle_ti_cmd(uint32_t cmdlen)
{
}

static inline void trace_esp_mem_readb(uint32_t saddr, uint8_t reg)
{
}

static inline void trace_esp_mem_writeb(uint32_t saddr, uint8_t reg, uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_nop(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_flush(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_reset(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_bus_reset(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_iccs(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_msgacc(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_pad(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_satn(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_rstatn(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_sel(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_selatn(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_selatns(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_ensel(uint32_t val)
{
}

static inline void trace_esp_mem_writeb_cmd_dissel(uint32_t val)
{
}

static inline void trace_esp_pci_error_invalid_dma_direction(void)
{
}

static inline void trace_esp_pci_error_invalid_read(uint32_t reg)
{
}

static inline void trace_esp_pci_error_invalid_write(uint32_t reg)
{
}

static inline void trace_esp_pci_error_invalid_write_dma(uint32_t val, uint32_t addr)
{
}

static inline void trace_esp_pci_dma_read(uint32_t saddr, uint32_t reg)
{
}

static inline void trace_esp_pci_dma_write(uint32_t saddr, uint32_t reg, uint32_t val)
{
}

static inline void trace_esp_pci_dma_idle(uint32_t val)
{
}

static inline void trace_esp_pci_dma_blast(uint32_t val)
{
}

static inline void trace_esp_pci_dma_abort(uint32_t val)
{
}

static inline void trace_esp_pci_dma_start(uint32_t val)
{
}

static inline void trace_esp_pci_sbac_read(uint32_t reg)
{
}

static inline void trace_esp_pci_sbac_write(uint32_t reg, uint32_t val)
{
}

static inline void trace_handle_qmp_command(void * mon, const char * cmd_name)
{
}

static inline void trace_monitor_protocol_emitter(void * mon)
{
}

static inline void trace_monitor_protocol_event_handler(uint32_t event, void * qdict)
{
}

static inline void trace_monitor_protocol_event_emit(uint32_t event, void * data)
{
}

static inline void trace_monitor_protocol_event_queue(uint32_t event, void * qdict, uint64_t rate)
{
}

static inline void trace_monitor_protocol_event_throttle(uint32_t event, uint64_t rate)
{
}

static inline void trace_open_eth_mii_write(unsigned idx, uint16_t v)
{
}

static inline void trace_open_eth_mii_read(unsigned idx, uint16_t v)
{
}

static inline void trace_open_eth_update_irq(uint32_t v)
{
}

static inline void trace_open_eth_receive(unsigned len)
{
}

static inline void trace_open_eth_receive_mcast(unsigned idx, uint32_t h0, uint32_t h1)
{
}

static inline void trace_open_eth_receive_reject(void)
{
}

static inline void trace_open_eth_receive_desc(uint32_t addr, uint32_t len_flags)
{
}

static inline void trace_open_eth_start_xmit(uint32_t addr, unsigned len, unsigned tx_len)
{
}

static inline void trace_open_eth_reg_read(uint32_t addr, uint32_t v)
{
}

static inline void trace_open_eth_reg_write(uint32_t addr, uint32_t v)
{
}

static inline void trace_open_eth_desc_read(uint32_t addr, uint32_t v)
{
}

static inline void trace_open_eth_desc_write(uint32_t addr, uint32_t v)
{
}

static inline void trace_v9fs_rerror(uint16_t tag, uint8_t id, int err)
{
}

static inline void trace_v9fs_version(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
}

static inline void trace_v9fs_version_return(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
}

static inline void trace_v9fs_attach(uint16_t tag, uint8_t id, int32_t fid, int32_t afid, char* uname, char* aname)
{
}

static inline void trace_v9fs_attach_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_stat(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_stat_return(uint16_t tag, uint8_t id, int32_t mode, int32_t atime, int32_t mtime, int64_t length)
{
}

static inline void trace_v9fs_getattr(uint16_t tag, uint8_t id, int32_t fid, uint64_t request_mask)
{
}

static inline void trace_v9fs_getattr_return(uint16_t tag, uint8_t id, uint64_t result_mask, uint32_t mode, uint32_t uid, uint32_t gid)
{
}

static inline void trace_v9fs_walk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, uint16_t nwnames)
{
}

static inline void trace_v9fs_walk_return(uint16_t tag, uint8_t id, uint16_t nwnames, void* qids)
{
}

static inline void trace_v9fs_open(uint16_t tag, uint8_t id, int32_t fid, int32_t mode)
{
}

static inline void trace_v9fs_open_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
}

static inline void trace_v9fs_lcreate(uint16_t tag, uint8_t id, int32_t dfid, int32_t flags, int32_t mode, uint32_t gid)
{
}

static inline void trace_v9fs_lcreate_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int32_t iounit)
{
}

static inline void trace_v9fs_fsync(uint16_t tag, uint8_t id, int32_t fid, int datasync)
{
}

static inline void trace_v9fs_clunk(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_read(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t max_count)
{
}

static inline void trace_v9fs_read_return(uint16_t tag, uint8_t id, int32_t count, ssize_t err)
{
}

static inline void trace_v9fs_readdir(uint16_t tag, uint8_t id, int32_t fid, uint64_t offset, uint32_t max_count)
{
}

static inline void trace_v9fs_readdir_return(uint16_t tag, uint8_t id, uint32_t count, ssize_t retval)
{
}

static inline void trace_v9fs_write(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t count, int cnt)
{
}

static inline void trace_v9fs_write_return(uint16_t tag, uint8_t id, int32_t total, ssize_t err)
{
}

static inline void trace_v9fs_create(uint16_t tag, uint8_t id, int32_t fid, char* name, int32_t perm, int8_t mode)
{
}

static inline void trace_v9fs_create_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
}

static inline void trace_v9fs_symlink(uint16_t tag, uint8_t id, int32_t fid, char* name, char* symname, uint32_t gid)
{
}

static inline void trace_v9fs_symlink_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_flush(uint16_t tag, uint8_t id, int16_t flush_tag)
{
}

static inline void trace_v9fs_link(uint16_t tag, uint8_t id, int32_t dfid, int32_t oldfid, char* name)
{
}

static inline void trace_v9fs_remove(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_wstat(uint16_t tag, uint8_t id, int32_t fid, int32_t mode, int32_t atime, int32_t mtime)
{
}

static inline void trace_v9fs_mknod(uint16_t tag, uint8_t id, int32_t fid, int mode, int major, int minor)
{
}

static inline void trace_v9fs_mknod_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_lock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
}

static inline void trace_v9fs_lock_return(uint16_t tag, uint8_t id, int8_t status)
{
}

static inline void trace_v9fs_getlock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
}

static inline void trace_v9fs_getlock_return(uint16_t tag, uint8_t id, uint8_t type, uint64_t start, uint64_t length, uint32_t proc_id)
{
}

static inline void trace_v9fs_mkdir(uint16_t tag, uint8_t id, int32_t fid, char* name, int mode, uint32_t gid)
{
}

static inline void trace_v9fs_mkdir_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int err)
{
}

static inline void trace_v9fs_xattrwalk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, char* name)
{
}

static inline void trace_v9fs_xattrwalk_return(uint16_t tag, uint8_t id, int64_t size)
{
}

static inline void trace_v9fs_xattrcreate(uint16_t tag, uint8_t id, int32_t fid, char* name, int64_t size, int flags)
{
}

static inline void trace_v9fs_readlink(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_readlink_return(uint16_t tag, uint8_t id, char* target)
{
}

static inline void trace_mmu_helper_dfault(uint64_t address, uint64_t context, int mmu_idx, uint32_t tl)
{
}

static inline void trace_mmu_helper_dprot(uint64_t address, uint64_t context, int mmu_idx, uint32_t tl)
{
}

static inline void trace_mmu_helper_dmiss(uint64_t address, uint64_t context)
{
}

static inline void trace_mmu_helper_tfault(uint64_t address, uint64_t context)
{
}

static inline void trace_mmu_helper_tmiss(uint64_t address, uint64_t context)
{
}

static inline void trace_mmu_helper_get_phys_addr_code(uint32_t tl, int mmu_idx, uint64_t prim_context, uint64_t sec_context, uint64_t address)
{
}

static inline void trace_mmu_helper_get_phys_addr_data(uint32_t tl, int mmu_idx, uint64_t prim_context, uint64_t sec_context, uint64_t address)
{
}

static inline void trace_mmu_helper_mmu_fault(uint64_t address, uint64_t paddr, int mmu_idx, uint32_t tl, uint64_t prim_context, uint64_t sec_context)
{
}

static inline void trace_int_helper_set_softint(uint32_t softint)
{
}

static inline void trace_int_helper_clear_softint(uint32_t softint)
{
}

static inline void trace_int_helper_write_softint(uint32_t softint)
{
}

static inline void trace_int_helper_icache_freeze(void)
{
}

static inline void trace_int_helper_dcache_freeze(void)
{
}

static inline void trace_win_helper_gregset_error(uint32_t pstate)
{
}

static inline void trace_win_helper_switch_pstate(uint32_t pstate_regs, uint32_t new_pstate_regs)
{
}

static inline void trace_win_helper_no_switch_pstate(uint32_t new_pstate_regs)
{
}

static inline void trace_win_helper_wrpil(uint32_t psrpil, uint32_t new_pil)
{
}

static inline void trace_win_helper_done(uint32_t tl)
{
}

static inline void trace_win_helper_retry(uint32_t tl)
{
}

static inline void trace_dma_blk_io(void * dbs, void * bs, int64_t sector_num, bool to_dev)
{
}

static inline void trace_dma_aio_cancel(void * dbs)
{
}

static inline void trace_dma_complete(void * dbs, int ret, void * cb)
{
}

static inline void trace_dma_blk_cb(void * dbs, int ret)
{
}

static inline void trace_dma_map_wait(void * dbs)
{
}

static inline void trace_console_gfx_new(void)
{
}

static inline void trace_console_putchar_csi(int esc_param0, int esc_param1, int ch, int nb_esc_params)
{
}

static inline void trace_console_putchar_unhandled(int ch)
{
}

static inline void trace_console_txt_new(int w, int h)
{
}

static inline void trace_console_select(int nr)
{
}

static inline void trace_console_refresh(int interval)
{
}

static inline void trace_displaysurface_create(void * display_surface, int w, int h)
{
}

static inline void trace_displaysurface_create_from(void * display_surface, int w, int h, uint32_t format)
{
}

static inline void trace_displaysurface_create_pixman(void * display_surface)
{
}

static inline void trace_displaysurface_free(void * display_surface)
{
}

static inline void trace_displaychangelistener_register(void * dcl, const char * name)
{
}

static inline void trace_displaychangelistener_unregister(void * dcl, const char * name)
{
}

static inline void trace_ppm_save(const char * filename, void * display_surface)
{
}

static inline void trace_gd_switch(const char * tab, int width, int height)
{
}

static inline void trace_gd_update(const char * tab, int x, int y, int w, int h)
{
}

static inline void trace_gd_key_event(const char * tab, int gdk_keycode, int qemu_keycode, const char * action)
{
}

static inline void trace_gd_grab(const char * tab, const char * device, const char * reason)
{
}

static inline void trace_gd_ungrab(const char * tab, const char * device)
{
}

static inline void trace_vnc_key_guest_leds(bool caps, bool num, bool scroll)
{
}

static inline void trace_vnc_key_map_init(const char * layout)
{
}

static inline void trace_vnc_key_event_ext(bool down, int sym, int keycode, const char * name)
{
}

static inline void trace_vnc_key_event_map(bool down, int sym, int keycode, const char * name)
{
}

static inline void trace_vnc_key_sync_numlock(bool on)
{
}

static inline void trace_vnc_key_sync_capslock(bool on)
{
}

static inline void trace_input_event_key_number(int conidx, int number, const char * qcode, bool down)
{
}

static inline void trace_input_event_key_qcode(int conidx, const char * qcode, bool down)
{
}

static inline void trace_input_event_btn(int conidx, const char * btn, bool down)
{
}

static inline void trace_input_event_rel(int conidx, const char * axis, int value)
{
}

static inline void trace_input_event_abs(int conidx, const char * axis, int value)
{
}

static inline void trace_input_event_sync(void)
{
}

static inline void trace_input_mouse_mode(int absolute)
{
}

static inline void trace_vmware_value_read(uint32_t index, uint32_t value)
{
}

static inline void trace_vmware_value_write(uint32_t index, uint32_t value)
{
}

static inline void trace_vmware_palette_read(uint32_t index, uint32_t value)
{
}

static inline void trace_vmware_palette_write(uint32_t index, uint32_t value)
{
}

static inline void trace_vmware_scratch_read(uint32_t index, uint32_t value)
{
}

static inline void trace_vmware_scratch_write(uint32_t index, uint32_t value)
{
}

static inline void trace_vmware_setmode(uint32_t w, uint32_t h, uint32_t bpp)
{
}

static inline void trace_virtio_gpu_features(bool virgl)
{
}

static inline void trace_virtio_gpu_cmd_get_display_info(void)
{
}

static inline void trace_virtio_gpu_cmd_get_caps(void)
{
}

static inline void trace_virtio_gpu_cmd_set_scanout(uint32_t id, uint32_t res, uint32_t w, uint32_t h, uint32_t x, uint32_t y)
{
}

static inline void trace_virtio_gpu_cmd_res_create_2d(uint32_t res, uint32_t fmt, uint32_t w, uint32_t h)
{
}

static inline void trace_virtio_gpu_cmd_res_create_3d(uint32_t res, uint32_t fmt, uint32_t w, uint32_t h, uint32_t d)
{
}

static inline void trace_virtio_gpu_cmd_res_unref(uint32_t res)
{
}

static inline void trace_virtio_gpu_cmd_res_back_attach(uint32_t res)
{
}

static inline void trace_virtio_gpu_cmd_res_back_detach(uint32_t res)
{
}

static inline void trace_virtio_gpu_cmd_res_xfer_toh_2d(uint32_t res)
{
}

static inline void trace_virtio_gpu_cmd_res_xfer_toh_3d(uint32_t res)
{
}

static inline void trace_virtio_gpu_cmd_res_xfer_fromh_3d(uint32_t res)
{
}

static inline void trace_virtio_gpu_cmd_res_flush(uint32_t res, uint32_t w, uint32_t h, uint32_t x, uint32_t y)
{
}

static inline void trace_virtio_gpu_cmd_ctx_create(uint32_t ctx, const char * name)
{
}

static inline void trace_virtio_gpu_cmd_ctx_destroy(uint32_t ctx)
{
}

static inline void trace_virtio_gpu_cmd_ctx_res_attach(uint32_t ctx, uint32_t res)
{
}

static inline void trace_virtio_gpu_cmd_ctx_res_detach(uint32_t ctx, uint32_t res)
{
}

static inline void trace_virtio_gpu_cmd_ctx_submit(uint32_t ctx, uint32_t size)
{
}

static inline void trace_virtio_gpu_update_cursor(uint32_t scanout, uint32_t x, uint32_t y, const char * type, uint32_t res)
{
}

static inline void trace_virtio_gpu_fence_ctrl(uint64_t fence, uint32_t type)
{
}

static inline void trace_virtio_gpu_fence_resp(uint64_t fence)
{
}

static inline void trace_qemu_loadvm_state_section(unsigned int section_type)
{
}

static inline void trace_qemu_loadvm_state_section_command(int ret)
{
}

static inline void trace_qemu_loadvm_state_section_partend(uint32_t section_id)
{
}

static inline void trace_qemu_loadvm_state_main(void)
{
}

static inline void trace_qemu_loadvm_state_main_quit_parent(void)
{
}

static inline void trace_qemu_loadvm_state_post_main(int ret)
{
}

static inline void trace_qemu_loadvm_state_section_startfull(uint32_t section_id, const char * idstr, uint32_t instance_id, uint32_t version_id)
{
}

static inline void trace_qemu_savevm_send_packaged(void)
{
}

static inline void trace_loadvm_handle_cmd_packaged(unsigned int length)
{
}

static inline void trace_loadvm_handle_cmd_packaged_main(int ret)
{
}

static inline void trace_loadvm_handle_cmd_packaged_received(int ret)
{
}

static inline void trace_loadvm_postcopy_handle_advise(void)
{
}

static inline void trace_loadvm_postcopy_handle_listen(void)
{
}

static inline void trace_loadvm_postcopy_handle_run(void)
{
}

static inline void trace_loadvm_postcopy_handle_run_cpu_sync(void)
{
}

static inline void trace_loadvm_postcopy_handle_run_vmstart(void)
{
}

static inline void trace_loadvm_postcopy_ram_handle_discard(void)
{
}

static inline void trace_loadvm_postcopy_ram_handle_discard_end(void)
{
}

static inline void trace_loadvm_postcopy_ram_handle_discard_header(const char * ramid, uint16_t len)
{
}

static inline void trace_loadvm_process_command(uint16_t com, uint16_t len)
{
}

static inline void trace_loadvm_process_command_ping(uint32_t val)
{
}

static inline void trace_postcopy_ram_listen_thread_exit(void)
{
}

static inline void trace_postcopy_ram_listen_thread_start(void)
{
}

static inline void trace_qemu_savevm_send_postcopy_advise(void)
{
}

static inline void trace_qemu_savevm_send_postcopy_ram_discard(const char * id, uint16_t len)
{
}

static inline void trace_savevm_command_send(uint16_t command, uint16_t len)
{
}

static inline void trace_savevm_section_start(const char * id, unsigned int section_id)
{
}

static inline void trace_savevm_section_end(const char * id, unsigned int section_id, int ret)
{
}

static inline void trace_savevm_section_skip(const char * id, unsigned int section_id)
{
}

static inline void trace_savevm_send_open_return_path(void)
{
}

static inline void trace_savevm_send_ping(uint32_t val)
{
}

static inline void trace_savevm_send_postcopy_listen(void)
{
}

static inline void trace_savevm_send_postcopy_run(void)
{
}

static inline void trace_savevm_state_begin(void)
{
}

static inline void trace_savevm_state_header(void)
{
}

static inline void trace_savevm_state_iterate(void)
{
}

static inline void trace_savevm_state_cleanup(void)
{
}

static inline void trace_savevm_state_complete_precopy(void)
{
}

static inline void trace_vmstate_save(const char * idstr, const char * vmsd_name)
{
}

static inline void trace_vmstate_load(const char * idstr, const char * vmsd_name)
{
}

static inline void trace_qemu_announce_self_iter(const char * mac)
{
}

static inline void trace_vmstate_load_field_error(const char * field, int ret)
{
}

static inline void trace_vmstate_load_state(const char * name, int version_id)
{
}

static inline void trace_vmstate_load_state_end(const char * name, const char * reason, int val)
{
}

static inline void trace_vmstate_load_state_field(const char * name, const char * field)
{
}

static inline void trace_vmstate_subsection_load(const char * parent)
{
}

static inline void trace_vmstate_subsection_load_bad(const char * parent, const char * sub)
{
}

static inline void trace_vmstate_subsection_load_good(const char * parent)
{
}

static inline void trace_qemu_file_fclose(void)
{
}

static inline void trace_get_queued_page(const char * block_name, uint64_t tmp_offset, uint64_t ram_addr)
{
}

static inline void trace_get_queued_page_not_dirty(const char * block_name, uint64_t tmp_offset, uint64_t ram_addr, int sent)
{
}

static inline void trace_migration_bitmap_sync_start(void)
{
}

static inline void trace_migration_bitmap_sync_end(uint64_t dirty_pages)
{
}

static inline void trace_migration_throttle(void)
{
}

static inline void trace_ram_load_postcopy_loop(uint64_t addr, int flags)
{
}

static inline void trace_ram_postcopy_send_discard_bitmap(void)
{
}

static inline void trace_ram_save_queue_pages(const char * rbname, size_t start, size_t len)
{
}

static inline void trace_qxl_interface_set_mm_time(int qid, uint32_t mm_time)
{
}

static inline void trace_qxl_io_write_vga(int qid, const char * mode, uint32_t addr, uint32_t val)
{
}

static inline void trace_qxl_create_guest_primary(int qid, uint32_t width, uint32_t height, uint64_t mem, uint32_t format, uint32_t position)
{
}

static inline void trace_qxl_create_guest_primary_rest(int qid, int32_t stride, uint32_t type, uint32_t flags)
{
}

static inline void trace_qxl_destroy_primary(int qid)
{
}

static inline void trace_qxl_enter_vga_mode(int qid)
{
}

static inline void trace_qxl_exit_vga_mode(int qid)
{
}

static inline void trace_qxl_hard_reset(int qid, int64_t loadvm)
{
}

static inline void trace_qxl_interface_async_complete_io(int qid, uint32_t current_async, void * cookie)
{
}

static inline void trace_qxl_interface_attach_worker(int qid)
{
}

static inline void trace_qxl_interface_get_init_info(int qid)
{
}

static inline void trace_qxl_interface_set_compression_level(int qid, int64_t level)
{
}

static inline void trace_qxl_interface_update_area_complete(int qid, uint32_t surface_id, uint32_t dirty_left, uint32_t dirty_right, uint32_t dirty_top, uint32_t dirty_bottom)
{
}

static inline void trace_qxl_interface_update_area_complete_rest(int qid, uint32_t num_updated_rects)
{
}

static inline void trace_qxl_interface_update_area_complete_overflow(int qid, int max)
{
}

static inline void trace_qxl_interface_update_area_complete_schedule_bh(int qid, uint32_t num_dirty)
{
}

static inline void trace_qxl_io_destroy_primary_ignored(int qid, const char * mode)
{
}

static inline void trace_qxl_io_log(int qid, const uint8_t * log_buf)
{
}

static inline void trace_qxl_io_read_unexpected(int qid)
{
}

static inline void trace_qxl_io_unexpected_vga_mode(int qid, uint64_t addr, uint64_t val, const char * desc)
{
}

static inline void trace_qxl_io_write(int qid, const char * mode, uint64_t addr, const char * aname, uint64_t val, unsigned size, int async)
{
}

static inline void trace_qxl_memslot_add_guest(int qid, uint32_t slot_id, uint64_t guest_start, uint64_t guest_end)
{
}

static inline void trace_qxl_post_load(int qid, const char * mode)
{
}

static inline void trace_qxl_pre_load(int qid)
{
}

static inline void trace_qxl_pre_save(int qid)
{
}

static inline void trace_qxl_reset_surfaces(int qid)
{
}

static inline void trace_qxl_ring_command_check(int qid, const char * mode)
{
}

static inline void trace_qxl_ring_command_get(int qid, const char * mode)
{
}

static inline void trace_qxl_ring_command_req_notification(int qid)
{
}

static inline void trace_qxl_ring_cursor_check(int qid, const char * mode)
{
}

static inline void trace_qxl_ring_cursor_get(int qid, const char * mode)
{
}

static inline void trace_qxl_ring_cursor_req_notification(int qid)
{
}

static inline void trace_qxl_ring_res_push(int qid, const char * mode, uint32_t surface_count, uint32_t free_res, void * last_release, const char * notify)
{
}

static inline void trace_qxl_ring_res_push_rest(int qid, uint32_t ring_has, uint32_t ring_size, uint32_t prod, uint32_t cons)
{
}

static inline void trace_qxl_ring_res_put(int qid, uint32_t free_res)
{
}

static inline void trace_qxl_set_mode(int qid, int modenr, uint32_t x_res, uint32_t y_res, uint32_t bits, uint64_t devmem)
{
}

static inline void trace_qxl_soft_reset(int qid)
{
}

static inline void trace_qxl_spice_destroy_surfaces_complete(int qid)
{
}

static inline void trace_qxl_spice_destroy_surfaces(int qid, int async)
{
}

static inline void trace_qxl_spice_destroy_surface_wait_complete(int qid, uint32_t id)
{
}

static inline void trace_qxl_spice_destroy_surface_wait(int qid, uint32_t id, int async)
{
}

static inline void trace_qxl_spice_flush_surfaces_async(int qid, uint32_t surface_count, uint32_t num_free_res)
{
}

static inline void trace_qxl_spice_monitors_config(int qid)
{
}

static inline void trace_qxl_spice_loadvm_commands(int qid, void * ext, uint32_t count)
{
}

static inline void trace_qxl_spice_oom(int qid)
{
}

static inline void trace_qxl_spice_reset_cursor(int qid)
{
}

static inline void trace_qxl_spice_reset_image_cache(int qid)
{
}

static inline void trace_qxl_spice_reset_memslots(int qid)
{
}

static inline void trace_qxl_spice_update_area(int qid, uint32_t surface_id, uint32_t left, uint32_t right, uint32_t top, uint32_t bottom)
{
}

static inline void trace_qxl_spice_update_area_rest(int qid, uint32_t num_dirty_rects, uint32_t clear_dirty_region)
{
}

static inline void trace_qxl_surfaces_dirty(int qid, int surface, int offset, int size)
{
}

static inline void trace_qxl_send_events(int qid, uint32_t events)
{
}

static inline void trace_qxl_send_events_vm_stopped(int qid, uint32_t events)
{
}

static inline void trace_qxl_set_guest_bug(int qid)
{
}

static inline void trace_qxl_interrupt_client_monitors_config(int qid, int num_heads, void * heads)
{
}

static inline void trace_qxl_client_monitors_config_unsupported_by_guest(int qid, uint32_t int_mask, void * client_monitors_config)
{
}

static inline void trace_qxl_client_monitors_config_unsupported_by_device(int qid, int revision)
{
}

static inline void trace_qxl_client_monitors_config_capped(int qid, int requested, int limit)
{
}

static inline void trace_qxl_client_monitors_config_crc(int qid, unsigned size, uint32_t crc32)
{
}

static inline void trace_qxl_set_client_capabilities_unsupported_by_revision(int qid, int revision)
{
}

static inline void trace_qemu_spice_add_memslot(int qid, uint32_t slot_id, unsigned long virt_start, unsigned long virt_end, int async)
{
}

static inline void trace_qemu_spice_del_memslot(int qid, uint32_t gid, uint32_t slot_id)
{
}

static inline void trace_qemu_spice_create_primary_surface(int qid, uint32_t sid, void * surface, int async)
{
}

static inline void trace_qemu_spice_destroy_primary_surface(int qid, uint32_t sid, int async)
{
}

static inline void trace_qemu_spice_wakeup(uint32_t qid)
{
}

static inline void trace_qemu_spice_create_update(uint32_t left, uint32_t right, uint32_t top, uint32_t bottom)
{
}

static inline void trace_qxl_render_blit(int32_t stride, int32_t left, int32_t right, int32_t top, int32_t bottom)
{
}

static inline void trace_qxl_render_guest_primary_resized(int32_t width, int32_t height, int32_t stride, int32_t bytes_pp, int32_t bits_pp)
{
}

static inline void trace_qxl_render_update_area_done(void * cookie)
{
}

static inline void trace_spapr_pci_msi(const char * msg, uint32_t ca)
{
}

static inline void trace_spapr_pci_msi_setup(const char * name, unsigned vector, uint64_t addr)
{
}

static inline void trace_spapr_pci_rtas_ibm_change_msi(unsigned cfg, unsigned func, unsigned req, unsigned first)
{
}

static inline void trace_spapr_pci_rtas_ibm_query_interrupt_source_number(unsigned ioa, unsigned intr)
{
}

static inline void trace_spapr_pci_msi_write(uint64_t addr, uint64_t data, uint32_t dt_irq)
{
}

static inline void trace_spapr_pci_lsi_set(const char * busname, int pin, uint32_t irq)
{
}

static inline void trace_spapr_pci_msi_retry(unsigned config_addr, unsigned req_num, unsigned max_irqs)
{
}

static inline void trace_pci_update_mappings_del(void * d, uint32_t bus, uint32_t slot, uint32_t func, int bar, uint64_t addr, uint64_t size)
{
}

static inline void trace_pci_update_mappings_add(void * d, uint32_t bus, uint32_t slot, uint32_t func, int bar, uint64_t addr, uint64_t size)
{
}

static inline void trace_pcnet_s_reset(void * s)
{
}

static inline void trace_pcnet_user_int(void * s)
{
}

static inline void trace_pcnet_isr_change(void * s, uint32_t isr, uint32_t isr_old)
{
}

static inline void trace_pcnet_init(void * s, uint64_t init_addr)
{
}

static inline void trace_pcnet_rlen_tlen(void * s, uint32_t rlen, uint32_t tlen)
{
}

static inline void trace_pcnet_ss32_rdra_tdra(void * s, uint32_t ss32, uint32_t rdra, uint32_t rcvrl, uint32_t tdra, uint32_t xmtrl)
{
}

static inline void trace_pcnet_aprom_writeb(void * opaque, uint32_t addr, uint32_t val)
{
}

static inline void trace_pcnet_aprom_readb(void * opaque, uint32_t addr, uint32_t val)
{
}

static inline void trace_pcnet_ioport_read(void * opaque, uint64_t addr, unsigned size)
{
}

static inline void trace_pcnet_ioport_write(void * opaque, uint64_t addr, uint64_t data, unsigned size)
{
}

static inline void trace_pcnet_mmio_writeb(void * opaque, uint64_t addr, uint32_t val)
{
}

static inline void trace_pcnet_mmio_writew(void * opaque, uint64_t addr, uint32_t val)
{
}

static inline void trace_pcnet_mmio_writel(void * opaque, uint64_t addr, uint32_t val)
{
}

static inline void trace_pcnet_mmio_readb(void * opaque, uint64_t addr, uint32_t val)
{
}

static inline void trace_pcnet_mmio_readw(void * opaque, uint64_t addr, uint32_t val)
{
}

static inline void trace_pcnet_mmio_readl(void * opaque, uint64_t addr, uint32_t val)
{
}

static inline void trace_xics_icp_check_ipi(int server, uint8_t mfrr)
{
}

static inline void trace_xics_icp_accept(uint32_t old_xirr, uint32_t new_xirr)
{
}

static inline void trace_xics_icp_eoi(int server, uint32_t xirr, uint32_t new_xirr)
{
}

static inline void trace_xics_icp_irq(int server, int nr, uint8_t priority)
{
}

static inline void trace_xics_icp_raise(uint32_t xirr, uint8_t pending_priority)
{
}

static inline void trace_xics_set_irq_msi(int srcno, int nr)
{
}

static inline void trace_xics_masked_pending(void)
{
}

static inline void trace_xics_set_irq_lsi(int srcno, int nr)
{
}

static inline void trace_xics_ics_write_xive(int nr, int srcno, int server, uint8_t priority)
{
}

static inline void trace_xics_ics_reject(int nr, int srcno)
{
}

static inline void trace_xics_ics_eoi(int nr)
{
}

static inline void trace_xics_alloc(int src, int irq)
{
}

static inline void trace_xics_alloc_block(int src, int first, int num, bool lsi, int align)
{
}

static inline void trace_xics_ics_free(int src, int irq, int num)
{
}

static inline void trace_xics_ics_free_warn(int src, int irq)
{
}

static inline void trace_spapr_cas_failed(unsigned long n)
{
}

static inline void trace_spapr_cas_continue(unsigned long n)
{
}

static inline void trace_spapr_cas_pvr_try(uint32_t pvr)
{
}

static inline void trace_spapr_cas_pvr(uint32_t cur_pvr, bool cpu_match, uint32_t new_pvr, uint64_t pcr)
{
}

static inline void trace_spapr_iommu_put(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t ret)
{
}

static inline void trace_spapr_iommu_get(uint64_t liobn, uint64_t ioba, uint64_t ret, uint64_t tce)
{
}

static inline void trace_spapr_iommu_indirect(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t iobaN, uint64_t tceN, uint64_t ret)
{
}

static inline void trace_spapr_iommu_stuff(uint64_t liobn, uint64_t ioba, uint64_t tce_value, uint64_t npages, uint64_t ret)
{
}

static inline void trace_spapr_iommu_pci_put(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t ret)
{
}

static inline void trace_spapr_iommu_pci_get(uint64_t liobn, uint64_t ioba, uint64_t ret, uint64_t tce)
{
}

static inline void trace_spapr_iommu_pci_indirect(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t iobaN, uint64_t tceN, uint64_t ret)
{
}

static inline void trace_spapr_iommu_pci_stuff(uint64_t liobn, uint64_t ioba, uint64_t tce_value, uint64_t npages, uint64_t ret)
{
}

static inline void trace_spapr_iommu_xlate(uint64_t liobn, uint64_t ioba, uint64_t tce, unsigned perm, unsigned pgsize)
{
}

static inline void trace_spapr_iommu_new_table(uint64_t liobn, void * tcet, void * table, int fd)
{
}

static inline void trace_ppc_tb_adjust(uint64_t offs1, uint64_t offs2, int64_t diff, int64_t seconds)
{
}

static inline void trace_prep_io_800_writeb(uint32_t addr, uint32_t val)
{
}

static inline void trace_prep_io_800_readb(uint32_t addr, uint32_t retval)
{
}

static inline void trace_buffer_resize(const char * buf, size_t olen, size_t len)
{
}

static inline void trace_buffer_move_empty(const char * buf, size_t len, const char * from)
{
}

static inline void trace_buffer_move(const char * buf, size_t len, const char * from)
{
}

static inline void trace_buffer_free(const char * buf, size_t len)
{
}

static inline void trace_hbitmap_iter_skip_words(const void * hb, void * hbi, uint64_t pos, unsigned long cur)
{
}

static inline void trace_hbitmap_reset(void * hb, uint64_t start, uint64_t count, uint64_t sbit, uint64_t ebit)
{
}

static inline void trace_hbitmap_set(void * hb, uint64_t start, uint64_t count, uint64_t sbit, uint64_t ebit)
{
}

static inline void trace_get_skeys_nonzero(int rc)
{
}

static inline void trace_set_skeys_nonzero(int rc)
{
}

static inline void trace_ioinst(const char * insn)
{
}

static inline void trace_ioinst_sch_id(const char * insn, int cssid, int ssid, int schid)
{
}

static inline void trace_ioinst_chp_id(const char * insn, int cssid, int chpid)
{
}

static inline void trace_ioinst_chsc_cmd(uint16_t cmd, uint16_t len)
{
}

static inline void trace_css_enable_facility(const char * facility)
{
}

static inline void trace_css_crw(uint8_t rsc, uint8_t erc, uint16_t rsid, const char * chained)
{
}

static inline void trace_css_chpid_add(uint8_t cssid, uint8_t chpid, uint8_t type)
{
}

static inline void trace_css_new_image(uint8_t cssid, const char * default_cssid)
{
}

static inline void trace_css_assign_subch(const char * do_assign, uint8_t cssid, uint8_t ssid, uint16_t schid, uint16_t devno)
{
}

static inline void trace_css_io_interrupt(int cssid, int ssid, int schid, uint32_t intparm, uint8_t isc, const char * conditional)
{
}

static inline void trace_css_adapter_interrupt(uint8_t isc)
{
}

static inline void trace_virtio_ccw_interpret_ccw(int cssid, int ssid, int schid, int cmd_code)
{
}

static inline void trace_virtio_ccw_new_device(int cssid, int ssid, int schid, int devno, const char * devno_mode)
{
}

static inline void trace_flic_create_device(int err)
{
}

static inline void trace_flic_no_device_api(int err)
{
}

static inline void trace_flic_reset_failed(int err)
{
}

static inline void trace_await_return_path_close_on_source_close(void)
{
}

static inline void trace_await_return_path_close_on_source_joining(void)
{
}

static inline void trace_migrate_set_state(int new_state)
{
}

static inline void trace_migrate_fd_cleanup(void)
{
}

static inline void trace_migrate_fd_error(void)
{
}

static inline void trace_migrate_fd_cancel(void)
{
}

static inline void trace_migrate_handle_rp_req_pages(const char * rbname, size_t start, size_t len)
{
}

static inline void trace_migrate_pending(uint64_t size, uint64_t max, uint64_t post, uint64_t nonpost)
{
}

static inline void trace_migrate_send_rp_message(int msg_type, uint16_t len)
{
}

static inline void trace_migration_completion_file_err(void)
{
}

static inline void trace_migration_completion_postcopy_end(void)
{
}

static inline void trace_migration_completion_postcopy_end_after_complete(void)
{
}

static inline void trace_migration_completion_postcopy_end_before_rp(void)
{
}

static inline void trace_migration_completion_postcopy_end_after_rp(int rp_error)
{
}

static inline void trace_migration_thread_after_loop(void)
{
}

static inline void trace_migration_thread_file_err(void)
{
}

static inline void trace_migration_thread_setup_complete(void)
{
}

static inline void trace_open_return_path_on_source(void)
{
}

static inline void trace_open_return_path_on_source_continue(void)
{
}

static inline void trace_postcopy_start(void)
{
}

static inline void trace_postcopy_start_set_run(void)
{
}

static inline void trace_source_return_path_thread_bad_end(void)
{
}

static inline void trace_source_return_path_thread_end(void)
{
}

static inline void trace_source_return_path_thread_entry(void)
{
}

static inline void trace_source_return_path_thread_loop_top(void)
{
}

static inline void trace_source_return_path_thread_pong(uint32_t val)
{
}

static inline void trace_source_return_path_thread_shut(uint32_t val)
{
}

static inline void trace_migrate_global_state_post_load(const char * state)
{
}

static inline void trace_migrate_global_state_pre_save(const char * state)
{
}

static inline void trace_migration_thread_low_pending(uint64_t pending)
{
}

static inline void trace_migrate_state_too_big(void)
{
}

static inline void trace_migrate_transferred(uint64_t tranferred, uint64_t time_spent, double bandwidth, uint64_t size)
{
}

static inline void trace_process_incoming_migration_co_end(int ret, int ps)
{
}

static inline void trace_process_incoming_migration_co_postcopy_end_main(void)
{
}

static inline void trace_qemu_rdma_accept_incoming_migration(void)
{
}

static inline void trace_qemu_rdma_accept_incoming_migration_accepted(void)
{
}

static inline void trace_qemu_rdma_accept_pin_state(bool pin)
{
}

static inline void trace_qemu_rdma_accept_pin_verbsc(void * verbs)
{
}

static inline void trace_qemu_rdma_block_for_wrid_miss(const char * wcompstr, int wcomp, const char * gcompstr, uint64_t req)
{
}

static inline void trace_qemu_rdma_block_for_wrid_miss_b(const char * wcompstr, int wcomp, const char * gcompstr, uint64_t req)
{
}

static inline void trace_qemu_rdma_cleanup_disconnect(void)
{
}

static inline void trace_qemu_rdma_cleanup_waiting_for_disconnect(void)
{
}

static inline void trace_qemu_rdma_close(void)
{
}

static inline void trace_qemu_rdma_connect_pin_all_requested(void)
{
}

static inline void trace_qemu_rdma_connect_pin_all_outcome(bool pin)
{
}

static inline void trace_qemu_rdma_dest_init_trying(const char * host, const char * ip)
{
}

static inline void trace_qemu_rdma_dump_gid(const char * who, const char * src, const char * dst)
{
}

static inline void trace_qemu_rdma_exchange_get_response_start(const char * desc)
{
}

static inline void trace_qemu_rdma_exchange_get_response_none(const char * desc, int type)
{
}

static inline void trace_qemu_rdma_exchange_send_issue_callback(void)
{
}

static inline void trace_qemu_rdma_exchange_send_waiting(const char * desc)
{
}

static inline void trace_qemu_rdma_exchange_send_received(const char * desc)
{
}

static inline void trace_qemu_rdma_fill(size_t control_len, size_t size)
{
}

static inline void trace_qemu_rdma_init_ram_blocks(int blocks)
{
}

static inline void trace_qemu_rdma_poll_recv(const char * compstr, int64_t comp, int64_t id, int sent)
{
}

static inline void trace_qemu_rdma_poll_write(const char * compstr, int64_t comp, int left, uint64_t block, uint64_t chunk, void * local, void * remote)
{
}

static inline void trace_qemu_rdma_poll_other(const char * compstr, int64_t comp, int left)
{
}

static inline void trace_qemu_rdma_post_send_control(const char * desc)
{
}

static inline void trace_qemu_rdma_register_and_get_keys(uint64_t len, void * start)
{
}

static inline void trace_qemu_rdma_registration_handle_compress(int64_t length, int index, int64_t offset)
{
}

static inline void trace_qemu_rdma_registration_handle_finished(void)
{
}

static inline void trace_qemu_rdma_registration_handle_ram_blocks(void)
{
}

static inline void trace_qemu_rdma_registration_handle_ram_blocks_loop(const char * name, uint64_t offset, uint64_t length, void * local_host_addr, unsigned int src_index)
{
}

static inline void trace_qemu_rdma_registration_handle_register(int requests)
{
}

static inline void trace_qemu_rdma_registration_handle_register_loop(int req, int index, uint64_t addr, uint64_t chunks)
{
}

static inline void trace_qemu_rdma_registration_handle_register_rkey(int rkey)
{
}

static inline void trace_qemu_rdma_registration_handle_unregister(int requests)
{
}

static inline void trace_qemu_rdma_registration_handle_unregister_loop(int count, int index, uint64_t chunk)
{
}

static inline void trace_qemu_rdma_registration_handle_unregister_success(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_registration_handle_wait(void)
{
}

static inline void trace_qemu_rdma_registration_start(uint64_t flags)
{
}

static inline void trace_qemu_rdma_registration_stop(uint64_t flags)
{
}

static inline void trace_qemu_rdma_registration_stop_ram(void)
{
}

static inline void trace_qemu_rdma_resolve_host_trying(const char * host, const char * ip)
{
}

static inline void trace_qemu_rdma_signal_unregister_append(uint64_t chunk, int pos)
{
}

static inline void trace_qemu_rdma_signal_unregister_already(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_unregister_waiting_inflight(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_unregister_waiting_proc(uint64_t chunk, int pos)
{
}

static inline void trace_qemu_rdma_unregister_waiting_send(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_unregister_waiting_complete(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_write_flush(int sent)
{
}

static inline void trace_qemu_rdma_write_one_block(int count, int block, uint64_t chunk, uint64_t current, uint64_t len, int nb_sent, int nb_chunks)
{
}

static inline void trace_qemu_rdma_write_one_post(uint64_t chunk, long addr, long remote, uint32_t len)
{
}

static inline void trace_qemu_rdma_write_one_queue_full(void)
{
}

static inline void trace_qemu_rdma_write_one_recvregres(int mykey, int theirkey, uint64_t chunk)
{
}

static inline void trace_qemu_rdma_write_one_sendreg(uint64_t chunk, int len, int index, int64_t offset)
{
}

static inline void trace_qemu_rdma_write_one_top(uint64_t chunks, uint64_t size)
{
}

static inline void trace_qemu_rdma_write_one_zero(uint64_t chunk, int len, int index, int64_t offset)
{
}

static inline void trace_rdma_add_block(const char * block_name, int block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
}

static inline void trace_rdma_block_notification_handle(const char * name, int index)
{
}

static inline void trace_rdma_delete_block(void * block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
}

static inline void trace_rdma_start_incoming_migration(void)
{
}

static inline void trace_rdma_start_incoming_migration_after_dest_init(void)
{
}

static inline void trace_rdma_start_incoming_migration_after_rdma_listen(void)
{
}

static inline void trace_rdma_start_outgoing_migration_after_rdma_connect(void)
{
}

static inline void trace_rdma_start_outgoing_migration_after_rdma_source_init(void)
{
}

static inline void trace_postcopy_discard_send_finish(const char * ramblock, int nwords, int ncmds)
{
}

static inline void trace_postcopy_discard_send_range(const char * ramblock, unsigned long start, unsigned long length)
{
}

static inline void trace_postcopy_ram_discard_range(void * start, size_t length)
{
}

static inline void trace_postcopy_cleanup_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
}

static inline void trace_postcopy_init_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
}

static inline void trace_postcopy_nhp_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
}

static inline void trace_postcopy_place_page(void * host_addr)
{
}

static inline void trace_postcopy_place_page_zero(void * host_addr)
{
}

static inline void trace_postcopy_ram_enable_notify(void)
{
}

static inline void trace_postcopy_ram_fault_thread_entry(void)
{
}

static inline void trace_postcopy_ram_fault_thread_exit(void)
{
}

static inline void trace_postcopy_ram_fault_thread_quit(void)
{
}

static inline void trace_postcopy_ram_fault_thread_request(uint64_t hostaddr, const char * ramblock, size_t offset)
{
}

static inline void trace_postcopy_ram_incoming_cleanup_closeuf(void)
{
}

static inline void trace_postcopy_ram_incoming_cleanup_entry(void)
{
}

static inline void trace_postcopy_ram_incoming_cleanup_exit(void)
{
}

static inline void trace_postcopy_ram_incoming_cleanup_join(void)
{
}

static inline void trace_kvm_ioctl(int type, void * arg)
{
}

static inline void trace_kvm_vm_ioctl(int type, void * arg)
{
}

static inline void trace_kvm_vcpu_ioctl(int cpu_index, int type, void * arg)
{
}

static inline void trace_kvm_run_exit(int cpu_index, uint32_t reason)
{
}

static inline void trace_kvm_device_ioctl(int fd, int type, void * arg)
{
}

static inline void trace_kvm_failed_reg_get(uint64_t id, const char * msg)
{
}

static inline void trace_kvm_failed_reg_set(uint64_t id, const char * msg)
{
}

static inline void trace_kvm_failed_spr_set(int str, const char * msg)
{
}

static inline void trace_kvm_failed_spr_get(int str, const char * msg)
{
}

static inline void trace_exec_tb(void * tb, uintptr_t pc)
{
}

static inline void trace_exec_tb_nocache(void * tb, uintptr_t pc)
{
}

static inline void trace_exec_tb_exit(void * next_tb, unsigned int flags)
{
}

static inline void trace_translate_block(void * tb, uintptr_t pc, uint8_t * tb_code)
{
}

static inline void trace_memory_region_ops_read(int cpu_index, void * mr, uint64_t addr, uint64_t value, unsigned size)
{
}

static inline void trace_memory_region_ops_write(int cpu_index, void * mr, uint64_t addr, uint64_t value, unsigned size)
{
}

static inline void trace_memory_region_subpage_read(int cpu_index, void * mr, uint64_t offset, uint64_t value, unsigned size)
{
}

static inline void trace_memory_region_subpage_write(int cpu_index, void * mr, uint64_t offset, uint64_t value, unsigned size)
{
}

static inline void trace_memory_region_tb_read(int cpu_index, uint64_t addr, uint64_t value, unsigned size)
{
}

static inline void trace_memory_region_tb_write(int cpu_index, uint64_t addr, uint64_t value, unsigned size)
{
}

static inline void trace_object_dynamic_cast_assert(const char * type, const char * target, const char * file, int line, const char * func)
{
}

static inline void trace_object_class_dynamic_cast_assert(const char * type, const char * target, const char * file, int line, const char * func)
{
}

static inline void trace_xen_pv_mmio_read(uint64_t addr)
{
}

static inline void trace_xen_pv_mmio_write(uint64_t addr)
{
}

static inline void trace_pci_cfg_read(const char * dev, unsigned devid, unsigned fnid, unsigned offs, unsigned val)
{
}

static inline void trace_pci_cfg_write(const char * dev, unsigned devid, unsigned fnid, unsigned offs, unsigned val)
{
}

static inline void trace_vfio_intx_interrupt(const char * name, char line)
{
}

static inline void trace_vfio_intx_eoi(const char * name)
{
}

static inline void trace_vfio_intx_enable_kvm(const char * name)
{
}

static inline void trace_vfio_intx_disable_kvm(const char * name)
{
}

static inline void trace_vfio_intx_update(const char * name, int new_irq, int target_irq)
{
}

static inline void trace_vfio_intx_enable(const char * name)
{
}

static inline void trace_vfio_intx_disable(const char * name)
{
}

static inline void trace_vfio_msi_interrupt(const char * name, int index, uint64_t addr, int data)
{
}

static inline void trace_vfio_msix_vector_do_use(const char * name, int index)
{
}

static inline void trace_vfio_msix_vector_release(const char * name, int index)
{
}

static inline void trace_vfio_msix_enable(const char * name)
{
}

static inline void trace_vfio_msix_pba_disable(const char * name)
{
}

static inline void trace_vfio_msix_pba_enable(const char * name)
{
}

static inline void trace_vfio_msix_disable(const char * name)
{
}

static inline void trace_vfio_msix_fixup(const char * name, int bar, uint64_t start, uint64_t end)
{
}

static inline void trace_vfio_msi_enable(const char * name, int nr_vectors)
{
}

static inline void trace_vfio_msi_disable(const char * name)
{
}

static inline void trace_vfio_pci_load_rom(const char * name, unsigned long size, unsigned long offset, unsigned long flags)
{
}

static inline void trace_vfio_rom_read(const char * name, uint64_t addr, int size, uint64_t data)
{
}

static inline void trace_vfio_pci_size_rom(const char * name, int size)
{
}

static inline void trace_vfio_vga_write(uint64_t addr, uint64_t data, int size)
{
}

static inline void trace_vfio_vga_read(uint64_t addr, int size, uint64_t data)
{
}

static inline void trace_vfio_pci_read_config(const char * name, int addr, int len, int val)
{
}

static inline void trace_vfio_pci_write_config(const char * name, int addr, int val, int len)
{
}

static inline void trace_vfio_msi_setup(const char * name, int pos)
{
}

static inline void trace_vfio_msix_early_setup(const char * name, int pos, int table_bar, int offset, int entries)
{
}

static inline void trace_vfio_check_pcie_flr(const char * name)
{
}

static inline void trace_vfio_check_pm_reset(const char * name)
{
}

static inline void trace_vfio_check_af_flr(const char * name)
{
}

static inline void trace_vfio_pci_hot_reset(const char * name, const char * type)
{
}

static inline void trace_vfio_pci_hot_reset_has_dep_devices(const char * name)
{
}

static inline void trace_vfio_pci_hot_reset_dep_devices(int domain, int bus, int slot, int function, int group_id)
{
}

static inline void trace_vfio_pci_hot_reset_result(const char * name, const char * result)
{
}

static inline void trace_vfio_populate_device_config(const char * name, unsigned long size, unsigned long offset, unsigned long flags)
{
}

static inline void trace_vfio_populate_device_get_irq_info_failure(void)
{
}

static inline void trace_vfio_initfn(const char * name, int group_id)
{
}

static inline void trace_vfio_pci_reset(const char * name)
{
}

static inline void trace_vfio_pci_reset_flr(const char * name)
{
}

static inline void trace_vfio_pci_reset_pm(const char * name)
{
}

static inline void trace_vfio_pci_emulated_vendor_id(const char * name, uint16_t val)
{
}

static inline void trace_vfio_pci_emulated_device_id(const char * name, uint16_t val)
{
}

static inline void trace_vfio_pci_emulated_sub_vendor_id(const char * name, uint16_t val)
{
}

static inline void trace_vfio_pci_emulated_sub_device_id(const char * name, uint16_t val)
{
}

static inline void trace_vfio_quirk_rom_blacklisted(const char * name, uint16_t vid, uint16_t did)
{
}

static inline void trace_vfio_quirk_generic_window_address_write(const char * name, const char * region_name, uint64_t data)
{
}

static inline void trace_vfio_quirk_generic_window_data_read(const char * name, const char * region_name, uint64_t data)
{
}

static inline void trace_vfio_quirk_generic_window_data_write(const char * name, const char * region_name, uint64_t data)
{
}

static inline void trace_vfio_quirk_generic_mirror_read(const char * name, const char * region_name, uint64_t addr, uint64_t data)
{
}

static inline void trace_vfio_quirk_generic_mirror_write(const char * name, const char * region_name, uint64_t addr, uint64_t data)
{
}

static inline void trace_vfio_quirk_ati_3c3_read(const char * name, uint64_t data)
{
}

static inline void trace_vfio_quirk_ati_3c3_probe(const char * name)
{
}

static inline void trace_vfio_quirk_ati_bar4_probe(const char * name)
{
}

static inline void trace_vfio_quirk_ati_bar2_probe(const char * name)
{
}

static inline void trace_vfio_quirk_nvidia_3d0_state(const char * name, const char * state)
{
}

static inline void trace_vfio_quirk_nvidia_3d0_read(const char * name, uint8_t offset, unsigned size, uint64_t val)
{
}

static inline void trace_vfio_quirk_nvidia_3d0_write(const char * name, uint8_t offset, uint64_t data, unsigned size)
{
}

static inline void trace_vfio_quirk_nvidia_3d0_probe(const char * name)
{
}

static inline void trace_vfio_quirk_nvidia_bar5_state(const char * name, const char * state)
{
}

static inline void trace_vfio_quirk_nvidia_bar5_probe(const char * name)
{
}

static inline void trace_vfio_quirk_nvidia_bar0_msi_ack(const char * name)
{
}

static inline void trace_vfio_quirk_nvidia_bar0_probe(const char * name)
{
}

static inline void trace_vfio_quirk_rtl8168_fake_latch(const char * name, uint64_t val)
{
}

static inline void trace_vfio_quirk_rtl8168_msix_write(const char * name, uint16_t offset, uint64_t val)
{
}

static inline void trace_vfio_quirk_rtl8168_msix_read(const char * name, uint16_t offset, uint64_t val)
{
}

static inline void trace_vfio_quirk_rtl8168_probe(const char * name)
{
}

static inline void trace_vfio_quirk_ati_bonaire_reset_skipped(const char * name)
{
}

static inline void trace_vfio_quirk_ati_bonaire_reset_no_smc(const char * name)
{
}

static inline void trace_vfio_quirk_ati_bonaire_reset_timeout(const char * name)
{
}

static inline void trace_vfio_quirk_ati_bonaire_reset_done(const char * name)
{
}

static inline void trace_vfio_quirk_ati_bonaire_reset(const char * name)
{
}

static inline void trace_vfio_region_write(const char * name, int index, uint64_t addr, uint64_t data, unsigned size)
{
}

static inline void trace_vfio_region_read(char * name, int index, uint64_t addr, unsigned size, uint64_t data)
{
}

static inline void trace_vfio_iommu_map_notify(uint64_t iova_start, uint64_t iova_end)
{
}

static inline void trace_vfio_listener_region_add_skip(uint64_t start, uint64_t end)
{
}

static inline void trace_vfio_listener_region_add_iommu(uint64_t start, uint64_t end)
{
}

static inline void trace_vfio_listener_region_add_ram(uint64_t iova_start, uint64_t iova_end, void * vaddr)
{
}

static inline void trace_vfio_listener_region_del_skip(uint64_t start, uint64_t end)
{
}

static inline void trace_vfio_listener_region_del(uint64_t start, uint64_t end)
{
}

static inline void trace_vfio_disconnect_container(int fd)
{
}

static inline void trace_vfio_put_group(int fd)
{
}

static inline void trace_vfio_get_device(const char * name, unsigned int flags, unsigned int num_regions, unsigned int num_irqs)
{
}

static inline void trace_vfio_put_base_device(int fd)
{
}

static inline void trace_vfio_region_setup(const char * dev, int index, const char * name, unsigned long flags, unsigned long offset, unsigned long size)
{
}

static inline void trace_vfio_region_mmap_fault(const char * name, int index, unsigned long offset, unsigned long size, int fault)
{
}

static inline void trace_vfio_region_mmap(const char * name, unsigned long offset, unsigned long end)
{
}

static inline void trace_vfio_region_exit(const char * name, int index)
{
}

static inline void trace_vfio_region_finalize(const char * name, int index)
{
}

static inline void trace_vfio_region_mmaps_set_enabled(const char * name, bool enabled)
{
}

static inline void trace_vfio_platform_base_device_init(char * name, int groupid)
{
}

static inline void trace_vfio_platform_realize(char * name, char * compat)
{
}

static inline void trace_vfio_platform_eoi(int pin, int fd)
{
}

static inline void trace_vfio_platform_intp_mmap_enable(int pin)
{
}

static inline void trace_vfio_platform_intp_interrupt(int pin, int fd)
{
}

static inline void trace_vfio_platform_intp_inject_pending_lockheld(int pin, int fd)
{
}

static inline void trace_vfio_platform_populate_interrupts(int pin, int count, int flags)
{
}

static inline void trace_vfio_intp_interrupt_set_pending(int index)
{
}

static inline void trace_vfio_platform_start_level_irqfd_injection(int index, int fd, int resamplefd)
{
}

static inline void trace_vfio_platform_start_edge_irqfd_injection(int index, int fd)
{
}

static inline void trace_mhp_acpi_invalid_slot_selected(uint32_t slot)
{
}

static inline void trace_mhp_acpi_ejecting_invalid_slot(uint32_t slot)
{
}

static inline void trace_mhp_acpi_read_addr_lo(uint32_t slot, uint32_t addr)
{
}

static inline void trace_mhp_acpi_read_addr_hi(uint32_t slot, uint32_t addr)
{
}

static inline void trace_mhp_acpi_read_size_lo(uint32_t slot, uint32_t size)
{
}

static inline void trace_mhp_acpi_read_size_hi(uint32_t slot, uint32_t size)
{
}

static inline void trace_mhp_acpi_read_pxm(uint32_t slot, uint32_t pxm)
{
}

static inline void trace_mhp_acpi_read_flags(uint32_t slot, uint32_t flags)
{
}

static inline void trace_mhp_acpi_write_slot(uint32_t slot)
{
}

static inline void trace_mhp_acpi_write_ost_ev(uint32_t slot, uint32_t ev)
{
}

static inline void trace_mhp_acpi_write_ost_status(uint32_t slot, uint32_t st)
{
}

static inline void trace_mhp_acpi_clear_insert_evt(uint32_t slot)
{
}

static inline void trace_mhp_acpi_clear_remove_evt(uint32_t slot)
{
}

static inline void trace_mhp_acpi_pc_dimm_deleted(uint32_t slot)
{
}

static inline void trace_mhp_acpi_pc_dimm_delete_failed(uint32_t slot)
{
}

static inline void trace_mhp_pc_dimm_assigned_slot(int slot)
{
}

static inline void trace_mhp_pc_dimm_assigned_address(uint64_t addr)
{
}

static inline void trace_kvm_enable_cmma(int rc)
{
}

static inline void trace_kvm_clear_cmma(int rc)
{
}

static inline void trace_kvm_failed_cpu_state_set(int cpu_index, uint8_t state, const char * msg)
{
}

static inline void trace_kvm_sigp_finished(uint8_t order, int cpu_index, int dst_index, int cc)
{
}

static inline void trace_i8257_unregistered_dma(int nchan, int dma_pos, int dma_len)
{
}

static inline void trace_cpu_set_state(int cpu_index, uint8_t state)
{
}

static inline void trace_cpu_halt(int cpu_index)
{
}

static inline void trace_cpu_unhalt(int cpu_index)
{
}

static inline void trace_virt_acpi_setup(void)
{
}

static inline void trace_alpha_pci_iack_write(void)
{
}

static inline void trace_alsa_revents(int revents)
{
}

static inline void trace_alsa_pollout(int i, int fd)
{
}

static inline void trace_alsa_set_handler(int events, int index, int fd, int err)
{
}

static inline void trace_alsa_wrote_zero(int len)
{
}

static inline void trace_alsa_read_zero(long len)
{
}

static inline void trace_alsa_xrun_out(void)
{
}

static inline void trace_alsa_xrun_in(void)
{
}

static inline void trace_alsa_resume_out(void)
{
}

static inline void trace_alsa_resume_in(void)
{
}

static inline void trace_alsa_no_frames(int state)
{
}

static inline void trace_oss_version(int version)
{
}

static inline void trace_oss_invalid_available_size(int size, int bufsize)
{
}

static inline void trace_qcrypto_tls_creds_load_dh(void * creds, const char * filename)
{
}

static inline void trace_qcrypto_tls_creds_get_path(void * creds, const char * filename, const char * path)
{
}

static inline void trace_qcrypto_tls_creds_anon_load(void * creds, const char * dir)
{
}

static inline void trace_qcrypto_tls_creds_x509_load(void * creds, const char * dir)
{
}

static inline void trace_qcrypto_tls_creds_x509_check_basic_constraints(void * creds, const char * file, int status)
{
}

static inline void trace_qcrypto_tls_creds_x509_check_key_usage(void * creds, const char * file, int status, int usage, int critical)
{
}

static inline void trace_qcrypto_tls_creds_x509_check_key_purpose(void * creds, const char * file, int status, const char * usage, int critical)
{
}

static inline void trace_qcrypto_tls_creds_x509_load_cert(void * creds, int isServer, const char * file)
{
}

static inline void trace_qcrypto_tls_creds_x509_load_cert_list(void * creds, const char * file)
{
}

static inline void trace_qcrypto_tls_session_new(void * session, void * creds, const char * hostname, const char * aclname, int endpoint)
{
}

static inline void trace_vhost_user_event(const char * chr, int event)
{
}

static inline void trace_user_setup_frame(void * env, uint64_t frame_addr)
{
}

static inline void trace_user_setup_rt_frame(void * env, uint64_t frame_addr)
{
}

static inline void trace_user_do_rt_sigreturn(void * env, uint64_t frame_addr)
{
}

static inline void trace_user_do_sigreturn(void * env, uint64_t frame_addr)
{
}

static inline void trace_user_force_sig(void * env, int target_sig, int host_sig)
{
}

static inline void trace_user_handle_signal(void * env, int target_sig)
{
}

static inline void trace_user_host_signal(void * env, int host_sig, int target_sig)
{
}

static inline void trace_user_queue_signal(void * env, int target_sig)
{
}

static inline void trace_user_s390x_restore_sigregs(void * env, uint64_t sc_psw_addr, uint64_t env_psw_addr)
{
}

static inline void trace_qio_task_new(void * task, void * source, void * func, void * opaque)
{
}

static inline void trace_qio_task_complete(void * task)
{
}

static inline void trace_qio_task_abort(void * task)
{
}

static inline void trace_qio_task_thread_start(void * task, void * worker, void * opaque)
{
}

static inline void trace_qio_task_thread_run(void * task)
{
}

static inline void trace_qio_task_thread_exit(void * task)
{
}

static inline void trace_qio_task_thread_result(void * task)
{
}

static inline void trace_qio_channel_socket_new(void * ioc)
{
}

static inline void trace_qio_channel_socket_new_fd(void * ioc, int fd)
{
}

static inline void trace_qio_channel_socket_connect_sync(void * ioc, void * addr)
{
}

static inline void trace_qio_channel_socket_connect_async(void * ioc, void * addr)
{
}

static inline void trace_qio_channel_socket_connect_fail(void * ioc)
{
}

static inline void trace_qio_channel_socket_connect_complete(void * ioc, int fd)
{
}

static inline void trace_qio_channel_socket_listen_sync(void * ioc, void * addr)
{
}

static inline void trace_qio_channel_socket_listen_async(void * ioc, void * addr)
{
}

static inline void trace_qio_channel_socket_listen_fail(void * ioc)
{
}

static inline void trace_qio_channel_socket_listen_complete(void * ioc, int fd)
{
}

static inline void trace_qio_channel_socket_dgram_sync(void * ioc, void * localAddr, void * remoteAddr)
{
}

static inline void trace_qio_channel_socket_dgram_async(void * ioc, void * localAddr, void * remoteAddr)
{
}

static inline void trace_qio_channel_socket_dgram_fail(void * ioc)
{
}

static inline void trace_qio_channel_socket_dgram_complete(void * ioc, int fd)
{
}

static inline void trace_qio_channel_socket_accept(void * ioc)
{
}

static inline void trace_qio_channel_socket_accept_fail(void * ioc)
{
}

static inline void trace_qio_channel_socket_accept_complete(void * ioc, void * cioc, int fd)
{
}

static inline void trace_qio_channel_file_new_fd(void * ioc, int fd)
{
}

static inline void trace_qio_channel_file_new_path(void * ioc, const char * path, int flags, int mode, int fd)
{
}

static inline void trace_qio_channel_tls_new_client(void * ioc, void * master, void * creds, const char * hostname)
{
}

static inline void trace_qio_channel_tls_new_server(void * ioc, void * master, void * creds, const char * aclname)
{
}

static inline void trace_qio_channel_tls_handshake_start(void * ioc)
{
}

static inline void trace_qio_channel_tls_handshake_pending(void * ioc, int status)
{
}

static inline void trace_qio_channel_tls_handshake_fail(void * ioc)
{
}

static inline void trace_qio_channel_tls_handshake_complete(void * ioc)
{
}

static inline void trace_qio_channel_tls_credentials_allow(void * ioc)
{
}

static inline void trace_qio_channel_tls_credentials_deny(void * ioc)
{
}

static inline void trace_qio_channel_websock_new_server(void * ioc, void * master)
{
}

static inline void trace_qio_channel_websock_handshake_start(void * ioc)
{
}

static inline void trace_qio_channel_websock_handshake_pending(void * ioc, int status)
{
}

static inline void trace_qio_channel_websock_handshake_reply(void * ioc)
{
}

static inline void trace_qio_channel_websock_handshake_fail(void * ioc)
{
}

static inline void trace_qio_channel_websock_handshake_complete(void * ioc)
{
}

static inline void trace_qio_channel_command_new_pid(void * ioc, int writefd, int readfd, int pid)
{
}

static inline void trace_qio_channel_command_new_spawn(void * ioc, const char * binary, int flags)
{
}

static inline void trace_qio_channel_command_abort(void * ioc, int pid)
{
}

static inline void trace_qio_channel_command_wait(void * ioc, int pid, int ret, int status)
{
}

static inline void trace_aspeed_timer_ctrl_enable(uint8_t i, bool enable)
{
}

static inline void trace_aspeed_timer_ctrl_external_clock(uint8_t i, bool enable)
{
}

static inline void trace_aspeed_timer_ctrl_overflow_interrupt(uint8_t i, bool enable)
{
}

static inline void trace_aspeed_timer_ctrl_pulse_enable(uint8_t i, bool enable)
{
}

static inline void trace_aspeed_timer_set_ctrl2(uint32_t value)
{
}

static inline void trace_aspeed_timer_set_value(int timer, int reg, uint32_t value)
{
}

static inline void trace_aspeed_timer_read(uint64_t offset, unsigned size, uint64_t value)
{
}

static inline void trace_aspeed_vic_set_irq(int irq, int level)
{
}

static inline void trace_aspeed_vic_update_fiq(int flags)
{
}

static inline void trace_aspeed_vic_update_irq(int flags)
{
}

static inline void trace_aspeed_vic_read(uint64_t offset, unsigned size, uint32_t value)
{
}

static inline void trace_aspeed_vic_write(uint64_t offset, unsigned size, uint32_t data)
{
}

#endif  /* TRACE_H */
